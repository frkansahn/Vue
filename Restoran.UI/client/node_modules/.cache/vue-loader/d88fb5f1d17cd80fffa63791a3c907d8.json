{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\vue-phone-mask-input\\src\\PhoneMaskInput.vue?vue&type=style&index=0&id=77be0a24&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\vue-phone-mask-input\\src\\PhoneMaskInput.vue","mtime":1554213243000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1581760770709},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1581760786798},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1581760786797}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucGhvbmUtbWFzay13cmFwcGVyLWxpYiB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgaGVpZ2h0OiA0MHB4Owp9CgoucGhvbmUtaW5wdXQtbGliIHsKICBoZWlnaHQ6IDIwcHg7Cn0KCi5jb3VudHJ5LWZsYWctbGliIHsKICBtYXJnaW46IDA7Cn0K"},{"version":3,"sources":["PhoneMaskInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiNA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"PhoneMaskInput.vue","sourceRoot":"node_modules/vue-phone-mask-input/src","sourcesContent":["<template>\n  <div :class=\"wrapperClass\">\n    <the-mask\n      :mask=\"mask\"\n      :value=\"innerValue\"\n      v-on:input=\"onInput\"\n      :tokens=\"plusTokens\"\n      :placeholder=\"placeholder\"\n      :disabled=\"disabled\"\n      masked\n      type=\"tel\"\n      :class=\"inputClass\"\n      ref=\"phoneMask\"\n    />\n    <CountryFlag :country=\"country\" v-if=\"country && showFlag\" :size=\"flagSize\" :class=\"flagClass\"/>\n  </div>\n</template>\n\n<script>\nimport { TheMask } from \"vue-the-mask\";\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\nimport CountryFlag from \"vue-country-flag\";\n\nimport {\n  getMaskToLibPhoneNumber,\n  findFirstCountryByAlpha2,\n  findFirstCountryByCode,\n  isCanada\n} from \"./country_telephone_data.js\";\nimport visitorInfo from \"visitor-info\";\n\nexport default {\n  name: \"PhoneMaskInput\",\n  props: {\n    value: {\n      type: [String, Number]\n    },\n    showFlag: {\n      type: Boolean,\n      default: false\n    },\n    autoDetectCountry: {\n      type: Boolean,\n      default: false\n    },\n    defaultCountry: {\n      type: String\n    },\n    placeholder: {\n      type: String\n    },\n    flagSize: {\n      type: String,\n      default: \"normal\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    wrapperClass: {\n      type: String,\n      default: \"phone-mask-wrapper-lib\"\n    },\n    inputClass: {\n      type: String,\n      default: \"phone-input-lib\"\n    },\n    flagClass: {\n      type: String,\n      default: \"country-flag-lib\"\n    }\n  },\n  components: { TheMask, CountryFlag },\n  data() {\n    return {\n      innerValue: this.value,\n      countryCode: \"\",\n      mask: \"*############\",\n      defaultMask: \"*############\",\n      country: \"\",\n      isValid: false,\n      plusTokens: {\n        \"#\": {\n          pattern: /\\d/\n        },\n        \"*\": {\n          pattern: /\\d|\\+/\n        }\n      }\n    };\n  },\n  computed: {\n    currentNumber: function() {\n      const plus = /^\\+/.test(this.innerValue) || !this.innerValue ? \"\" : \"+\";\n      const filteredNumberArr = this.innerValue\n        ? this.innerValue.match(/[\\d+]/g)\n        : null;\n      const filteredNumber = filteredNumberArr\n        ? filteredNumberArr.join(\"\")\n        : \"\";\n\n      return this.mask === this.defaultMask\n        ? `${plus}${filteredNumber}`\n        : filteredNumber;\n    }\n  },\n  methods: {\n    onInput: function(value) {\n      let filteredValue = value.match(/[\\d+]/g);\n      this.innerValue = filteredValue ? filteredValue.join(\"\") : \"\";\n      this.updateMaskData();\n\n      this.$nextTick(function() {\n        setTimeout(this.setFocusToEnd.bind(this), 0);\n      });\n    },\n\n    setFocusToEnd: function() {\n      const length = this.$refs.phoneMask.$el.value.length;\n      this.$refs.phoneMask.$el.focus();\n      this.$refs.phoneMask.$el.setSelectionRange(length, length);\n    },\n\n    updateMaskData: function() {\n      let {\n        currentNumber,\n        visitorCountry,\n        innerValue,\n        countryCode,\n        defaultMask,\n        autoDetectCountry,\n        defaultCountry\n      } = this;\n\n      let phoneInfo = parsePhoneNumberFromString(currentNumber);\n\n      if (!phoneInfo && !currentNumber) {\n        let country = findFirstCountryByAlpha2(defaultCountry);\n        if (country) {\n          phoneInfo = { country: defaultCountry };\n          autoDetectCountry = false;\n          this.innerValue = `+${country.code}`;\n        }\n      }\n\n      if (phoneInfo && !phoneInfo.country) {\n        switch (phoneInfo.countryCallingCode) {\n          case \"44\": {\n            phoneInfo.country = \"GB\";\n            break;\n          }\n          case \"1\": {\n            if (currentNumber.length > 4)\n              phoneInfo.country = isCanada(currentNumber) ? \"CA\" : \"US\";\n            break;\n          }\n        }\n      } else if (autoDetectCountry && visitorCountry && !innerValue)\n        phoneInfo = { country: visitorCountry };\n      else if (!phoneInfo && currentNumber.length > 2)\n        phoneInfo = { country: findFirstCountryByCode(currentNumber) };\n\n      const computedMask = getMaskToLibPhoneNumber(phoneInfo);\n      const computedCountry =\n        phoneInfo && phoneInfo.country ? phoneInfo.country.toLowerCase() : \"\";\n\n      if (autoDetectCountry && visitorCountry) {\n        if (!innerValue) this.innerValue = computedMask.countryCode;\n        this.visitorCountry = null;\n      }\n\n      if (computedMask && computedMask.mask) {\n        this.mask = computedMask.mask;\n        this.country = computedCountry;\n        this.countryCode = computedMask.countryCode;\n        this.isValid = !!phoneInfo && !!phoneInfo.isValid && phoneInfo.isValid();\n      } else if (countryCode.length > currentNumber.length) {\n        this.mask = defaultMask;\n        this.country = \"\";\n        this.countryCode = \"\";\n        this.isValid = false;\n      }\n    }\n  },\n  watch: {\n    currentNumber(value) {\n      this.$emit(\"input\", value);\n      this.$emit(\"onValidate\", {number: value, isValidByLibPhoneNumberJs: this.isValid, country: this.country});\n    }\n  },\n  beforeMount() {\n    if (this.autoDetectCountry) {\n      const visitorContryInfo = visitorInfo();\n      this.visitorCountry =\n        visitorContryInfo && visitorContryInfo.country\n          ? visitorContryInfo.country.alpha2\n          : \"\";\n    }\n    this.updateMaskData();\n  },\n  mounted() {\n     this.$refs.phoneMask.$el.onblur = () => {this.$emit(\"onBlur\")}\n     this.$refs.phoneMask.$el.onfocus = () => {this.$emit(\"onFocus\")}\n\n  }\n};\n</script>\n\n<style scoped>\n.phone-mask-wrapper-lib {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 40px;\n}\n\n.phone-input-lib {\n  height: 20px;\n}\n\n.country-flag-lib {\n  margin: 0;\n}\n</style>\n"]}]}