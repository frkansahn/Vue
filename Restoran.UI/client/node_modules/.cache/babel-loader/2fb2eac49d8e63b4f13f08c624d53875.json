{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\domconverter.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\domconverter.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js"],"names":["ViewText","ViewElement","ViewPosition","ViewRange","ViewSelection","ViewDocumentFragment","ViewTreeWalker","BR_FILLER","getDataWithoutFiller","INLINE_FILLER_LENGTH","isInlineFiller","NBSP_FILLER","startsWithFiller","global","indexOf","getAncestors","getCommonAncestor","isText","isElement","BR_FILLER_REF","document","DomConverter","options","blockFillerMode","preElements","blockElements","_blockFiller","_domToViewMapping","WeakMap","_viewToDomMapping","_fakeSelectionMapping","domElement","viewDocumentSelection","set","get","viewElement","delete","Array","from","childNodes","child","unbindDomElement","domFragment","viewFragment","viewNode","domDocument","is","textData","_processDataFromViewText","createTextNode","mapViewToDom","createDocumentFragment","bind","bindDocumentFragments","render","bindElements","hasAttribute","createElementNS","getAttribute","name","createElement","getAttributeKeys","key","setAttribute","withChildren","undefined","viewChildrenToDom","appendChild","fillerPositionOffset","getFillerOffset","offset","getChildren","childView","viewToDom","viewRange","domStart","viewPositionToDom","start","domEnd","end","domRange","createRange","setStart","parent","setEnd","viewPosition","viewParent","domParent","findCorrespondingDomText","domBefore","domAfter","nodeBefore","parentNode","nextSibling","domNode","isBlockFiller","uiElement","getParentUIElement","_processDataFromDomText","isComment","mapDomToView","isDocumentFragment","viewName","keepOriginalCase","tagName","toLowerCase","attrs","attributes","i","length","_setAttribute","value","domChildrenToView","_appendChild","domChild","viewChild","domToView","domSelection","rangeCount","container","getRangeAt","startContainer","viewSelection","fakeSelectionToView","isBackward","isDomSelectionBackward","viewRanges","domRangeToView","push","backward","viewStart","domPositionToView","startOffset","viewEnd","endContainer","endOffset","domOffset","_createBefore","findCorrespondingViewText","viewBefore","index","domElementOrDocumentFragment","domText","previousSibling","firstChild","getChild","documentFragmentOrElement","viewText","viewEditable","domEditable","ownerDocument","activeElement","window","scrollX","scrollY","scrollPositions","forEachDomNodeAncestor","node","scrollLeft","scrollTop","focus","shift","scrollTo","nodeType","Node","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","isEqualNode","hasBlockParent","isNbspBlockFiller","selection","isCollapsed","range","anchorNode","anchorOffset","focusNode","focusOffset","collapsed","detach","ancestors","pop","_isDomSelectionPositionCorrect","data","some","includes","charAt","prevNode","_getTouchingViewTextNode","prevEndsWithSpace","_nodeEndsWithSpace","substr","nextNode","replace","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","Text","test","getNext","treeWalker","startPosition","_createAfter","direction","item","topmostParent","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","FILTER_ACCEPT","FILTER_SKIP","currentNode","touchingNode","lca","types","boundaryParent","parents","slice","callback","isNBSP"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter, Text */\n\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, getDataWithoutFiller, INLINE_FILLER_LENGTH, isInlineFiller, NBSP_FILLER, startsWithFiller } from './filler';\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport { isElement } from 'lodash-es';\n\n// eslint-disable-next-line new-cap\nconst BR_FILLER_REF = BR_FILLER( document );\n\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * The instance of DOMConverter is available in {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n\t/**\n\t * Creates DOM converter.\n\t *\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t * @param {Object} options Object with configuration options.\n\t * @param {module:engine/view/filler~BlockFillerMode} [options.blockFillerMode='br'] The type of the block filler to use.\n\t */\n\tconstructor( document, options = {} ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * The mode of a block filler used by DOM converter.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'br'|'nbsp'} module:engine/view/domconverter~DomConverter#blockFillerMode\n\t\t */\n\t\tthis.blockFillerMode = options.blockFillerMode || 'br';\n\n\t\t/**\n\t\t * Elements which are considered pre-formatted elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n\t\t */\n\t\tthis.preElements = [ 'pre' ];\n\n\t\t/**\n\t\t * Elements which are considered block elements (and hence should be filled with a\n\t\t * {@link #isBlockFiller block filler}).\n\t\t *\n\t\t * Whether an element is considered a block element also affects handling of trailing whitespaces.\n\t\t *\n\t\t * You can extend this array if you introduce support for block elements which are not yet recognized here.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n\t\t */\n\t\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'dd', 'dt', 'figcaption' ];\n\n\t\t/**\n\t\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n\t\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Function} module:engine/view/domconverter~DomConverter#_blockFiller\n\t\t */\n\t\tthis._blockFiller = this.blockFillerMode == 'br' ? BR_FILLER : NBSP_FILLER;\n\n\t\t/**\n\t\t * DOM to View mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n\t\t */\n\t\tthis._domToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View to DOM mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n\t\t */\n\t\tthis._viewToDomMapping = new WeakMap();\n\n\t\t/**\n\t\t * Holds mapping between fake selection containers and corresponding view selections.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n\t\t */\n\t\tthis._fakeSelectionMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Binds given DOM element that represents fake selection to a **position** of a\n\t * {@link module:engine/view/documentselection~DocumentSelection document selection}.\n\t * Document selection copy is stored and can be retrieved by\n\t * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @param {module:engine/view/documentselection~DocumentSelection} viewDocumentSelection\n\t */\n\tbindFakeSelection( domElement, viewDocumentSelection ) {\n\t\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewDocumentSelection ) );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to\n\t * given DOM element that represents fake selection. Returns `undefined` if binding to given DOM element does not exists.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @returns {module:engine/view/selection~Selection|undefined}\n\t */\n\tfakeSelectionToView( domElement ) {\n\t\treturn this._fakeSelectionMapping.get( domElement );\n\t}\n\n\t/**\n\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {HTMLElement} domElement DOM element to bind.\n\t * @param {module:engine/view/element~Element} viewElement View element to bind.\n\t */\n\tbindElements( domElement, viewElement ) {\n\t\tthis._domToViewMapping.set( domElement, viewElement );\n\t\tthis._viewToDomMapping.set( viewElement, domElement );\n\t}\n\n\t/**\n\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n\t * `domElement` will be unbound too.\n\t *\n\t * @param {HTMLElement} domElement DOM element to unbind.\n\t */\n\tunbindDomElement( domElement ) {\n\t\tconst viewElement = this._domToViewMapping.get( domElement );\n\n\t\tif ( viewElement ) {\n\t\t\tthis._domToViewMapping.delete( domElement );\n\t\t\tthis._viewToDomMapping.delete( viewElement );\n\n\t\t\t// Use Array.from because of MS Edge (#923).\n\t\t\tfor ( const child of Array.from( domElement.childNodes ) ) {\n\t\t\t\tthis.unbindDomElement( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n\t */\n\tbindDocumentFragments( domFragment, viewFragment ) {\n\t\tthis._domToViewMapping.set( domFragment, viewFragment );\n\t\tthis._viewToDomMapping.set( viewFragment, domFragment );\n\t}\n\n\t/**\n\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View node or document fragment to transform.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n\t */\n\tviewToDom( viewNode, domDocument, options = {} ) {\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tconst textData = this._processDataFromViewText( viewNode );\n\n\t\t\treturn domDocument.createTextNode( textData );\n\t\t} else {\n\t\t\tif ( this.mapViewToDom( viewNode ) ) {\n\t\t\t\treturn this.mapViewToDom( viewNode );\n\t\t\t}\n\n\t\t\tlet domElement;\n\n\t\t\tif ( viewNode.is( 'documentFragment' ) ) {\n\t\t\t\t// Create DOM document fragment.\n\t\t\t\tdomElement = domDocument.createDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domElement, viewNode );\n\t\t\t\t}\n\t\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\t\t// UIElement has its own render() method (see #799).\n\t\t\t\tdomElement = viewNode.render( domDocument );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\treturn domElement;\n\t\t\t} else {\n\t\t\t\t// Create DOM element.\n\t\t\t\tif ( viewNode.hasAttribute( 'xmlns' ) ) {\n\t\t\t\t\tdomElement = domDocument.createElementNS( viewNode.getAttribute( 'xmlns' ), viewNode.name );\n\t\t\t\t} else {\n\t\t\t\t\tdomElement = domDocument.createElement( viewNode.name );\n\t\t\t\t}\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tfor ( const key of viewNode.getAttributeKeys() ) {\n\t\t\t\t\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\n\t\t\t\t\tdomElement.appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn domElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the view element to DOM using the\n\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n\t * @returns {Iterable.<Node>} DOM nodes.\n\t */\n\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\n\t\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n\t\tlet offset = 0;\n\n\t\tfor ( const childView of viewElement.getChildren() ) {\n\t\t\tif ( fillerPositionOffset === offset ) {\n\t\t\t\tyield this._blockFiller( domDocument );\n\t\t\t}\n\n\t\t\tyield this.viewToDom( childView, domDocument, options );\n\n\t\t\toffset++;\n\t\t}\n\n\t\tif ( fillerPositionOffset === offset ) {\n\t\t\tyield this._blockFiller( domDocument );\n\t\t}\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/range~Range} to DOM range.\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {Range} DOM range.\n\t */\n\tviewRangeToDom( viewRange ) {\n\t\tconst domStart = this.viewPositionToDom( viewRange.start );\n\t\tconst domEnd = this.viewPositionToDom( viewRange.end );\n\n\t\tconst domRange = document.createRange();\n\t\tdomRange.setStart( domStart.parent, domStart.offset );\n\t\tdomRange.setEnd( domEnd.parent, domEnd.offset );\n\n\t\treturn domRange;\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n\t *\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t * If the converted position is directly before inline filler it is moved inside the filler.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n\t * @returns {Node} position.parent DOM position parent.\n\t * @returns {Number} position.offset DOM position offset.\n\t */\n\tviewPositionToDom( viewPosition ) {\n\t\tconst viewParent = viewPosition.parent;\n\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\tconst domParent = this.findCorrespondingDomText( viewParent );\n\n\t\t\tif ( !domParent ) {\n\t\t\t\t// Position is in a view text node that has not been rendered to DOM yet.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet offset = viewPosition.offset;\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset += INLINE_FILLER_LENGTH;\n\t\t\t}\n\n\t\t\treturn { parent: domParent, offset };\n\t\t} else {\n\t\t\t// viewParent is instance of ViewElement.\n\t\t\tlet domParent, domBefore, domAfter;\n\n\t\t\tif ( viewPosition.offset === 0 ) {\n\t\t\t\tdomParent = this.mapViewToDom( viewParent );\n\n\t\t\t\tif ( !domParent ) {\n\t\t\t\t\t// Position is in a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomAfter = domParent.childNodes[ 0 ];\n\t\t\t} else {\n\t\t\t\tconst nodeBefore = viewPosition.nodeBefore;\n\n\t\t\t\tdomBefore = nodeBefore.is( 'text' ) ?\n\t\t\t\t\tthis.findCorrespondingDomText( nodeBefore ) :\n\t\t\t\t\tthis.mapViewToDom( viewPosition.nodeBefore );\n\n\t\t\t\tif ( !domBefore ) {\n\t\t\t\t\t// Position is after a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomParent = domBefore.parentNode;\n\t\t\t\tdomAfter = domBefore.nextSibling;\n\t\t\t}\n\n\t\t\t// If there is an inline filler at position return position inside the filler. We should never return\n\t\t\t// the position before the inline filler.\n\t\t\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\n\t\t\t\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n\t\t\t}\n\n\t\t\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\n\n\t\t\treturn { parent: domParent, offset };\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items. For\n\t * {@link module:engine/view/filler fillers} `null` will be returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n\t */\n\tdomToView( domNode, options = {} ) {\n\t\tif ( this.isBlockFiller( domNode, this.blockFillerMode ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When node is inside UIElement return that UIElement as it's view representation.\n\t\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tif ( isText( domNode ) ) {\n\t\t\tif ( isInlineFiller( domNode ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst textData = this._processDataFromDomText( domNode );\n\n\t\t\t\treturn textData === '' ? null : new ViewText( this.document, textData );\n\t\t\t}\n\t\t} else if ( this.isComment( domNode ) ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ( this.mapDomToView( domNode ) ) {\n\t\t\t\treturn this.mapDomToView( domNode );\n\t\t\t}\n\n\t\t\tlet viewElement;\n\n\t\t\tif ( this.isDocumentFragment( domNode ) ) {\n\t\t\t\t// Create view document fragment.\n\t\t\t\tviewElement = new ViewDocumentFragment( this.document );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domNode, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create view element.\n\t\t\t\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n\t\t\t\tviewElement = new ViewElement( this.document, viewName );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domNode, viewElement );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tconst attrs = domNode.attributes;\n\n\t\t\t\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\n\t\t\t\t\tviewElement._appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn viewElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the DOM element to view nodes using\n\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n\t *\n\t * @param {HTMLElement} domElement Parent DOM element.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n\t */\n\t* domChildrenToView( domElement, options = {} ) {\n\t\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\n\t\t\tconst domChild = domElement.childNodes[ i ];\n\t\t\tconst viewChild = this.domToView( domChild, options );\n\n\t\t\tif ( viewChild !== null ) {\n\t\t\t\tyield viewChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n\t * Ranges which cannot be converted will be omitted.\n\t *\n\t * @param {Selection} domSelection DOM selection.\n\t * @returns {module:engine/view/selection~Selection} View selection.\n\t */\n\tdomSelectionToView( domSelection ) {\n\t\t// DOM selection might be placed in fake selection container.\n\t\t// If container contains fake selection - return corresponding view selection.\n\t\tif ( domSelection.rangeCount === 1 ) {\n\t\t\tlet container = domSelection.getRangeAt( 0 ).startContainer;\n\n\t\t\t// The DOM selection might be moved to the text node inside the fake selection container.\n\t\t\tif ( isText( container ) ) {\n\t\t\t\tcontainer = container.parentNode;\n\t\t\t}\n\n\t\t\tconst viewSelection = this.fakeSelectionToView( container );\n\n\t\t\tif ( viewSelection ) {\n\t\t\t\treturn viewSelection;\n\t\t\t}\n\t\t}\n\n\t\tconst isBackward = this.isDomSelectionBackward( domSelection );\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\n\t\t\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n\t\t\tconst domRange = domSelection.getRangeAt( i );\n\t\t\tconst viewRange = this.domRangeToView( domRange );\n\n\t\t\tif ( viewRange ) {\n\t\t\t\tviewRanges.push( viewRange );\n\t\t\t}\n\t\t}\n\n\t\treturn new ViewSelection( viewRanges, { backward: isBackward } );\n\t}\n\n\t/**\n\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\n\t * If the start or end position can not be converted `null` is returned.\n\t *\n\t * @param {Range} domRange DOM range.\n\t * @returns {module:engine/view/range~Range|null} View range.\n\t */\n\tdomRangeToView( domRange ) {\n\t\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\n\t\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\n\n\t\tif ( viewStart && viewEnd ) {\n\t\t\treturn new ViewRange( viewStart, viewEnd );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n\t *\n\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n\t * position of the filler will be converted and returned.\n\t *\n\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n\t * that position will be converted to view position before that UIElement.\n\t *\n\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n\t *\n\t * @param {Node} domParent DOM position parent.\n\t * @param {Number} domOffset DOM position offset.\n\t * @returns {module:engine/view/position~Position} viewPosition View position.\n\t */\n\tdomPositionToView( domParent, domOffset ) {\n\t\tif ( this.isBlockFiller( domParent, this.blockFillerMode ) ) {\n\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t}\n\n\t\t// If position is somewhere inside UIElement - return position before that element.\n\t\tconst viewElement = this.mapDomToView( domParent );\n\n\t\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\n\t\t\treturn ViewPosition._createBefore( viewElement );\n\t\t}\n\n\t\tif ( isText( domParent ) ) {\n\t\t\tif ( isInlineFiller( domParent ) ) {\n\t\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t\t}\n\n\t\t\tconst viewParent = this.findCorrespondingViewText( domParent );\n\t\t\tlet offset = domOffset;\n\n\t\t\tif ( !viewParent ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset -= INLINE_FILLER_LENGTH;\n\t\t\t\toffset = offset < 0 ? 0 : offset;\n\t\t\t}\n\n\t\t\treturn new ViewPosition( viewParent, offset );\n\t\t}\n\t\t// domParent instanceof HTMLElement.\n\t\telse {\n\t\t\tif ( domOffset === 0 ) {\n\t\t\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t\t\tif ( viewParent ) {\n\t\t\t\t\treturn new ViewPosition( viewParent, 0 );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\n\t\t\t\tconst viewBefore = isText( domBefore ) ?\n\t\t\t\t\tthis.findCorrespondingViewText( domBefore ) :\n\t\t\t\t\tthis.mapDomToView( domBefore );\n\n\t\t\t\t// TODO #663\n\t\t\t\tif ( viewBefore && viewBefore.parent ) {\n\t\t\t\t\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * to the given DOM - `undefined` is returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n\t * Corresponding view element, document fragment or `undefined` if no element was bound.\n\t */\n\tmapDomToView( domElementOrDocumentFragment ) {\n\t\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n\t *\n\t * @param {Text} domText DOM text node.\n\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n\t * corresponding node.\n\t */\n\tfindCorrespondingViewText( domText ) {\n\t\tif ( isInlineFiller( domText ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If DOM text was rendered by UIElement - return that element.\n\t\tconst uiElement = this.getParentUIElement( domText );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tconst previousSibling = domText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling ) {\n\t\t\tif ( !( this.isElement( previousSibling ) ) ) {\n\t\t\t\t// The previous is text or comment.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewElement = this.mapDomToView( previousSibling );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst nextSibling = viewElement.nextSibling;\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( nextSibling instanceof ViewText ) {\n\t\t\t\t\treturn viewElement.nextSibling;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Try to use parent to find the corresponding text node.\n\t\telse {\n\t\t\tconst viewElement = this.mapDomToView( domText.parentNode );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst firstChild = viewElement.getChild( 0 );\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( firstChild instanceof ViewText ) {\n\t\t\t\t\treturn firstChild;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n\t * use {@link #findCorrespondingDomText}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View element or document fragment.\n\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n\t */\n\tmapViewToDom( documentFragmentOrElement ) {\n\t\treturn this._viewToDomMapping.get( documentFragmentOrElement );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} viewText View text node.\n\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n\t */\n\tfindCorrespondingDomText( viewText ) {\n\t\tconst previousSibling = viewText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\n\t\t\treturn this.mapViewToDom( previousSibling ).nextSibling;\n\t\t}\n\n\t\t// If this is a first node, try to use parent to find the corresponding text node.\n\t\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\n\t\t\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\n\t */\n\tfocus( viewEditable ) {\n\t\tconst domEditable = this.mapViewToDom( viewEditable );\n\n\t\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\n\t\t\t// Save the scrollX and scrollY positions before the focus.\n\t\t\tconst { scrollX, scrollY } = global.window;\n\t\t\tconst scrollPositions = [];\n\n\t\t\t// Save all scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst { scrollLeft, scrollTop } = node;\n\n\t\t\t\tscrollPositions.push( [ scrollLeft, scrollTop ] );\n\t\t\t} );\n\n\t\t\tdomEditable.focus();\n\n\t\t\t// Restore scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\n\n\t\t\t\tnode.scrollLeft = scrollLeft;\n\t\t\t\tnode.scrollTop = scrollTop;\n\t\t\t} );\n\n\t\t\t// Restore the scrollX and scrollY positions after the focus.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\tglobal.window.scrollTo( scrollX, scrollY );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisElement( node ) {\n\t\treturn node && node.nodeType == Node.ELEMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisDocumentFragment( node ) {\n\t\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisComment( node ) {\n\t\treturn node && node.nodeType == Node.COMMENT_NODE;\n\t}\n\n\t/**\n\t * Checks if the node is an instance of the block filler for this DOM converter.\n\t *\n\t *\t\tconst converter = new DomConverter( viewDocument, { blockFillerMode: 'br' } );\n\t *\n\t *\t\tconverter.isBlockFiller( BR_FILLER( document ) ); // true\n\t *\t\tconverter.isBlockFiller( NBSP_FILLER( document ) ); // false\n\t *\n\t * **Note:**: For the `'nbsp'` mode the method also checks context of a node so it cannot be a detached node.\n\t *\n\t * **Note:** A special case in the `'nbsp'` mode exists where the `<br>` in `<p><br></p>` is treated as a block filler.\n\t *\n\t * @param {Node} domNode DOM node to check.\n\t * @returns {Boolean} True if a node is considered a block filler for given mode.\n\t */\n\tisBlockFiller( domNode ) {\n\t\tif ( this.blockFillerMode == 'br' ) {\n\t\t\treturn domNode.isEqualNode( BR_FILLER_REF );\n\t\t}\n\n\t\t// Special case for <p><br></p> in which case the <br> should be treated as filler even\n\t\t// when we're in the 'nbsp' mode. See ckeditor5#5564.\n\t\tif ( domNode.tagName === 'BR' && hasBlockParent( domNode, this.blockElements ) && domNode.parentNode.childNodes.length === 1 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn isNbspBlockFiller( domNode, this.blockElements );\n\t}\n\n\t/**\n\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n\t *\n\t * @param {Selection} DOM Selection instance to check.\n\t * @returns {Boolean}\n\t */\n\tisDomSelectionBackward( selection ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n\t\t// we will use the fact that range will collapse if it's end is before it's start.\n\t\tconst range = document.createRange();\n\n\t\trange.setStart( selection.anchorNode, selection.anchorOffset );\n\t\trange.setEnd( selection.focusNode, selection.focusOffset );\n\n\t\tconst backward = range.collapsed;\n\n\t\trange.detach();\n\n\t\treturn backward;\n\t}\n\n\t/**\n\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n\t * parent UIElement.\n\t *\n\t * @param {Node} domNode\n\t * @returns {module:engine/view/uielement~UIElement|null}\n\t */\n\tgetParentUIElement( domNode ) {\n\t\tconst ancestors = getAncestors( domNode );\n\n\t\t// Remove domNode from the list.\n\t\tancestors.pop();\n\n\t\twhile ( ancestors.length ) {\n\t\t\tconst domNode = ancestors.pop();\n\t\t\tconst viewNode = this._domToViewMapping.get( domNode );\n\n\t\t\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\n\t\t\t\treturn viewNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if given selection's boundaries are at correct places.\n\t *\n\t * The following places are considered as incorrect for selection boundaries:\n\t * * before or in the middle of the inline filler sequence,\n\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n\t *\n\t * @param {Selection} domSelection DOM Selection object to be checked.\n\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n\t */\n\tisDomSelectionCorrect( domSelection ) {\n\t\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\n\t\t\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\n\t}\n\n\t/**\n\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n\t *\n\t * @private\n\t * @param {Element} domParent Position parent.\n\t * @param {Number} offset Position offset.\n\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n\t */\n\t_isDomSelectionPositionCorrect( domParent, offset ) {\n\t\t// If selection is before or in the middle of inline filler string, it is incorrect.\n\t\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\n\t\t\t// Selection in a text node, at wrong position (before or in the middle of filler).\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\n\t\t\t// Selection in an element node, before filler text node.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n\t\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\t\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n\t * it is correctly displayed in the DOM.\n\t *\n\t * Following changes are done:\n\t *\n\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n\t * element or if a previous text node ends with a space character,\n\t * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container,\n\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n\t *\n\t * Content of {@link #preElements} is not processed.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node View text node to process.\n\t * @returns {String} Processed text data.\n\t */\n\t_processDataFromViewText( node ) {\n\t\tlet data = node.data;\n\n\t\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\n\t\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n\t\t// (container element boundary).\n\t\tif ( data.charAt( 0 ) == ' ' ) {\n\t\t\tconst prevNode = this._getTouchingViewTextNode( node, false );\n\t\t\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\n\n\t\t\tif ( prevEndsWithSpace || !prevNode ) {\n\t\t\t\tdata = '\\u00A0' + data.substr( 1 );\n\t\t\t}\n\t\t}\n\n\t\t// 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n\t\t// next node (container element boundary).\n\t\t//\n\t\t// Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n\t\t//\n\t\t// Foo <span>&nbsp;bar</span>  <-- bad.\n\t\t// Foo&nbsp;<span> bar</span>  <-- good.\n\t\t//\n\t\t// More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n\t\tif ( data.charAt( data.length - 1 ) == ' ' ) {\n\t\t\tconst nextNode = this._getTouchingViewTextNode( node, true );\n\n\t\t\tif ( data.charAt( data.length - 2 ) == ' ' || !nextNode || nextNode.data.charAt( 0 ) == ' ' ) {\n\t\t\t\tdata = data.substr( 0, data.length - 1 ) + '\\u00A0';\n\t\t\t}\n\t\t}\n\n\t\t// 3. Create space+nbsp pairs.\n\t\treturn data.replace( / {2}/g, ' \\u00A0' );\n\t}\n\n\t/**\n\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node Node to check.\n\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n\t */\n\t_nodeEndsWithSpace( node ) {\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = this._processDataFromViewText( node );\n\n\t\treturn data.charAt( data.length - 1 ) == ' ';\n\t}\n\n\t/**\n\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n\t *\n\t * Following changes are done:\n\t *\n\t * * multiple whitespaces are replaced to a single space,\n\t * * space at the beginning of a text node is removed if it is the first text node in its container\n\t * element or if the previous text node ends with a space character,\n\t * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container\n\t * * nbsps are converted to spaces.\n\t *\n\t * @param {Node} node DOM text node to process.\n\t * @returns {String} Processed data.\n\t * @private\n\t */\n\t_processDataFromDomText( node ) {\n\t\tlet data = node.data;\n\n\t\tif ( _hasDomParentOfType( node, this.preElements ) ) {\n\t\t\treturn getDataWithoutFiller( node );\n\t\t}\n\n\t\t// Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n\t\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n\t\t// We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\t\tdata = data.replace( /[ \\n\\t\\r]{1,}/g, ' ' );\n\n\t\tconst prevNode = this._getTouchingInlineDomNode( node, false );\n\t\tconst nextNode = this._getTouchingInlineDomNode( node, true );\n\n\t\tconst shouldLeftTrim = this._checkShouldLeftTrimDomText( prevNode );\n\t\tconst shouldRightTrim = this._checkShouldRightTrimDomText( node, nextNode );\n\n\t\t// If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n\t\t// of this text node. Such space character is treated as a whitespace.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^ /, '' );\n\t\t}\n\n\t\t// If the next text node does not exist remove space character from the end of this text node.\n\t\tif ( shouldRightTrim ) {\n\t\t\tdata = data.replace( / $/, '' );\n\t\t}\n\n\t\t// At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n\t\t// This means that the text node starts/end with normal space instead of non-breaking space.\n\t\t// This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n\t\t// the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n\t\tdata = getDataWithoutFiller( new Text( data ) );\n\n\t\t// At this point we should have removed all whitespaces from DOM text data.\n\t\t//\n\t\t// Now, We will reverse the process that happens in `_processDataFromViewText`.\n\t\t//\n\t\t// We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n\t\t// First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n\t\t// ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n\t\tdata = data.replace( / \\u00A0/g, '  ' );\n\n\t\t// Then, let's change the last nbsp to a space.\n\t\tif ( /( |\\u00A0)\\u00A0$/.test( data ) || !nextNode || ( nextNode.data && nextNode.data.charAt( 0 ) == ' ' ) ) {\n\t\t\tdata = data.replace( /\\u00A0$/, ' ' );\n\t\t}\n\n\t\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\n\t\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^\\u00A0/, ' ' );\n\t\t}\n\n\t\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n\t\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\t\treturn data;\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n\t * be trimmed from the left side.\n\t *\n\t * @param {Node} prevNode\n\t */\n\t_checkShouldLeftTrimDomText( prevNode ) {\n\t\tif ( !prevNode ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( isElement( prevNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) );\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n\t * be trimmed from the right side.\n\t *\n\t * @param {Node} node\n\t * @param {Node} nextNode\n\t */\n\t_checkShouldRightTrimDomText( node, nextNode ) {\n\t\tif ( nextNode ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !startsWithFiller( node );\n\t}\n\n\t/**\n\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} node Reference node.\n\t * @param {Boolean} getNext\n\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n\t */\n\t_getTouchingViewTextNode( node, getNext ) {\n\t\tconst treeWalker = new ViewTreeWalker( {\n\t\t\tstartPosition: getNext ? ViewPosition._createAfter( node ) : ViewPosition._createBefore( node ),\n\t\t\tdirection: getNext ? 'forward' : 'backward'\n\t\t} );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n\t\t\t// text node in its container element.\n\t\t\tif ( value.item.is( 'containerElement' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// <br> found – it works like a block boundary, so do not scan further.\n\t\t\telse if ( value.item.is( 'br' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Found a text node in the same container element.\n\t\t\telse if ( value.item.is( 'textProxy' ) ) {\n\t\t\t\treturn value.item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Helper function. For the given text node, it finds the closest touching node which is either\n\t * a text node or a `<br>`. The search is terminated at block element boundaries and if a matching node\n\t * wasn't found so far, `null` is returned.\n\t *\n\t * In the following DOM structure:\n\t *\n\t *\t\t<p>foo<b>bar</b><br>bom</p>\n\t *\n\t * * `foo` doesn't have its previous touching inline node (`null` is returned),\n\t * * `foo`'s next touching inline node is `bar`\n\t * * `bar`'s next touching inline node is `<br>`\n\t *\n\t * This method returns text nodes and `<br>` elements because these types of nodes affect how\n\t * spaces in the given text node need to be converted.\n\t *\n\t * @private\n\t * @param {Text} node\n\t * @param {Boolean} getNext\n\t * @returns {Text|Element|null}\n\t */\n\t_getTouchingInlineDomNode( node, getNext ) {\n\t\tif ( !node.parentNode ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst direction = getNext ? 'nextNode' : 'previousNode';\n\t\tconst document = node.ownerDocument;\n\t\tconst topmostParent = getAncestors( node )[ 0 ];\n\n\t\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n\t\t\tacceptNode( node ) {\n\t\t\t\tif ( isText( node ) ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\tif ( node.tagName == 'BR' ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\treturn NodeFilter.FILTER_SKIP;\n\t\t\t}\n\t\t} );\n\n\t\ttreeWalker.currentNode = node;\n\n\t\tconst touchingNode = treeWalker[ direction ]();\n\n\t\tif ( touchingNode !== null ) {\n\t\t\tconst lca = getCommonAncestor( node, touchingNode );\n\n\t\t\t// If there is common ancestor between the text node and next/prev text node,\n\t\t\t// and there are no block elements on a way from the text node to that ancestor,\n\t\t\t// and there are no block elements on a way from next/prev text node to that ancestor...\n\t\t\tif (\n\t\t\t\tlca &&\n\t\t\t\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\n\t\t\t\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\n\t\t\t) {\n\t\t\t\t// Then they are in the same container element.\n\t\t\t\treturn touchingNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n// Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\n\tlet parents = getAncestors( node );\n\n\tif ( boundaryParent ) {\n\t\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\n\t}\n\n\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\n}\n\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\nfunction forEachDomNodeAncestor( node, callback ) {\n\twhile ( node && node != global.document ) {\n\t\tcallback( node );\n\t\tnode = node.parentNode;\n\t}\n}\n\n// Checks if given node is a nbsp block filler.\n//\n// A &nbsp; is a block filler only if it is a single child of a block element.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\nfunction isNbspBlockFiller( domNode, blockElements ) {\n\tconst isNBSP = isText( domNode ) && domNode.data == '\\u00A0';\n\n\treturn isNBSP && hasBlockParent( domNode, blockElements ) && domNode.parentNode.childNodes.length === 1;\n}\n\n// Checks if domNode has block parent.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\nfunction hasBlockParent( domNode, blockElements ) {\n\tconst parent = domNode.parentNode;\n\n\treturn parent && parent.tagName && blockElements.includes( parent.tagName.toLowerCase() );\n}\n\n/**\n * Enum representing type of the block filler.\n *\n * Possible values:\n *\n * * `br` - for `<br>` block filler used in editing view,\n * * `nbsp` - for `&nbsp;` block fillers used in the data.\n *\n * @typedef {String} module:engine/view/filler~BlockFillerMode\n */\n"]}]}