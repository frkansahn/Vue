{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\downcastwriter.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\downcastwriter.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js"],"names":["Position","Range","Selection","ContainerElement","AttributeElement","EmptyElement","UIElement","CKEditorError","DocumentFragment","isIterable","Text","EditableElement","isPlainObject","DowncastWriter","document","_cloneGroups","Map","selectable","placeOrOffset","options","selection","_setTo","itemOrPosition","offset","_setFocus","data","name","attributes","attributeElement","priority","_priority","id","_id","editableElement","_document","renderFunction","uiElement","render","key","value","element","_setAttribute","_removeAttribute","className","_addClass","_removeClass","property","undefined","_setStyle","_removeStyle","_setCustomProperty","_removeCustomProperty","positionOrRange","_breakAttributes","_breakAttributesRange","position","parent","is","isAtStart","_createBefore","isAtEnd","newElement","_clone","insert","_createAfter","sourceRange","_createAt","targetPosition","move","positionOffset","positionParent","childCount","index","_remove","_removeFromClonedElementsGroup","mergeAttributes","nodeBefore","getChild","nodeAfter","mergeTextNodes","isSimilar","count","_appendChild","getChildren","prev","next","lastChild","newPosition","_createIn","remove","_createOn","nodes","validateNodesToInsert","container","getParentContainer","insertionPosition","length","_insertChild","node","_addToClonedElementsGroup","endPosition","getShiftedBy","start","isEqual","end","rangeOrItem","range","validateRangeContainer","isCollapsed","breakStart","breakEnd","parentContainer","removed","_removeChildren","mergePosition","clone","walker","getWalker","direction","ignoreElementEnd","current","item","rangeToRemove","nextPosition","isAfter","parentElement","getAncestors","find","ancestor","isBefore","countBefore","attribute","_wrapRange","_hasNonUiChildren","getLastMatchingPosition","_wrapPosition","viewSelection","getFirstPosition","setSelection","newRange","_unwrapChildren","newName","viewElement","getAttributes","groupName","delete","startOffset","endOffset","wrapElement","i","wrapPositions","child","isText","isAttribute","isEmpty","isUI","_wrapAttributeElement","push","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","_createFromParentsAndOffsets","unwrapElement","unwrapPositions","unwrapped","_unwrapAttributeElement","movePositionToTextNode","breakTextNode","fakePosition","createAttributeElement","Number","POSITIVE_INFINITY","wrapRange","wrap","wrapper","toWrap","canBeJoined","getAttributeKeys","hasAttribute","getAttribute","getStyleNames","hasStyle","getStyle","setAttribute","setStyle","getClassNames","hasClass","addClass","toUnwrap","removeAttribute","removeClass","Array","from","removeStyle","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","root","group","get","Set","set","add","_clonesGroup","some","a","b","getIdentity","textToMove","slice","_data","t1","t2","nodeBeforeLength","errorContext","validNodesToInsert","validNode","startContainer","endContainer"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/downcastwriter\n */\n\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n\t/**\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * The view document instance in which this writer operates.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t\t * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._cloneGroups = new Map();\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/documentselection~DocumentSelection selection's} ranges and direction to the\n\t * specified location based on the given {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t * Usage:\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets backward selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'p' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t * \t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `DowncastWriter#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t *\t\t// Sets selection as fake.\n\t *\t\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * \t\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * \t\t// represented in other way, for example by applying proper CSS class.\n\t *\t\twriter.setSelection( range, { fake: true } );\n\t *\n\t * \t\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * \t\t// (and be  properly handled by screen readers).\n\t *\t\twriter.setSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( this.document, data );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\n\t *\n\t *\t\twriter.createAttributeElement( 'strong' );\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' } );\n\t *\n\t *\t\t// Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n\t *\n\t *\t\t// Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n\t *\t\twriter.createAttributeElement( 'span', { class: 'my-marker' }, { id: 'marker:my' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Element's attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Number} [options.priority] Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n\t * @param {Number|String} [options.id] Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n\t */\n\tcreateAttributeElement( name, attributes, options = {} ) {\n\t\tconst attributeElement = new AttributeElement( this.document, name, attributes );\n\n\t\tif ( options.priority ) {\n\t\t\tattributeElement._priority = options.priority;\n\t\t}\n\n\t\tif ( options.id ) {\n\t\t\tattributeElement._id = options.id;\n\t\t}\n\n\t\treturn attributeElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/containerelement~ContainerElement}.\n\t *\n\t *\t\twriter.createContainerElement( 'p' );\n\t *\n\t *\t\t// Create element with custom attributes.\n\t *\t\twriter.createContainerElement( 'div', { id: 'foo-bar', 'data-baz': '123' } );\n\t *\n\t *\t\t// Create element with custom styles.\n\t *\t\twriter.createContainerElement( 'p', { style: 'font-weight: bold; padding-bottom: 10px' } );\n\t *\n\t *\t\t// Create element with custom classes.\n\t *\t\twriter.createContainerElement( 'p', { class: 'foo bar baz' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n\t */\n\tcreateContainerElement( name, attributes ) {\n\t\treturn new ContainerElement( this.document, name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t *\t\twriter.createEditableElement( 'div' );\n\t *\t\twriter.createEditableElement( 'div', { id: 'foo-1234' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\n\t */\n\tcreateEditableElement( name, attributes ) {\n\t\tconst editableElement = new EditableElement( this.document, name, attributes );\n\t\teditableElement._document = this.document;\n\n\t\treturn editableElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\n\t *\n\t *\t\twriter.createEmptyElement( 'img' );\n\t *\t\twriter.createEmptyElement( 'img', { id: 'foo-1234' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n\t */\n\tcreateEmptyElement( name, attributes ) {\n\t\treturn new EmptyElement( this.document, name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/uielement~UIElement}.\n\t *\n\t *\t\twriter.createUIElement( 'span' );\n\t *\t\twriter.createUIElement( 'span', { id: 'foo-1234' } );\n\t *\n\t * Custom render function can be provided as third parameter:\n\t *\n\t *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t} );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Function} [renderFunction] Custom render function.\n\t * @returns {module:engine/view/uielement~UIElement} Created element.\n\t */\n\tcreateUIElement( name, attributes, renderFunction ) {\n\t\tconst uiElement = new UIElement( this.document, name, attributes );\n\n\t\tif ( renderFunction ) {\n\t\t\tuiElement.render = renderFunction;\n\t\t}\n\n\t\treturn uiElement;\n\t}\n\n\t/**\n\t * Adds or overwrite element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( 'href', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( 'foo', linkElement );\n\t *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( 'foo', linkElement );\n\t *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( 'color', 'red', element );\n\t *\t\twriter.setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t}, element );\n\t *\n\t * **Note**: The passed style can be normalized if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#set `StylesMap#set()`} for details.\n\t *\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element to set styles on.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( 'color', element ); // Removes 'color' style.\n\t *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n\t *\n\t * @param {Array.<String>|String} property\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\n\t * up to a container element.\n\t *\n\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\n\t *\n\t *\t\t<p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n\t *\t\t<p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n\t *\t\t<p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t *\t\t<p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n\t *\n\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start start}\n\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\n\t * to break attribute elements.\n\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\n\t * elements.\n\t */\n\tbreakAttributes( positionOrRange ) {\n\t\tif ( positionOrRange instanceof Position ) {\n\t\t\treturn this._breakAttributes( positionOrRange );\n\t\t} else {\n\t\t\treturn this._breakAttributesRange( positionOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\n\t * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\n\t * or at the end of it's parent element.\n\t *\n\t *\t\t<p>foo^bar</p> -> <p>foo</p><p>bar</p>\n\t *\t\t<div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n\t *\t\t<p>^foobar</p> -> ^<p>foobar</p>\n\t *\t\t<p>foobar^</p> -> <p>foobar</p>^\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n\t * @param {module:engine/view/position~Position} position Position where to break element.\n\t * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\n\t * the returned position is placed either before it or after it.\n\t */\n\tbreakContainer( position ) {\n\t\tconst element = position.parent;\n\n\t\tif ( !( element.is( 'containerElement' ) ) ) {\n\t\t\t/**\n\t\t\t * Trying to break an element which is not a container element.\n\t\t\t *\n\t\t\t * @error view-writer-break-non-container-element\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-break-non-container-element: Trying to break an element which is not a container element.',\n\t\t\t\tthis.document\n\t\t\t);\n\t\t}\n\n\t\tif ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Trying to break root element.\n\t\t\t *\n\t\t\t * @error view-writer-break-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-root: Trying to break root element.', this.document );\n\t\t}\n\n\t\tif ( position.isAtStart ) {\n\t\t\treturn Position._createBefore( element );\n\t\t} else if ( !position.isAtEnd ) {\n\t\t\tconst newElement = element._clone( false );\n\n\t\t\tthis.insert( Position._createAfter( element ), newElement );\n\n\t\t\tconst sourceRange = new Range( position, Position._createAt( element, 'end' ) );\n\t\t\tconst targetPosition = new Position( newElement, 0 );\n\n\t\t\tthis.move( sourceRange, targetPosition );\n\t\t}\n\n\t\treturn Position._createAfter( element );\n\t}\n\n\t/**\n\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n\t *\n\t * In following examples `<p>` is a container and `<b>` is an attribute element:\n\t *\n\t *\t\t<p>foo[]bar</p> -> <p>foo{}bar</p>\n\t *\t\t<p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\t\t<p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n\t *\n\t * It will also take care about empty attributes when merging:\n\t *\n\t *\t\t<p><b>[]</b></p> -> <p>[]</p>\n\t *\t\t<p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeAttributes( position ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// When inside text node - nothing to merge.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When inside empty attribute - remove it.\n\t\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\n\t\t\tconst parent = positionParent.parent;\n\t\t\tconst offset = positionParent.index;\n\n\t\t\tpositionParent._remove();\n\t\t\tthis._removeFromClonedElementsGroup( positionParent );\n\n\t\t\treturn this.mergeAttributes( new Position( parent, offset ) );\n\t\t}\n\n\t\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\n\t\tconst nodeAfter = positionParent.getChild( positionOffset );\n\n\t\t// Position should be placed between two nodes.\n\t\tif ( !nodeBefore || !nodeAfter ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When position is between two text nodes.\n\t\tif ( nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\t\t// When position is between two same attribute elements.\n\t\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\n\t\t\t// Move all children nodes from node placed after selection and remove that node.\n\t\t\tconst count = nodeBefore.childCount;\n\t\t\tnodeBefore._appendChild( nodeAfter.getChildren() );\n\n\t\t\tnodeAfter._remove();\n\t\t\tthis._removeFromClonedElementsGroup( nodeAfter );\n\n\t\t\t// New position is located inside the first node, before new nodes.\n\t\t\t// Call this method recursively to merge again if needed.\n\t\t\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n\t *\n\t *\t\t<p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n\t *\t\t<div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeContainers( position ) {\n\t\tconst prev = position.nodeBefore;\n\t\tconst next = position.nodeAfter;\n\n\t\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\n\t\t\t/**\n\t\t\t * Element before and after given position cannot be merged.\n\t\t\t *\n\t\t\t * @error view-writer-merge-containers-invalid-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position: ' +\n\t\t\t\t'Element before and after given position cannot be merged.', this.document );\n\t\t}\n\n\t\tconst lastChild = prev.getChild( prev.childCount - 1 );\n\t\tconst newPosition = lastChild instanceof Text ? Position._createAt( lastChild, 'end' ) : Position._createAt( prev, 'end' );\n\n\t\tthis.move( Range._createIn( next ), Position._createAt( prev, 'end' ) );\n\t\tthis.remove( Range._createOn( next ) );\n\n\t\treturn newPosition;\n\t}\n\n\t/**\n\t * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\n\t * and merging them afterwards.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n\t * contains instances that are not {@link module:engine/view/text~Text Texts},\n\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\n\t * {@link module:engine/view/uielement~UIElement UIElements}.\n\t *\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\tinsert( position, nodes ) {\n\t\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\n\n\t\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\t\tvalidateNodesToInsert( nodes, this.document );\n\n\t\tconst container = getParentContainer( position );\n\n\t\tif ( !container ) {\n\t\t\t/**\n\t\t\t * Position's parent container cannot be found.\n\t\t\t *\n\t\t\t * @error view-writer-invalid-position-container\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-invalid-position-container', this.document );\n\t\t}\n\n\t\tconst insertionPosition = this._breakAttributes( position, true );\n\t\tconst length = container._insertChild( insertionPosition.offset, nodes );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tthis._addToClonedElementsGroup( node );\n\t\t}\n\n\t\tconst endPosition = insertionPosition.getShiftedBy( length );\n\t\tconst start = this.mergeAttributes( insertionPosition );\n\n\t\t// When no nodes were inserted - return collapsed range.\n\t\tif ( length === 0 ) {\n\t\t\treturn new Range( start, start );\n\t\t} else {\n\t\t\t// If start position was merged - move end position.\n\t\t\tif ( !start.isEqual( insertionPosition ) ) {\n\t\t\t\tendPosition.offset--;\n\t\t\t}\n\n\t\t\tconst end = this.mergeAttributes( endPosition );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\t}\n\n\t/**\n\t * Removes provided range from the container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range|module:engine/view/item~Item} rangeOrItem Range to remove from container\n\t * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n\t * to a collapsed range showing the new position.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n\t */\n\tremove( rangeOrItem ) {\n\t\tconst range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn( rangeOrItem );\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to remove.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn new DocumentFragment( this.document );\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\tconst count = breakEnd.offset - breakStart.offset;\n\n\t\t// Remove nodes in range.\n\t\tconst removed = parentContainer._removeChildren( breakStart.offset, count );\n\n\t\tfor ( const node of removed ) {\n\t\t\tthis._removeFromClonedElementsGroup( node );\n\t\t}\n\n\t\t// Merge after removing.\n\t\tconst mergePosition = this.mergeAttributes( breakStart );\n\t\trange.start = mergePosition;\n\t\trange.end = mergePosition.clone();\n\n\t\t// Return removed nodes.\n\t\treturn new DocumentFragment( this.document, removed );\n\t}\n\n\t/**\n\t * Removes matching elements from given range.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clear.\n\t * @param {module:engine/view/element~Element} element Element to remove.\n\t */\n\tclear( range, element ) {\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Create walker on given range.\n\t\t// We walk backward because when we remove element during walk it modifies range end position.\n\t\tconst walker = range.getWalker( {\n\t\t\tdirection: 'backward',\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\t// Let's walk.\n\t\tfor ( const current of walker ) {\n\t\t\tconst item = current.item;\n\t\t\tlet rangeToRemove;\n\n\t\t\t// When current item matches to the given element.\n\t\t\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\n\t\t\t\t// Create range on this element.\n\t\t\t\trangeToRemove = Range._createOn( item );\n\t\t\t\t// When range starts inside Text or TextProxy element.\n\t\t\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( 'textProxy' ) ) {\n\t\t\t\t// We need to check if parent of this text matches to given element.\n\t\t\t\tconst parentElement = item.getAncestors().find( ancestor => {\n\t\t\t\t\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\n\t\t\t\t} );\n\n\t\t\t\t// If it is then create range inside this element.\n\t\t\t\tif ( parentElement ) {\n\t\t\t\t\trangeToRemove = Range._createIn( parentElement );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we have found element to remove.\n\t\t\tif ( rangeToRemove ) {\n\t\t\t\t// We need to check if element range stick out of the given range and truncate if it is.\n\t\t\t\tif ( rangeToRemove.end.isAfter( range.end ) ) {\n\t\t\t\t\trangeToRemove.end = range.end;\n\t\t\t\t}\n\n\t\t\t\tif ( rangeToRemove.start.isBefore( range.start ) ) {\n\t\t\t\t\trangeToRemove.start = range.start;\n\t\t\t\t}\n\n\t\t\t\t// At the end we remove range with found element.\n\t\t\t\tthis.remove( rangeToRemove );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves nodes from provided range to target position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\n\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n\t */\n\tmove( sourceRange, targetPosition ) {\n\t\tlet nodes;\n\n\t\tif ( targetPosition.isAfter( sourceRange.end ) ) {\n\t\t\ttargetPosition = this._breakAttributes( targetPosition, true );\n\n\t\t\tconst parent = targetPosition.parent;\n\t\t\tconst countBefore = parent.childCount;\n\n\t\t\tsourceRange = this._breakAttributesRange( sourceRange, true );\n\n\t\t\tnodes = this.remove( sourceRange );\n\n\t\t\ttargetPosition.offset += ( parent.childCount - countBefore );\n\t\t} else {\n\t\t\tnodes = this.remove( sourceRange );\n\t\t}\n\n\t\treturn this.insert( targetPosition, nodes );\n\t}\n\n\t/**\n\t * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n\t *\n\t * If a collapsed range was passed and is same as selection, the selection\n\t * will be moved to the inside of the wrapped attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start}\n\t * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n\t * is collapsed and different than view selection.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to wrap.\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n\t * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n\t*/\n\twrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\tthrow new CKEditorError( 'view-writer-wrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\tif ( !range.isCollapsed ) {\n\t\t\t// Non-collapsed range. Wrap it with the attribute element.\n\t\t\treturn this._wrapRange( range, attribute );\n\t\t} else {\n\t\t\t// Collapsed range. Wrap position.\n\t\t\tlet position = range.start;\n\n\t\t\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\n\t\t\t\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n\t\t\t}\n\n\t\t\tposition = this._wrapPosition( position, attribute );\n\t\t\tconst viewSelection = this.document.selection;\n\n\t\t\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\t\t\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\n\t\t\t\tthis.setSelection( position );\n\t\t\t}\n\n\t\t\treturn new Range( position );\n\t\t}\n\t}\n\n\t/**\n\t * Unwraps nodes within provided range from attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t */\n\tunwrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\t/**\n\t\t\t * Attribute element need to be instance of attribute element.\n\t\t\t *\n\t\t\t * @error view-writer-unwrap-invalid-attribute\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-unwrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to unwrap.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn range;\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n\t *\n\t * New element has to be created because `Element#tagName` property in DOM is readonly.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New name for element.\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n\t */\n\trename( newName, viewElement ) {\n\t\tconst newElement = new ContainerElement( this.document, newName, viewElement.getAttributes() );\n\n\t\tthis.insert( Position._createAfter( viewElement ), newElement );\n\t\tthis.move( Range._createIn( viewElement ), Position._createAt( newElement, 0 ) );\n\t\tthis.remove( Range._createOn( viewElement ) );\n\n\t\treturn newElement;\n\t}\n\n\t/**\n\t * Cleans up memory by removing obsolete cloned elements group from the writer.\n\t *\n\t * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n\t * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n\t * the group will no longer be needed.\n\t *\n\t * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n\t * were removed from the view.\n\t *\n\t * Keep in mind that group names are equal to the `id` property of the attribute element.\n\t *\n\t * @param {String} groupName Name of the group to clear.\n\t */\n\tclearClonedElementsGroup( groupName ) {\n\t\tthis._cloneGroups.delete( groupName );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates its own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'p' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be wrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} wrapElement\n\t */\n\t_wrapChildren( parent, startOffset, endOffset, wrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst wrapPositions = [];\n\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\t\t\tconst isText = child.is( 'text' );\n\t\t\tconst isAttribute = child.is( 'attributeElement' );\n\t\t\tconst isEmpty = child.is( 'emptyElement' );\n\t\t\tconst isUI = child.is( 'uiElement' );\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n\t\t\t// If possible, join elements.\n\t\t\t//\n\t\t\t// <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n\t\t\t//\n\t\t\tif ( isAttribute && this._wrapAttributeElement( wrapElement, child ) ) {\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n\t\t\t// `wrapElement` (due to priority).\n\t\t\t//\n\t\t\t// <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n\t\t\t// <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n\t\t\t//\n\t\t\telse if ( isText || isEmpty || isUI || ( isAttribute && shouldABeOutsideB( wrapElement, child ) ) ) {\n\t\t\t\t// Clone attribute.\n\t\t\t\tconst newAttribute = wrapElement._clone();\n\n\t\t\t\t// Wrap current node with new attribute.\n\t\t\t\tchild._remove();\n\t\t\t\tnewAttribute._appendChild( child );\n\n\t\t\t\tparent._insertChild( i, newAttribute );\n\t\t\t\tthis._addToClonedElementsGroup( newAttribute );\n\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n\t\t\t//\n\t\t\t// <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n\t\t\t//\n\t\t\telse if ( isAttribute ) {\n\t\t\t\tthis._wrapChildren( child, 0, child.childCount, wrapElement );\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each wrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of wrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} unwrapElement\n\t */\n\t_unwrapChildren( parent, startOffset, endOffset, unwrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst unwrapPositions = [];\n\n\t\t// Iterate over each element between provided offsets inside parent.\n\t\t// We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n\t\t// so it could get messy. It is safer to it manually in this case.\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\n\t\t\t// Skip all text nodes. There should be no container element's here either.\n\t\t\tif ( !child.is( 'attributeElement' ) ) {\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n\t\t\t//\n\t\t\t// <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n\t\t\t//\n\t\t\tif ( child.isSimilar( unwrapElement ) ) {\n\t\t\t\tconst unwrapped = child.getChildren();\n\t\t\t\tconst count = child.childCount;\n\n\t\t\t\t// Replace wrapper element with its children\n\t\t\t\tchild._remove();\n\t\t\t\tparent._insertChild( i, unwrapped );\n\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\n\t\t\t\t// Save start and end position of moved items.\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + count )\n\t\t\t\t);\n\n\t\t\t\t// Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n\t\t\t\ti += count;\n\t\t\t\tendOffset += count - 1;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n\t\t\t// Partial unwrapping will happen only if the elements have the same name.\n\t\t\t//\n\t\t\t// <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n\t\t\t// <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n\t\t\t//\n\t\t\tif ( this._unwrapAttributeElement( unwrapElement, child ) ) {\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + 1 )\n\t\t\t\t);\n\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If other nested attribute is found, look through it's children for elements to unwrap.\n\t\t\t//\n\t\t\t// <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n\t\t\t//\n\t\t\tthis._unwrapChildren( child, 0, child.childCount, unwrapElement );\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each unwrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of unwrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset || position.offset == endOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n\t */\n\t_wrapRange( range, attribute ) {\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Wrap all children with attribute.\n\t\tconst newRange = this._wrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/position~Position} New position after wrapping.\n\t */\n\t_wrapPosition( position, attribute ) {\n\t\t// Return same position when trying to wrap with attribute similar to position parent.\n\t\tif ( attribute.isSimilar( position.parent ) ) {\n\t\t\treturn movePositionToTextNode( position.clone() );\n\t\t}\n\n\t\t// When position is inside text node - break it and place new position between two text nodes.\n\t\tif ( position.parent.is( 'text' ) ) {\n\t\t\tposition = breakTextNode( position );\n\t\t}\n\n\t\t// Create fake element that will represent position, and will not be merged with other attributes.\n\t\tconst fakePosition = this.createAttributeElement();\n\t\tfakePosition._priority = Number.POSITIVE_INFINITY;\n\t\tfakePosition.isSimilar = () => false;\n\n\t\t// Insert fake element in position location.\n\t\tposition.parent._insertChild( position.offset, fakePosition );\n\n\t\t// Range around inserted fake attribute element.\n\t\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\n\n\t\t// Wrap fake element with attribute (it will also merge if possible).\n\t\tthis.wrap( wrapRange, attribute );\n\n\t\t// Remove fake element and place new position there.\n\t\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\n\t\tfakePosition._remove();\n\n\t\t// If position is placed between text nodes - merge them and return position inside.\n\t\tconst nodeBefore = newPosition.nodeBefore;\n\t\tconst nodeAfter = newPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\n\t\t// If position is next to text node - move position inside.\n\t\treturn movePositionToTextNode( newPosition );\n\t}\n\n\t/**\n\t * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n\t * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n\t * \telement to element being wrapped.\n\t *\n\t * \t@private\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n\t * \t@returns {Boolean} Returns `true` if elements are merged.\n\t */\n\t_wrapAttributeElement( wrapper, toWrap ) {\n\t\tif ( !canBeJoined( wrapper, toWrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't merge if name or priority differs.\n\t\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes can be merged.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are different we cannot wrap.\n\t\t\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles can be merged.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move only these attributes that are not present - other are similar.\n\t\t\tif ( !toWrap.hasAttribute( key ) ) {\n\t\t\t\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( !toWrap.hasStyle( key ) ) {\n\t\t\t\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getClassNames() ) {\n\t\t\tif ( !toWrap.hasClass( key ) ) {\n\t\t\t\tthis.addClass( key, toWrap );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n\t * inside element being unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n\t * @returns {Boolean} Returns `true` if elements are unwrapped.\n\t **/\n\t_unwrapAttributeElement( wrapper, toUnwrap ) {\n\t\tif ( !canBeJoined( wrapper, toUnwrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't unwrap if name or priority differs.\n\t\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper attributes.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper classes.\n\t\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper styles.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\t// If some styles are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Remove all wrapper's attributes from unwrapped element.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeAttribute( key, toUnwrap );\n\t\t}\n\n\t\t// Remove all wrapper's classes from unwrapped element.\n\t\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\n\n\t\t// Remove all wrapper's styles from unwrapped element.\n\t\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/range~Range} New range with located at break positions.\n\t */\n\t_breakAttributesRange( range, forceSplitText = false ) {\n\t\tconst rangeStart = range.start;\n\t\tconst rangeEnd = range.end;\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Break at the collapsed position. Return new collapsed range.\n\t\tif ( range.isCollapsed ) {\n\t\t\tconst position = this._breakAttributes( range.start, forceSplitText );\n\n\t\t\treturn new Range( position, position );\n\t\t}\n\n\t\tconst breakEnd = this._breakAttributes( rangeEnd, forceSplitText );\n\t\tconst count = breakEnd.parent.childCount;\n\t\tconst breakStart = this._breakAttributes( rangeStart, forceSplitText );\n\n\t\t// Calculate new break end offset.\n\t\tbreakEnd.offset += breakEnd.parent.childCount - count;\n\n\t\treturn new Range( breakStart, breakEnd );\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n\t * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n\t * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position Position where to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/position~Position} New position after breaking the attributes.\n\t */\n\t_breakAttributes( position, forceSplitText = false ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'emptyElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside EmptyElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-empty-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element', this.document );\n\t\t}\n\n\t\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'uiElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside UIElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-ui-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element', this.document );\n\t\t}\n\n\t\t// There are no attributes to break and text nodes breaking is not forced.\n\t\tif ( !forceSplitText && positionParent.is( 'text' ) && isContainerOrFragment( positionParent.parent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Position's parent is container, so no attributes to break.\n\t\tif ( isContainerOrFragment( positionParent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Break text and start again in new position.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn this._breakAttributes( breakTextNode( position ), forceSplitText );\n\t\t}\n\n\t\tconst length = positionParent.childCount;\n\n\t\t// <p>foo<b><u>bar{}</u></b></p>\n\t\t// <p>foo<b><u>bar</u>[]</b></p>\n\t\t// <p>foo<b><u>bar</u></b>[]</p>\n\t\tif ( positionOffset == length ) {\n\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t} else {\n\t\t\t// <p>foo<b><u>{}bar</u></b></p>\n\t\t\t// <p>foo<b>[]<u>bar</u></b></p>\n\t\t\t// <p>foo{}<b><u>bar</u></b></p>\n\t\t\tif ( positionOffset === 0 ) {\n\t\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t\t// <p>foo<b><u>b{}ar</u></b></p>\n\t\t\t// <p>foo<b><u>b[]ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t\t\telse {\n\t\t\t\tconst offsetAfter = positionParent.index + 1;\n\n\t\t\t\t// Break element.\n\t\t\t\tconst clonedNode = positionParent._clone();\n\n\t\t\t\t// Insert cloned node to position's parent node.\n\t\t\t\tpositionParent.parent._insertChild( offsetAfter, clonedNode );\n\t\t\t\tthis._addToClonedElementsGroup( clonedNode );\n\n\t\t\t\t// Get nodes to move.\n\t\t\t\tconst count = positionParent.childCount - positionOffset;\n\t\t\t\tconst nodesToMove = positionParent._removeChildren( positionOffset, count );\n\n\t\t\t\t// Move nodes to cloned node.\n\t\t\t\tclonedNode._appendChild( nodesToMove );\n\n\t\t\t\t// Create new position to work on.\n\t\t\t\tconst newPosition = new Position( positionParent.parent, offsetAfter );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n\t * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n\t * from the group now keep a reference to the given attribute element.\n\t *\n\t * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n\t *\n\t * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to save.\n\t */\n\t_addToClonedElementsGroup( element ) {\n\t\t// Add only if the element is in document tree.\n\t\tif ( !element.root.is( 'rootElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Traverse the element's children recursively to find other attribute elements that also might got inserted.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._addToClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\tgroup = new Set();\n\t\t\tthis._cloneGroups.set( id, group );\n\t\t}\n\n\t\tgroup.add( element );\n\t\telement._clonesGroup = group;\n\t}\n\n\t/**\n\t * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n\t * from its clones group.\n\t *\n\t * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n\t * This allows to reference the whole group even if the element was already removed from the tree.\n\t *\n\t * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to remove.\n\t */\n\t_removeFromClonedElementsGroup( element ) {\n\t\t// Traverse the element's children recursively to find other attribute elements that also got removed.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.delete( element );\n\t\t// Not removing group from element on purpose!\n\t\t// If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n\t}\n}\n\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren( parent ) {\n\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\n}\n\n/**\n * Attribute element need to be instance of attribute element.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\nfunction getParentContainer( position ) {\n\tlet parent = position.parent;\n\n\twhile ( !isContainerOrFragment( parent ) ) {\n\t\tif ( !parent ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped otuside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\nfunction shouldABeOutsideB( a, b ) {\n\tif ( a.priority < b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority > b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use identities.\n\treturn a.getIdentity() < b.getIdentity();\n}\n\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\nfunction movePositionToTextNode( position ) {\n\tconst nodeBefore = position.nodeBefore;\n\n\tif ( nodeBefore && nodeBefore.is( 'text' ) ) {\n\t\treturn new Position( nodeBefore, nodeBefore.data.length );\n\t}\n\n\tconst nodeAfter = position.nodeAfter;\n\n\tif ( nodeAfter && nodeAfter.is( 'text' ) ) {\n\t\treturn new Position( nodeAfter, 0 );\n\t}\n\n\treturn position;\n}\n\n// Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\nfunction breakTextNode( position ) {\n\tif ( position.offset == position.parent.data.length ) {\n\t\treturn new Position( position.parent.parent, position.parent.index + 1 );\n\t}\n\n\tif ( position.offset === 0 ) {\n\t\treturn new Position( position.parent.parent, position.parent.index );\n\t}\n\n\t// Get part of the text that need to be moved.\n\tconst textToMove = position.parent.data.slice( position.offset );\n\n\t// Leave rest of the text in position's parent.\n\tposition.parent._data = position.parent.data.slice( 0, position.offset );\n\n\t// Insert new text node after position's parent text node.\n\tposition.parent.parent._insertChild( position.parent.index + 1, new Text( position.root.document, textToMove ) );\n\n\t// Return new position between two newly created text nodes.\n\treturn new Position( position.parent.parent, position.parent.index + 1 );\n}\n\n// Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\nfunction mergeTextNodes( t1, t2 ) {\n\t// Merge text data into first text node and remove second one.\n\tconst nodeBeforeLength = t1.data.length;\n\tt1._data += t2.data;\n\tt2._remove();\n\n\treturn new Position( t1, nodeBeforeLength );\n}\n\n// Checks if provided nodes are valid to insert. Checks if each node is an instance of\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\n// {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not {@link module:engine/view/text~Text Texts},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n// {@link module:engine/view/uielement~UIElement UIElements},\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\n// |module:engine/view/containerelement~ContainerElement> nodes\n// @param {Object} errorContext\nfunction validateNodesToInsert( nodes, errorContext ) {\n\tfor ( const node of nodes ) {\n\t\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\n\t\t\t/**\n\t\t\t * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n\t\t\t * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n\t\t\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n\t\t\t * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\n\t\t\t *\n\t\t\t * @error view-writer-insert-invalid-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-insert-invalid-node', errorContext );\n\t\t}\n\n\t\tif ( !node.is( 'text' ) ) {\n\t\t\tvalidateNodesToInsert( node.getChildren(), errorContext );\n\t\t}\n\t}\n}\n\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, UIElement ];\n\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\nfunction isContainerOrFragment( node ) {\n\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\n}\n\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\n// @param {Object} errorContext\nfunction validateRangeContainer( range, errorContext ) {\n\tconst startContainer = getParentContainer( range.start );\n\tconst endContainer = getParentContainer( range.end );\n\n\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\n\t\t/**\n\t\t * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\n\t\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\n\t\t * parent container for these positions cannot be found.\n\t\t *\n\t\t * @error view-writer-invalid-range-container\n\t\t */\n\n\t\tthrow new CKEditorError( 'view-writer-invalid-range-container', errorContext );\n\t}\n}\n\n// Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n// they do not have ids specified.\n//\n// @private\n// @param {module:engine/view/element~Element} a\n// @param {module:engine/view/element~Element} b\n// @returns {Boolean}\nfunction canBeJoined( a, b ) {\n\treturn a.id === null && b.id === null;\n}\n"]}]}