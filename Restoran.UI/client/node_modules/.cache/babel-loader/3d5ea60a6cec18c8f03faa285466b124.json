{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-utils\\src\\dom\\resizeobserver.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-utils\\src\\dom\\resizeobserver.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-utils/src/dom/resizeobserver.js"],"names":["mix","global","Rect","DomEmitterMixin","RESIZE_CHECK_INTERVAL","ResizeObserver","element","callback","_observerInstance","_createObserver","_element","_callback","_addElementCallback","observe","_deleteElementCallback","_elementCallbacks","Map","callbacks","get","Set","set","add","_getElementCallbacks","delete","size","unobserve","ObserverConstructor","window","ResizeObserverPolyfill","entries","entry","target","_elements","_previousRects","_periodicCheckTimeout","_checkElementRectsAndExecuteCallback","_startPeriodicCheck","_stopPeriodicCheck","periodicCheck","setTimeout","listenTo","clearTimeout","stopListening","clear","_hasRectChanged","push","contentRect","length","ownerDocument","body","contains","currentRect","previousRect","hasChanged","isEqual"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/resizeobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport mix from '../mix';\nimport global from './global';\nimport Rect from './rect';\nimport DomEmitterMixin from './emittermixin';\n\nconst RESIZE_CHECK_INTERVAL = 100;\n\n/**\n * A helper class which instances allow performing custom actions when native DOM elements are resized.\n *\n *\t\tconst editableElement = editor.editing.view.getDomRoot();\n *\n *\t\tconst observer = new ResizeObserver( editableElement, entry => {\n *\t\t\tconsole.log( 'The editable element has been resized in DOM.' );\n *\t\t\tconsole.log( entry.target ); // -> editableElement\n *\t\t\tconsole.log( entry.contentRect.width ); // -> e.g. '423px'\n *\t\t} );\n *\n * By default, it uses the [native DOM resize observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n * under the hood and in browsers that do not support the native API yet, a polyfilled observer is\n * used instead.\n */\nexport default class ResizeObserver {\n\t/**\n\t * Creates an instance of the `ResizeObserver` class.\n\t *\n\t * @param {HTMLElement} element A DOM element that is to be observed for resizing. Note that\n\t * the element must be visible (i.e. not detached from DOM) for the observer to work.\n\t * @param {Function} callback A function called when the observed element was resized. It passes\n\t * the [`ResizeObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)\n\t * object with information about the resize event.\n\t */\n\tconstructor( element, callback ) {\n\t\t// **Note**: For the maximum performance, this class ensures only a single instance of the native\n\t\t// (or polyfilled) observer is used no matter how many instances of this class were created.\n\t\tif ( !ResizeObserver._observerInstance ) {\n\t\t\tResizeObserver._createObserver();\n\t\t}\n\n\t\t/**\n\t\t * The element observer by this observer.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis._element = element;\n\n\t\t/**\n\t\t * The callback executed each time {@link #_element} is resized.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Function}\n\t\t */\n\t\tthis._callback = callback;\n\n\t\tResizeObserver._addElementCallback( element, callback );\n\t\tResizeObserver._observerInstance.observe( element );\n\t}\n\n\t/**\n\t * Destroys the observer which disables the `callback` passed to the {@link #constructor}.\n\t */\n\tdestroy() {\n\t\tResizeObserver._deleteElementCallback( this._element, this._callback );\n\t}\n\n\t/**\n\t * Registers a new resize callback for the DOM element.\n\t *\n\t * @private\n\t * @static\n\t * @param {HTMLElement} element\n\t * @param {Function} callback\n\t */\n\tstatic _addElementCallback( element, callback ) {\n\t\tif ( !ResizeObserver._elementCallbacks ) {\n\t\t\tResizeObserver._elementCallbacks = new Map();\n\t\t}\n\n\t\tlet callbacks = ResizeObserver._elementCallbacks.get( element );\n\n\t\tif ( !callbacks ) {\n\t\t\tcallbacks = new Set();\n\t\t\tResizeObserver._elementCallbacks.set( element, callbacks );\n\t\t}\n\n\t\tcallbacks.add( callback );\n\t}\n\n\t/**\n\t * Removes a resize callback from the DOM element. If no callbacks are left\n\t * for the element, it removes the element from the native observer.\n\t *\n\t * @private\n\t * @static\n\t * @param {HTMLElement} element\n\t * @param {Function} callback\n\t */\n\tstatic _deleteElementCallback( element, callback ) {\n\t\tconst callbacks = ResizeObserver._getElementCallbacks( element );\n\n\t\t// Remove the element callback. Check if exist first in case someone\n\t\t// called destroy() twice.\n\t\tif ( callbacks ) {\n\t\t\tcallbacks.delete( callback );\n\n\t\t\t// If no callbacks left for the element, also remove the element.\n\t\t\tif ( !callbacks.size ) {\n\t\t\t\tResizeObserver._elementCallbacks.delete( element );\n\t\t\t\tResizeObserver._observerInstance.unobserve( element );\n\t\t\t}\n\t\t}\n\n\t\tif ( ResizeObserver._elementCallbacks && !ResizeObserver._elementCallbacks.size ) {\n\t\t\tResizeObserver._observerInstance = null;\n\t\t\tResizeObserver._elementCallbacks = null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns are registered resize callbacks for the DOM element.\n\t *\n\t * @private\n\t * @static\n\t * @param {HTMLElement} element\n\t * @returns {Set.<HTMLElement>|null}\n\t */\n\tstatic _getElementCallbacks( element ) {\n\t\tif ( !ResizeObserver._elementCallbacks ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn ResizeObserver._elementCallbacks.get( element );\n\t}\n\n\t/**\n\t * Creates the single native observer shared across all `ResizeObserver` instances.\n\t * If the browser does not support the native API, it creates a polyfill.\n\t *\n\t * @private\n\t * @static\n\t */\n\tstatic _createObserver() {\n\t\tlet ObserverConstructor;\n\n\t\t// TODO: One day, the `ResizeObserver` API will be supported in all modern web browsers.\n\t\t// When it happens, this module will no longer make sense and should be removed and\n\t\t// the native implementation should be used across the project to save bytes.\n\t\t// Check out https://caniuse.com/#feat=resizeobserver.\n\t\tif ( typeof global.window.ResizeObserver === 'function' ) {\n\t\t\tObserverConstructor = global.window.ResizeObserver;\n\t\t} else {\n\t\t\tObserverConstructor = ResizeObserverPolyfill;\n\t\t}\n\n\t\tResizeObserver._observerInstance = new ObserverConstructor( entries => {\n\t\t\tfor ( const entry of entries ) {\n\t\t\t\tconst callbacks = ResizeObserver._getElementCallbacks( entry.target );\n\n\t\t\t\tif ( callbacks ) {\n\t\t\t\t\tfor ( const callback of callbacks ) {\n\t\t\t\t\t\tcallback( entry );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * The single native observer instance (or polyfill in browsers that do not support the API)\n * shared across all {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @protected\n * @readonly\n * @property {Object|null} module:utils/dom/resizeobserver~ResizeObserver#_observerInstance\n */\nResizeObserver._observerInstance = null;\n\n/**\n * A mapping of native DOM elements and their callbacks shared across all\n * {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @private\n * @readonly\n * @property {Map.<HTMLElement,Set>|null} module:utils/dom/resizeobserver~ResizeObserver#_elementCallbacks\n */\nResizeObserver._elementCallbacks = null;\n\n/**\n * A polyfill class for the native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n *\n * @private\n * @mixes module:utils/domemittermixin~DomEmitterMixin\n */\nclass ResizeObserverPolyfill {\n\t/**\n\t * Creates an instance of the {@link module:utils/dom/resizeobserver~ResizeObserverPolyfill} class.\n\t *\n\t * It synchronously reacts to resize of the window to check if observed elements' geometry changed.\n\t *\n\t * Additionally, the polyfilled observer uses a timeout to check if observed elements' geometry has changed\n\t * in some other way (dynamic layouts, scrollbars showing up, etc.), so its response can also be asynchronous.\n\t *\n\t * @param {Function} callback A function called when any observed element was resized. Refer to the\n\t * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n\t * learn more.\n\t */\n\tconstructor( callback ) {\n\t\t/**\n\t\t * A function called when any observed {@link #_elements element} was resized.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Function}\n\t\t */\n\t\tthis._callback = callback;\n\n\t\t/**\n\t\t * DOM elements currently observed by the observer instance.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Cached DOM {@link #_elements elements} bounding rects to compare to upon the next check.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n\t\t */\n\t\tthis._previousRects = new Map();\n\n\t\t/**\n\t\t * An UID of the current timeout upon which the observed elements rects\n\t\t * will be compared to the {@link #_previousRects previous rects} from the past.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n\t\t */\n\t\tthis._periodicCheckTimeout = null;\n\t}\n\n\t/**\n\t * Starts observing a DOM element.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tobserve( element ) {\n\t\tthis._elements.add( element );\n\n\t\tthis._checkElementRectsAndExecuteCallback();\n\n\t\tif ( this._elements.size === 1 ) {\n\t\t\tthis._startPeriodicCheck();\n\t\t}\n\t}\n\n\t/**\n\t * Stops observing a DOM element.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/unobserve).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tunobserve( element ) {\n\t\tthis._elements.delete( element );\n\t\tthis._previousRects.delete( element );\n\n\t\tif ( !this._elements.size ) {\n\t\t\tthis._stopPeriodicCheck();\n\t\t}\n\t}\n\n\t/**\n\t * When called, the observer calls the {@link #_callback resize callback} for all observed\n\t * {@link #_elements elements} but also starts checking periodically for changes in the elements' geometry.\n\t * If some are detected, {@link #_callback resize callback} is called for relevant elements that were resized.\n\t *\n\t * @protected\n\t */\n\t_startPeriodicCheck() {\n\t\tconst periodicCheck = () => {\n\t\t\tthis._checkElementRectsAndExecuteCallback();\n\t\t\tthis._periodicCheckTimeout = setTimeout( periodicCheck, RESIZE_CHECK_INTERVAL );\n\t\t};\n\n\t\tthis.listenTo( global.window, 'resize', () => {\n\t\t\tthis._checkElementRectsAndExecuteCallback();\n\t\t} );\n\n\t\tthis._periodicCheckTimeout = setTimeout( periodicCheck, RESIZE_CHECK_INTERVAL );\n\t}\n\n\t/**\n\t * Stops checking for changes in all observed {@link #_elements elements} geometry.\n\t *\n\t * @protected\n\t */\n\t_stopPeriodicCheck() {\n\t\tclearTimeout( this._periodicCheckTimeout );\n\t\tthis.stopListening();\n\t\tthis._previousRects.clear();\n\t}\n\n\t/**\n\t * Checks if the geometry of any of the {@link #_elements element} has changed. If so, executes\n\t * the {@link #_callback resize callback} with element geometry data.\n\t *\n\t * @protected\n\t */\n\t_checkElementRectsAndExecuteCallback() {\n\t\tconst entries = [];\n\n\t\tfor ( const element of this._elements ) {\n\t\t\tif ( this._hasRectChanged( element ) ) {\n\t\t\t\tentries.push( {\n\t\t\t\t\ttarget: element,\n\t\t\t\t\tcontentRect: this._previousRects.get( element )\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tif ( entries.length ) {\n\t\t\tthis._callback( entries );\n\t\t}\n\t}\n\n\t/**\n\t * Compares the DOM element geometry to the {@link #_previousRects cached geometry} from the past.\n\t * Returns `true` if geometry has changed or the element is checked for the first time.\n\t *\n\t * @protected\n\t * @param {HTMLElement} element\n\t * @returns {Boolean}\n\t */\n\t_hasRectChanged( element ) {\n\t\tif ( !element.ownerDocument.body.contains( element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst currentRect = new Rect( element );\n\t\tconst previousRect = this._previousRects.get( element );\n\n\t\t// The first check should always yield true despite no Previous rect to compare to.\n\t\t// The native ResizeObserver does that and... that makes sense. Sort of.\n\t\tconst hasChanged = !previousRect || !previousRect.isEqual( currentRect );\n\n\t\tthis._previousRects.set( element, currentRect );\n\n\t\treturn hasChanged;\n\t}\n}\n\nmix( ResizeObserverPolyfill, DomEmitterMixin );\n"]}]}