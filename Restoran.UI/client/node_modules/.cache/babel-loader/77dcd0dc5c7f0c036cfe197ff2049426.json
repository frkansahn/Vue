{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\schema.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\schema.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js"],"names":["combineWalkers","convertToMinimalFlatRanges","CKEditorError","ObservableMixin","mix","Range","Position","Element","Text","TreeWalker","Schema","_sourceDefinitions","_attributeProperties","decorate","on","evt","args","SchemaContext","priority","getDefinition","itemName","definition","Object","assign","_clearCache","push","_compiledDefinitions","_compile","item","is","name","getDefinitions","def","isBlock","isLimit","isObject","isInline","context","_checkContextMatch","attributeName","last","allowAttributes","includes","positionOrBaseElement","elementToMerge","nodeBefore","nodeAfter","checkMerge","getChildren","child","checkChild","callback","ctx","childDef","retValue","stop","return","properties","getAttributeProperties","selectionOrRangeOrPosition","element","parent","ranges","Array","from","getRanges","reduce","range","rangeCommonAncestor","getCommonAncestor","includeSelf","selection","attribute","isCollapsed","firstPosition","getFirstPosition","getAncestors","getAttributes","checkAttribute","value","_getValidRangesForRange","position","direction","backwardWalker","forwardWalker","limitElement","reverse","find","root","boundaries","_createIn","startPosition","data","type","walker","_createOn","nextPosition","node","nodes","writer","removeDisallowedAttributeFromNode","rangeInNode","positionsInRange","getPositions","compiledDefinitions","sourceRules","itemNames","keys","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","length","contextItem","getItem","allowIn","parentRule","start","end","getItems","shallow","isEqual","_createAfter","isArray","shift","_items","map","mapContextItem","Symbol","iterator","index","query","getNames","join","endsWith","startsWith","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","inheritTypesFrom","copyTypes","copyProperty","makeInheritAllWork","allowContentOfItemName","allowedChildren","getAllowedChildren","forEach","allowedItem","allowWhereItemName","inheritFrom","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","typeNames","filter","existingItems","itemToCheck","Set","sourceItemRule","propertyName","inheritAllFrom","getValues","obj","key","ctxItem","getAttributeKeys","getAttribute","backward","forward","done","step","next","getMinimalFlatRanges","schema","removeAttribute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAojDUA,c;;;wBAqCAC,0B;;AAzlDV;;;;;AAKA;;;AAIA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,eAAP,MAA4B,+CAA5B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA;;;;;;;;;;;;;;;;IAeqBC,M;;;AACpB;;;AAGA,oBAAc;AAAA;;AAAA;;AACb,SAAKC,kBAAL,GAA0B,EAA1B;AAEA;;;;;;;AAMA,SAAKC,oBAAL,GAA4B,EAA5B;AAEA,SAAKC,QAAL,CAAe,YAAf;AACA,SAAKA,QAAL,CAAe,gBAAf;AAEA,SAAKC,EAAL,CAAS,gBAAT,EAA2B,UAAEC,GAAF,EAAOC,IAAP,EAAiB;AAC3CA,MAAAA,IAAI,CAAE,CAAF,CAAJ,GAAY,IAAIC,aAAJ,CAAmBD,IAAI,CAAE,CAAF,CAAvB,CAAZ;AACA,KAFD,EAEG;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAFH;AAIA,SAAKJ,EAAL,CAAS,YAAT,EAAuB,UAAEC,GAAF,EAAOC,IAAP,EAAiB;AACvCA,MAAAA,IAAI,CAAE,CAAF,CAAJ,GAAY,IAAIC,aAAJ,CAAmBD,IAAI,CAAE,CAAF,CAAvB,CAAZ;AACAA,MAAAA,IAAI,CAAE,CAAF,CAAJ,GAAY,KAAI,CAACG,aAAL,CAAoBH,IAAI,CAAE,CAAF,CAAxB,CAAZ;AACA,KAHD,EAGG;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAHH;AAIA;AAED;;;;;;;;;;;;;;6BAUUE,Q,EAAUC,U,EAAa;AAChC,UAAK,KAAKV,kBAAL,CAAyBS,QAAzB,CAAL,EAA2C;AAC1C;;;;;;;;;;;;;;;;;;;AAmBA,cAAM,IAAIlB,aAAJ,CACL,4FADK,EAEL,IAFK,EAGL;AACCkB,UAAAA,QAAQ,EAARA;AADD,SAHK,CAAN;AAOA;;AAED,WAAKT,kBAAL,CAAyBS,QAAzB,IAAsC,CACrCE,MAAM,CAACC,MAAP,CAAe,EAAf,EAAmBF,UAAnB,CADqC,CAAtC;;AAIA,WAAKG,WAAL;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAwBQJ,Q,EAAUC,U,EAAa;AAC9B,UAAK,CAAC,KAAKV,kBAAL,CAAyBS,QAAzB,CAAN,EAA4C;AAC3C;;;;;;;;;AASA,cAAM,IAAIlB,aAAJ,CAAmB,wFAAnB,EAA6G,IAA7G,EAAmH;AACxHkB,UAAAA,QAAQ,EAARA;AADwH,SAAnH,CAAN;AAGA;;AAED,WAAKT,kBAAL,CAAyBS,QAAzB,EAAoCK,IAApC,CAA0CH,MAAM,CAACC,MAAP,CAAe,EAAf,EAAmBF,UAAnB,CAA1C;;AAEA,WAAKG,WAAL;AACA;AAED;;;;;;;;qCAKiB;AAChB,UAAK,CAAC,KAAKE,oBAAX,EAAkC;AACjC,aAAKC,QAAL;AACA;;AAED,aAAO,KAAKD,oBAAZ;AACA;AAED;;;;;;;;;kCAMeE,I,EAAO;AACrB,UAAIR,QAAJ;;AAEA,UAAK,OAAOQ,IAAP,IAAe,QAApB,EAA+B;AAC9BR,QAAAA,QAAQ,GAAGQ,IAAX;AACA,OAFD,MAEO,IAAKA,IAAI,CAACC,EAAL,KAAaD,IAAI,CAACC,EAAL,CAAS,MAAT,KAAqBD,IAAI,CAACC,EAAL,CAAS,WAAT,CAAlC,CAAL,EAAkE;AACxET,QAAAA,QAAQ,GAAG,OAAX;AACA,OAFM,CAGP;AAHO,WAIF;AACJA,UAAAA,QAAQ,GAAGQ,IAAI,CAACE,IAAhB;AACA;;AAED,aAAO,KAAKC,cAAL,GAAuBX,QAAvB,CAAP;AACA;AAED;;;;;;;;;;;;iCAScQ,I,EAAO;AACpB,aAAO,CAAC,CAAC,KAAKT,aAAL,CAAoBS,IAApB,CAAT;AACA;AAED;;;;;;;;;;;;;;;4BAYSA,I,EAAO;AACf,UAAMI,GAAG,GAAG,KAAKb,aAAL,CAAoBS,IAApB,CAAZ;AAEA,aAAO,CAAC,EAAGI,GAAG,IAAIA,GAAG,CAACC,OAAd,CAAR;AACA;AAED;;;;;;;;;;;;;;;4BAYSL,I,EAAO;AACf,UAAMI,GAAG,GAAG,KAAKb,aAAL,CAAoBS,IAApB,CAAZ;;AAEA,UAAK,CAACI,GAAN,EAAY;AACX,eAAO,KAAP;AACA;;AAED,aAAO,CAAC,EAAGA,GAAG,CAACE,OAAJ,IAAeF,GAAG,CAACG,QAAtB,CAAR;AACA;AAED;;;;;;;;;;;;;;;6BAYUP,I,EAAO;AAChB,UAAMI,GAAG,GAAG,KAAKb,aAAL,CAAoBS,IAApB,CAAZ;AAEA,aAAO,CAAC,EAAGI,GAAG,IAAIA,GAAG,CAACG,QAAd,CAAR;AACA;AAED;;;;;;;;;;;;;;;6BAYUP,I,EAAO;AAChB,UAAMI,GAAG,GAAG,KAAKb,aAAL,CAAoBS,IAApB,CAAZ;AAEA,aAAO,CAAC,EAAGI,GAAG,IAAIA,GAAG,CAACI,QAAd,CAAR;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;+BAmBYC,O,EAASL,G,EAAM;AAC1B;AACA,UAAK,CAACA,GAAN,EAAY;AACX,eAAO,KAAP;AACA;;AAED,aAAO,KAAKM,kBAAL,CAAyBN,GAAzB,EAA8BK,OAA9B,CAAP;AACA;AAED;;;;;;;;;;;;;;;;;;mCAegBA,O,EAASE,a,EAAgB;AACxC,UAAMP,GAAG,GAAG,KAAKb,aAAL,CAAoBkB,OAAO,CAACG,IAA5B,CAAZ;;AAEA,UAAK,CAACR,GAAN,EAAY;AACX,eAAO,KAAP;AACA;;AAED,aAAOA,GAAG,CAACS,eAAJ,CAAoBC,QAApB,CAA8BH,aAA9B,CAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;+BAgBYI,qB,EAA+C;AAAA,UAAxBC,cAAwB,uEAAP,IAAO;;AAC1D,UAAKD,qBAAqB,YAAYrC,QAAtC,EAAiD;AAChD,YAAMuC,UAAU,GAAGF,qBAAqB,CAACE,UAAzC;AACA,YAAMC,SAAS,GAAGH,qBAAqB,CAACG,SAAxC;;AAEA,YAAK,EAAGD,UAAU,YAAYtC,OAAzB,CAAL,EAA0C;AACzC;;;;;AAKA,gBAAM,IAAIL,aAAJ,CACL,8FADK,EAEL,IAFK,CAAN;AAIA;;AAED,YAAK,EAAG4C,SAAS,YAAYvC,OAAxB,CAAL,EAAyC;AACxC;;;;;AAKA,gBAAM,IAAIL,aAAJ,CACL,4FADK,EAEL,IAFK,CAAN;AAIA;;AAED,eAAO,KAAK6C,UAAL,CAAiBF,UAAjB,EAA6BC,SAA7B,CAAP;AACA;;AA9ByD;AAAA;AAAA;;AAAA;AAgC1D,6BAAqBF,cAAc,CAACI,WAAf,EAArB,8HAAoD;AAAA,cAAxCC,KAAwC;;AACnD,cAAK,CAAC,KAAKC,UAAL,CAAiBP,qBAAjB,EAAwCM,KAAxC,CAAN,EAAwD;AACvD,mBAAO,KAAP;AACA;AACD;AApCyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsC1D,aAAO,IAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAuCeE,Q,EAAW;AACzB,WAAKrC,EAAL,CAAS,YAAT,EAAuB,UAAEC,GAAF,QAA8B;AAAA;AAAA,YAArBqC,GAAqB;AAAA,YAAhBC,QAAgB;;AACpD;AACA;AACA;AACA,YAAK,CAACA,QAAN,EAAiB;AAChB;AACA;;AAED,YAAMC,QAAQ,GAAGH,QAAQ,CAAEC,GAAF,EAAOC,QAAP,CAAzB;;AAEA,YAAK,OAAOC,QAAP,IAAmB,SAAxB,EAAoC;AACnCvC,UAAAA,GAAG,CAACwC,IAAJ;AACAxC,UAAAA,GAAG,CAACyC,MAAJ,GAAaF,QAAb;AACA;AACD,OAdD,EAcG;AAAEpC,QAAAA,QAAQ,EAAE;AAAZ,OAdH;AAeA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAuCmBiC,Q,EAAW;AAC7B,WAAKrC,EAAL,CAAS,gBAAT,EAA2B,UAAEC,GAAF,SAAmC;AAAA;AAAA,YAA1BqC,GAA0B;AAAA,YAArBb,aAAqB;;AAC7D,YAAMe,QAAQ,GAAGH,QAAQ,CAAEC,GAAF,EAAOb,aAAP,CAAzB;;AAEA,YAAK,OAAOe,QAAP,IAAmB,SAAxB,EAAoC;AACnCvC,UAAAA,GAAG,CAACwC,IAAJ;AACAxC,UAAAA,GAAG,CAACyC,MAAJ,GAAaF,QAAb;AACA;AACD,OAPD,EAOG;AAAEpC,QAAAA,QAAQ,EAAE;AAAZ,OAPH;AAQA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAsCwBqB,a,EAAekB,U,EAAa;AACnD,WAAK7C,oBAAL,CAA2B2B,aAA3B,IAA6CjB,MAAM,CAACC,MAAP,CAAe,KAAKmC,sBAAL,CAA6BnB,aAA7B,CAAf,EAA6DkB,UAA7D,CAA7C;AACA;AAED;;;;;;;;;2CAMwBlB,a,EAAgB;AACvC,aAAO,KAAK3B,oBAAL,CAA2B2B,aAA3B,KAA8C,EAArD;AACA;AAED;;;;;;;;;;;;;oCAUiBoB,0B,EAA6B;AAC7C,UAAIC,OAAJ;;AAEA,UAAKD,0BAA0B,YAAYrD,QAA3C,EAAsD;AACrDsD,QAAAA,OAAO,GAAGD,0BAA0B,CAACE,MAArC;AACA,OAFD,MAEO;AACN,YAAMC,MAAM,GAAGH,0BAA0B,YAAYtD,KAAtC,GACd,CAAEsD,0BAAF,CADc,GAEdI,KAAK,CAACC,IAAN,CAAYL,0BAA0B,CAACM,SAA3B,EAAZ,CAFD,CADM,CAKN;;AACAL,QAAAA,OAAO,GAAGE,MAAM,CACdI,MADQ,CACA,UAAEN,OAAF,EAAWO,KAAX,EAAsB;AAC9B,cAAMC,mBAAmB,GAAGD,KAAK,CAACE,iBAAN,EAA5B;;AAEA,cAAK,CAACT,OAAN,EAAgB;AACf,mBAAOQ,mBAAP;AACA;;AAED,iBAAOR,OAAO,CAACS,iBAAR,CAA2BD,mBAA3B,EAAgD;AAAEE,YAAAA,WAAW,EAAE;AAAf,WAAhD,CAAP;AACA,SATQ,EASN,IATM,CAAV;AAUA;;AAED,aAAQ,CAAC,KAAKpC,OAAL,CAAc0B,OAAd,CAAT,EAAmC;AAClC,YAAKA,OAAO,CAACC,MAAb,EAAsB;AACrBD,UAAAA,OAAO,GAAGA,OAAO,CAACC,MAAlB;AACA,SAFD,MAEO;AACN;AACA;AACD;;AAED,aAAOD,OAAP;AACA;AAED;;;;;;;;;;;;;;;8CAY2BW,S,EAAWC,S,EAAY;AACjD,UAAKD,SAAS,CAACE,WAAf,EAA6B;AAC5B,YAAMC,aAAa,GAAGH,SAAS,CAACI,gBAAV,EAAtB;;AACA,YAAMtC,QAAO,gCACTqC,aAAa,CAACE,YAAd,EADS,IAEZ,IAAIpE,IAAJ,CAAU,EAAV,EAAc+D,SAAS,CAACM,aAAV,EAAd,CAFY,EAAb,CAF4B,CAO5B;;;AACA,eAAO,KAAKC,cAAL,CAAqBzC,QAArB,EAA8BmC,SAA9B,CAAP;AACA,OATD,MASO;AACN,YAAMV,MAAM,GAAGS,SAAS,CAACN,SAAV,EAAf,CADM,CAGN;;AAHM;AAAA;AAAA;;AAAA;AAIN,gCAAqBH,MAArB,mIAA8B;AAAA,gBAAlBK,KAAkB;AAAA;AAAA;AAAA;;AAAA;AAC7B,oCAAqBA,KAArB,mIAA6B;AAAA,oBAAjBY,KAAiB;;AAC5B,oBAAK,KAAKD,cAAL,CAAqBC,KAAK,CAACnD,IAA3B,EAAiC4C,SAAjC,CAAL,EAAoD;AACnD;AACA,yBAAO,IAAP;AACA;AACD;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO7B;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYN,OAtBgD,CAwBjD;;;AACA,aAAO,KAAP;AACA;AAED;;;;;;;;;;;;oDAOkBV,M,EAAQU,S;;;;;;;AACzBV,cAAAA,MAAM,GAAG7D,0BAA0B,CAAE6D,MAAF,CAAnC;;;;;2BAEqBA,M;;;;;;;;AAATK,cAAAA,K;AACX,6CAAO,KAAKa,uBAAL,CAA8Bb,KAA9B,EAAqCK,SAArC,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIF;;;;;;;;;;;;;;;;;;;;;;;6CAoB0BS,Q,EAA+B;AAAA;;AAAA,UAArBC,SAAqB,uEAAT,MAAS;;AACxD;AACA,UAAK,KAAKhC,UAAL,CAAiB+B,QAAjB,EAA2B,OAA3B,CAAL,EAA4C;AAC3C,eAAO,IAAI5E,KAAJ,CAAW4E,QAAX,CAAP;AACA;;AAED,UAAIE,cAAJ,EAAoBC,aAApB,CANwD,CAQxD;;AACA,UAAMC,YAAY,GAAGJ,QAAQ,CAACL,YAAT,GAAwBU,OAAxB,GAAkCC,IAAlC,CAAwC,UAAA3D,IAAI;AAAA,eAAI,MAAI,CAACM,OAAL,CAAcN,IAAd,CAAJ;AAAA,OAA5C,KAA0EqD,QAAQ,CAACO,IAAxG;;AAEA,UAAKN,SAAS,IAAI,MAAb,IAAuBA,SAAS,IAAI,UAAzC,EAAsD;AACrDC,QAAAA,cAAc,GAAG,IAAI1E,UAAJ,CAAgB;AAChCgF,UAAAA,UAAU,EAAEpF,KAAK,CAACqF,SAAN,CAAiBL,YAAjB,CADoB;AAEhCM,UAAAA,aAAa,EAAEV,QAFiB;AAGhCC,UAAAA,SAAS,EAAE;AAHqB,SAAhB,CAAjB;AAKA;;AAED,UAAKA,SAAS,IAAI,MAAb,IAAuBA,SAAS,IAAI,SAAzC,EAAqD;AACpDE,QAAAA,aAAa,GAAG,IAAI3E,UAAJ,CAAgB;AAC/BgF,UAAAA,UAAU,EAAEpF,KAAK,CAACqF,SAAN,CAAiBL,YAAjB,CADmB;AAE/BM,UAAAA,aAAa,EAAEV;AAFgB,SAAhB,CAAhB;AAIA;;AAxBuD;AAAA;AAAA;;AAAA;AA0BxD,8BAAoBjF,cAAc,CAAEmF,cAAF,EAAkBC,aAAlB,CAAlC,mIAAsE;AAAA,cAA1DQ,IAA0D;AACrE,cAAMC,IAAI,GAAKD,IAAI,CAACE,MAAL,IAAeX,cAAf,GAAgC,YAAhC,GAA+C,cAA9D;AACA,cAAMJ,KAAK,GAAGa,IAAI,CAACb,KAAnB;;AAEA,cAAKA,KAAK,CAACc,IAAN,IAAcA,IAAd,IAAsB,KAAK1D,QAAL,CAAe4C,KAAK,CAACnD,IAArB,CAA3B,EAAyD;AACxD,mBAAOvB,KAAK,CAAC0F,SAAN,CAAiBhB,KAAK,CAACnD,IAAvB,CAAP;AACA;;AAED,cAAK,KAAKsB,UAAL,CAAiB6B,KAAK,CAACiB,YAAvB,EAAqC,OAArC,CAAL,EAAsD;AACrD,mBAAO,IAAI3F,KAAJ,CAAW0E,KAAK,CAACiB,YAAjB,CAAP;AACA;AACD;AArCuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuCxD,aAAO,IAAP;AACA;AAED;;;;;;;;;;;;;sCAUmBf,Q,EAAUgB,I,EAAO;AACnC,UAAIpC,MAAM,GAAGoB,QAAQ,CAACpB,MAAtB;;AAEA,aAAQA,MAAR,EAAiB;AAChB,YAAK,KAAKX,UAAL,CAAiBW,MAAjB,EAAyBoC,IAAzB,CAAL,EAAuC;AACtC,iBAAOpC,MAAP;AACA,SAHe,CAKhB;;;AACA,YAAK,KAAK3B,OAAL,CAAc2B,MAAd,CAAL,EAA8B;AAC7B,iBAAO,IAAP;AACA;;AAEDA,QAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACA;;AAED,aAAO,IAAP;AACA;AAED;;;;;;;;;+CAM4BqC,K,EAAOC,M,EAAS;AAAA;AAAA;AAAA;;AAAA;AAC3C,8BAAoBD,KAApB,mIAA4B;AAAA,cAAhBD,IAAgB;;AAC3B;AACA,cAAKA,IAAI,CAACpE,EAAL,CAAS,MAAT,CAAL,EAAyB;AACxBuE,YAAAA,iCAAiC,CAAE,IAAF,EAAQH,IAAR,EAAcE,MAAd,CAAjC;AACA,WAFD,CAGA;AACA;AACA;AACA;AANA,eAOK;AACJ,kBAAME,WAAW,GAAGhG,KAAK,CAACqF,SAAN,CAAiBO,IAAjB,CAApB;;AACA,kBAAMK,gBAAgB,GAAGD,WAAW,CAACE,YAAZ,EAAzB;AAFI;AAAA;AAAA;;AAAA;AAIJ,sCAAwBD,gBAAxB,mIAA2C;AAAA,sBAA/BrB,QAA+B;AAC1C,sBAAMrD,IAAI,GAAGqD,QAAQ,CAACpC,UAAT,IAAuBoC,QAAQ,CAACpB,MAA7C;AAEAuC,kBAAAA,iCAAiC,CAAE,IAAF,EAAQxE,IAAR,EAAcuE,MAAd,CAAjC;AACA;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASJ;AACD;AApB0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB3C;AAED;;;;;;;;;kCAMe9D,O,EAAU;AACxB,aAAO,IAAIpB,aAAJ,CAAmBoB,OAAnB,CAAP;AACA;AAED;;;;;;kCAGc;AACb,WAAKX,oBAAL,GAA4B,IAA5B;AACA;AAED;;;;;;+BAGW;AACV,UAAM8E,mBAAmB,GAAG,EAA5B;AACA,UAAMC,WAAW,GAAG,KAAK9F,kBAAzB;AACA,UAAM+F,SAAS,GAAGpF,MAAM,CAACqF,IAAP,CAAaF,WAAb,CAAlB;;AAEA,oCAAwBC,SAAxB,gCAAoC;AAA9B,YAAMtF,QAAQ,iBAAd;AACLoF,QAAAA,mBAAmB,CAAEpF,QAAF,CAAnB,GAAkCwF,mBAAmB,CAAEH,WAAW,CAAErF,QAAF,CAAb,EAA2BA,QAA3B,CAArD;AACA;;AAED,sCAAwBsF,SAAxB,mCAAoC;AAA9B,YAAMtF,SAAQ,mBAAd;AACLyF,QAAAA,qBAAqB,CAAEL,mBAAF,EAAuBpF,SAAvB,CAArB;AACA;;AAED,sCAAwBsF,SAAxB,mCAAoC;AAA9B,YAAMtF,UAAQ,mBAAd;AACL0F,QAAAA,iBAAiB,CAAEN,mBAAF,EAAuBpF,UAAvB,CAAjB;AACA;;AAED,sCAAwBsF,SAAxB,mCAAoC;AAA9B,YAAMtF,UAAQ,mBAAd;AACL2F,QAAAA,wBAAwB,CAAEP,mBAAF,EAAuBpF,UAAvB,CAAxB;AACA4F,QAAAA,4BAA4B,CAAER,mBAAF,EAAuBpF,UAAvB,CAA5B;AACA;;AAED,sCAAwBsF,SAAxB,mCAAoC;AAA9B,YAAMtF,UAAQ,mBAAd;AACL6F,QAAAA,cAAc,CAAET,mBAAF,EAAuBpF,UAAvB,CAAd;AACA8F,QAAAA,sBAAsB,CAAEV,mBAAF,EAAuBpF,UAAvB,CAAtB;AACA;;AAED,WAAKM,oBAAL,GAA4B8E,mBAA5B;AACA;AAED;;;;;;;;;uCAMoBxE,G,EAAKK,O,EAAiD;AAAA,UAAxC8E,gBAAwC,uEAArB9E,OAAO,CAAC+E,MAAR,GAAiB,CAAI;AACzE,UAAMC,WAAW,GAAGhF,OAAO,CAACiF,OAAR,CAAiBH,gBAAjB,CAApB;;AAEA,UAAKnF,GAAG,CAACuF,OAAJ,CAAY7E,QAAZ,CAAsB2E,WAAW,CAACvF,IAAlC,CAAL,EAAgD;AAC/C,YAAKqF,gBAAgB,IAAI,CAAzB,EAA6B;AAC5B,iBAAO,IAAP;AACA,SAFD,MAEO;AACN,cAAMK,UAAU,GAAG,KAAKrG,aAAL,CAAoBkG,WAApB,CAAnB;AAEA,iBAAO,KAAK/E,kBAAL,CAAyBkF,UAAzB,EAAqCnF,OAArC,EAA8C8E,gBAAgB,GAAG,CAAjE,CAAP;AACA;AACD,OARD,MAQO;AACN,eAAO,KAAP;AACA;AACD;AAED;;;;;;;;;;;;;;;;6DAW2BhD,K,EAAOK,S;;;;;;;AAC7BiD,cAAAA,K,GAAQtD,KAAK,CAACsD,K;AACdC,cAAAA,G,GAAMvD,KAAK,CAACsD,K;;;;;2BAEItD,KAAK,CAACwD,QAAN,CAAgB;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAhB,C;;;;;;;;AAARhG,cAAAA,I;;mBACNA,IAAI,CAACC,EAAL,CAAS,SAAT,C;;;;;AACJ,6CAAO,KAAKmD,uBAAL,CAA8B3E,KAAK,CAACqF,SAAN,CAAiB9D,IAAjB,CAA9B,EAAuD4C,SAAvD,CAAP;;;kBAGK,KAAKM,cAAL,CAAqBlD,IAArB,EAA2B4C,SAA3B,C;;;;;kBACCiD,KAAK,CAACI,OAAN,CAAeH,GAAf,C;;;;;;AACL,qBAAM,IAAIrH,KAAJ,CAAWoH,KAAX,EAAkBC,GAAlB,CAAN;;;AAGDD,cAAAA,KAAK,GAAGnH,QAAQ,CAACwH,YAAT,CAAuBlG,IAAvB,CAAR;;;AAGD8F,cAAAA,GAAG,GAAGpH,QAAQ,CAACwH,YAAT,CAAuBlG,IAAvB,CAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAGK6F,KAAK,CAACI,OAAN,CAAeH,GAAf,C;;;;;;AACL,qBAAM,IAAIrH,KAAJ,CAAWoH,KAAX,EAAkBC,GAAlB,CAAN;;;;;;;;;;;;;;SAp0BkBhH,M;AAy0BrBN,GAAG,CAAEM,MAAF,EAAUP,eAAV,CAAH;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,WAAac,aAAb;AAAA;AAAA;AACC;;;;;AAKA,yBAAaoB,OAAb,EAAuB;AAAA;;AACtB,QAAKA,OAAO,YAAYpB,aAAxB,EAAwC;AACvC,aAAOoB,OAAP;AACA;;AAED,QAAK,OAAOA,OAAP,IAAkB,QAAvB,EAAkC;AACjCA,MAAAA,OAAO,GAAG,CAAEA,OAAF,CAAV;AACA,KAFD,MAEO,IAAK,CAAC0B,KAAK,CAACgE,OAAN,CAAe1F,OAAf,CAAN,EAAiC;AACvC;AACA;AACAA,MAAAA,OAAO,GAAGA,OAAO,CAACuC,YAAR,CAAsB;AAAEN,QAAAA,WAAW,EAAE;AAAf,OAAtB,CAAV;AACA;;AAED,QAAKjC,OAAO,CAAE,CAAF,CAAP,IAAgB,OAAOA,OAAO,CAAE,CAAF,CAAd,IAAuB,QAAvC,IAAmDA,OAAO,CAAE,CAAF,CAAP,CAAaR,EAAb,CAAiB,kBAAjB,CAAxD,EAAgG;AAC/FQ,MAAAA,OAAO,CAAC2F,KAAR;AACA;;AAED,SAAKC,MAAL,GAAc5F,OAAO,CAAC6F,GAAR,CAAaC,cAAb,CAAd;AACA;AAED;;;;;;;AA1BD;AAAA,SAmDGC,MAAM,CAACC,QAnDV;;AA4CC;;;;;;;AA5CD,4BAmDuB;AACrB,aAAO,KAAKJ,MAAL,CAAaG,MAAM,CAACC,QAApB,GAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAvDD;AAAA;AAAA,yBAgFOzG,IAhFP,EAgFc;AACZ,UAAMwB,GAAG,GAAG,IAAInC,aAAJ,CAAmB,CAAEW,IAAF,CAAnB,CAAZ;AAEAwB,MAAAA,GAAG,CAAC6E,MAAJ,gCAAkB,KAAKA,MAAvB,sBAAkC7E,GAAG,CAAC6E,MAAtC;AAEA,aAAO7E,GAAP;AACA;AAED;;;;;;AAxFD;AAAA;AAAA,4BA6FUkF,KA7FV,EA6FkB;AAChB,aAAO,KAAKL,MAAL,CAAaK,KAAb,CAAP;AACA;AAED;;;;;;AAjGD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuGE,6CAAO,KAAKL,MAAL,CAAYC,GAAZ,CAAiB,UAAAtG,IAAI;AAAA,uBAAIA,IAAI,CAACE,IAAT;AAAA,eAArB,CAAP;;AAvGF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0GC;;;;;;;;;;;;;;AA1GD;AAAA;AAAA,6BAuHWyG,KAvHX,EAuHmB;AACjB,aAAOxE,KAAK,CAACC,IAAN,CAAY,KAAKwE,QAAL,EAAZ,EAA8BC,IAA9B,CAAoC,GAApC,EAA0CC,QAA1C,CAAoDH,KAApD,CAAP;AACA;AAED;;;;;;;;;;;;;;AA3HD;AAAA;AAAA,+BAwIaA,KAxIb,EAwIqB;AACnB,aAAOxE,KAAK,CAACC,IAAN,CAAY,KAAKwE,QAAL,EAAZ,EAA8BC,IAA9B,CAAoC,GAApC,EAA0CE,UAA1C,CAAsDJ,KAAtD,CAAP;AACA;AA1IF;AAAA;AAAA,wBA+Bc;AACZ,aAAO,KAAKN,MAAL,CAAYb,MAAnB;AACA;AAED;;;;;;AAnCD;AAAA;AAAA,wBAwCY;AACV,aAAO,KAAKa,MAAL,CAAa,KAAKA,MAAL,CAAYb,MAAZ,GAAqB,CAAlC,CAAP;AACA;AA1CF;;AAAA;AAAA;AA6IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;AAWA,SAASR,mBAAT,CAA8BgC,eAA9B,EAA+CxH,QAA/C,EAA0D;AACzD,MAAMyH,QAAQ,GAAG;AAChB/G,IAAAA,IAAI,EAAEV,QADU;AAGhBmG,IAAAA,OAAO,EAAE,EAHO;AAIhBuB,IAAAA,cAAc,EAAE,EAJA;AAKhBC,IAAAA,UAAU,EAAE,EALI;AAOhBtG,IAAAA,eAAe,EAAE,EAPD;AAQhBuG,IAAAA,iBAAiB,EAAE,EARH;AAUhBC,IAAAA,gBAAgB,EAAE;AAVF,GAAjB;AAaAC,EAAAA,SAAS,CAAEN,eAAF,EAAmBC,QAAnB,CAAT;AAEAM,EAAAA,YAAY,CAAEP,eAAF,EAAmBC,QAAnB,EAA6B,SAA7B,CAAZ;AACAM,EAAAA,YAAY,CAAEP,eAAF,EAAmBC,QAAnB,EAA6B,gBAA7B,CAAZ;AACAM,EAAAA,YAAY,CAAEP,eAAF,EAAmBC,QAAnB,EAA6B,YAA7B,CAAZ;AAEAM,EAAAA,YAAY,CAAEP,eAAF,EAAmBC,QAAnB,EAA6B,iBAA7B,CAAZ;AACAM,EAAAA,YAAY,CAAEP,eAAF,EAAmBC,QAAnB,EAA6B,mBAA7B,CAAZ;AAEAM,EAAAA,YAAY,CAAEP,eAAF,EAAmBC,QAAnB,EAA6B,kBAA7B,CAAZ;AAEAO,EAAAA,kBAAkB,CAAER,eAAF,EAAmBC,QAAnB,CAAlB;AAEA,SAAOA,QAAP;AACA;;AAED,SAAShC,qBAAT,CAAgCL,mBAAhC,EAAqDpF,QAArD,EAAgE;AAAA;AAAA;AAAA;;AAAA;AAC/D,0BAAsCoF,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgC0H,cAAtE,mIAAuF;AAAA,UAA3EO,sBAA2E;;AACtF;AACA,UAAK7C,mBAAmB,CAAE6C,sBAAF,CAAxB,EAAqD;AACpD,YAAMC,eAAe,GAAGC,kBAAkB,CAAE/C,mBAAF,EAAuB6C,sBAAvB,CAA1C;AAEAC,QAAAA,eAAe,CAACE,OAAhB,CAAyB,UAAAC,WAAW,EAAI;AACvCA,UAAAA,WAAW,CAAClC,OAAZ,CAAoB9F,IAApB,CAA0BL,QAA1B;AACA,SAFD;AAGA;AACD;AAV8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAY/D,SAAOoF,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgC0H,cAAvC;AACA;;AAED,SAAShC,iBAAT,CAA4BN,mBAA5B,EAAiDpF,QAAjD,EAA4D;AAAA;AAAA;AAAA;;AAAA;AAC3D,2BAAkCoF,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgC2H,UAAlE,wIAA+E;AAAA,UAAnEW,kBAAmE;AAC9E,UAAMC,WAAW,GAAGnD,mBAAmB,CAAEkD,kBAAF,CAAvC,CAD8E,CAG9E;;AACA,UAAKC,WAAL,EAAmB;AAAA;;AAClB,YAAMC,SAAS,GAAGD,WAAW,CAACpC,OAA9B;;AAEA,iCAAAf,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgCmG,OAAhC,EAAwC9F,IAAxC,iDAAiDmI,SAAjD;AACA;AACD;AAV0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAY3D,SAAOpD,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgC2H,UAAvC;AACA;;AAED,SAAShC,wBAAT,CAAmCP,mBAAnC,EAAwDpF,QAAxD,EAAmE;AAAA;AAAA;AAAA;;AAAA;AAClE,2BAAoCoF,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgC4H,iBAApE,wIAAwF;AAAA,UAA5Ea,oBAA4E;AACvF,UAAMF,WAAW,GAAGnD,mBAAmB,CAAEqD,oBAAF,CAAvC;;AAEA,UAAKF,WAAL,EAAmB;AAAA;;AAClB,YAAMG,iBAAiB,GAAGH,WAAW,CAAClH,eAAtC;;AAEA,kCAAA+D,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgCqB,eAAhC,EAAgDhB,IAAhD,kDAAyDqI,iBAAzD;AACA;AACD;AATiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWlE,SAAOtD,mBAAmB,CAAEpF,QAAF,CAAnB,CAAgC4H,iBAAvC;AACA;;AAED,SAAShC,4BAAT,CAAuCR,mBAAvC,EAA4DpF,QAA5D,EAAuE;AACtE,MAAMQ,IAAI,GAAG4E,mBAAmB,CAAEpF,QAAF,CAAhC;AADsE;AAAA;AAAA;;AAAA;AAGtE,2BAAuCQ,IAAI,CAACqH,gBAA5C,wIAA+D;AAAA,UAAnDc,uBAAmD;AAC9D,UAAMJ,WAAW,GAAGnD,mBAAmB,CAAEuD,uBAAF,CAAvC;;AAEA,UAAKJ,WAAL,EAAmB;AAClB,YAAMK,SAAS,GAAG1I,MAAM,CAACqF,IAAP,CAAagD,WAAb,EAA2BM,MAA3B,CAAmC,UAAAnI,IAAI;AAAA,iBAAIA,IAAI,CAAC6G,UAAL,CAAiB,IAAjB,CAAJ;AAAA,SAAvC,CAAlB;AADkB;AAAA;AAAA;;AAAA;AAGlB,iCAAoBqB,SAApB,wIAAgC;AAAA,gBAApBlI,IAAoB;;AAC/B,gBAAK,EAAGA,IAAI,IAAIF,IAAX,CAAL,EAAyB;AACxBA,cAAAA,IAAI,CAAEE,IAAF,CAAJ,GAAe6H,WAAW,CAAE7H,IAAF,CAA1B;AACA;AACD;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlB;AACD;AAfqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBtE,SAAOF,IAAI,CAACqH,gBAAZ;AACA,C,CAED;AACA;;;AACA,SAAShC,cAAT,CAAyBT,mBAAzB,EAA8CpF,QAA9C,EAAyD;AACxD,MAAMyH,QAAQ,GAAGrC,mBAAmB,CAAEpF,QAAF,CAApC;AACA,MAAM8I,aAAa,GAAGrB,QAAQ,CAACtB,OAAT,CAAiB0C,MAAjB,CAAyB,UAAAE,WAAW;AAAA,WAAI3D,mBAAmB,CAAE2D,WAAF,CAAvB;AAAA,GAApC,CAAtB;AAEAtB,EAAAA,QAAQ,CAACtB,OAAT,GAAmBxD,KAAK,CAACC,IAAN,CAAY,IAAIoG,GAAJ,CAASF,aAAT,CAAZ,CAAnB;AACA;;AAED,SAAShD,sBAAT,CAAiCV,mBAAjC,EAAsDpF,QAAtD,EAAiE;AAChE,MAAMyH,QAAQ,GAAGrC,mBAAmB,CAAEpF,QAAF,CAApC;AAEAyH,EAAAA,QAAQ,CAACpG,eAAT,GAA2BsB,KAAK,CAACC,IAAN,CAAY,IAAIoG,GAAJ,CAASvB,QAAQ,CAACpG,eAAlB,CAAZ,CAA3B;AACA;;AAED,SAASyG,SAAT,CAAoBN,eAApB,EAAqCC,QAArC,EAAgD;AAAA;AAAA;AAAA;;AAAA;AAC/C,2BAA8BD,eAA9B,wIAAgD;AAAA,UAApCyB,cAAoC;AAC/C,UAAML,SAAS,GAAG1I,MAAM,CAACqF,IAAP,CAAa0D,cAAb,EAA8BJ,MAA9B,CAAsC,UAAAnI,IAAI;AAAA,eAAIA,IAAI,CAAC6G,UAAL,CAAiB,IAAjB,CAAJ;AAAA,OAA1C,CAAlB;AAD+C;AAAA;AAAA;;AAAA;AAG/C,+BAAoBqB,SAApB,wIAAgC;AAAA,cAApBlI,IAAoB;AAC/B+G,UAAAA,QAAQ,CAAE/G,IAAF,CAAR,GAAmBuI,cAAc,CAAEvI,IAAF,CAAjC;AACA;AAL8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM/C;AAP8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ/C;;AAED,SAASqH,YAAT,CAAuBP,eAAvB,EAAwCC,QAAxC,EAAkDyB,YAAlD,EAAiE;AAAA;AAAA;AAAA;;AAAA;AAChE,2BAA8B1B,eAA9B,wIAAgD;AAAA,UAApCyB,cAAoC;;AAC/C,UAAK,OAAOA,cAAc,CAAEC,YAAF,CAArB,IAAyC,QAA9C,EAAyD;AACxDzB,QAAAA,QAAQ,CAAEyB,YAAF,CAAR,CAAyB7I,IAAzB,CAA+B4I,cAAc,CAAEC,YAAF,CAA7C;AACA,OAFD,MAEO,IAAKvG,KAAK,CAACgE,OAAN,CAAesC,cAAc,CAAEC,YAAF,CAA7B,CAAL,EAAuD;AAAA;;AAC7D,iCAAAzB,QAAQ,CAAEyB,YAAF,CAAR,EAAyB7I,IAAzB,iDAAkC4I,cAAc,CAAEC,YAAF,CAAhD;AACA;AACD;AAP+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhE;;AAED,SAASlB,kBAAT,CAA6BR,eAA7B,EAA8CC,QAA9C,EAAyD;AAAA;AAAA;AAAA;;AAAA;AACxD,2BAA8BD,eAA9B,wIAAgD;AAAA,UAApCyB,cAAoC;AAC/C,UAAMV,WAAW,GAAGU,cAAc,CAACE,cAAnC;;AAEA,UAAKZ,WAAL,EAAmB;AAClBd,QAAAA,QAAQ,CAACC,cAAT,CAAwBrH,IAAxB,CAA8BkI,WAA9B;AACAd,QAAAA,QAAQ,CAACE,UAAT,CAAoBtH,IAApB,CAA0BkI,WAA1B;AACAd,QAAAA,QAAQ,CAACG,iBAAT,CAA2BvH,IAA3B,CAAiCkI,WAAjC;AACAd,QAAAA,QAAQ,CAACI,gBAAT,CAA0BxH,IAA1B,CAAgCkI,WAAhC;AACA;AACD;AAVuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWxD;;AAED,SAASJ,kBAAT,CAA6B/C,mBAA7B,EAAkDpF,QAAlD,EAA6D;AAC5D,MAAMyH,QAAQ,GAAGrC,mBAAmB,CAAEpF,QAAF,CAApC;AAEA,SAAOoJ,SAAS,CAAEhE,mBAAF,CAAT,CAAiCyD,MAAjC,CAAyC,UAAAjI,GAAG;AAAA,WAAIA,GAAG,CAACuF,OAAJ,CAAY7E,QAAZ,CAAsBmG,QAAQ,CAAC/G,IAA/B,CAAJ;AAAA,GAA5C,CAAP;AACA;;AAED,SAAS0I,SAAT,CAAoBC,GAApB,EAA0B;AACzB,SAAOnJ,MAAM,CAACqF,IAAP,CAAa8D,GAAb,EAAmBvC,GAAnB,CAAwB,UAAAwC,GAAG;AAAA,WAAID,GAAG,CAAEC,GAAF,CAAP;AAAA,GAA3B,CAAP;AACA;;AAED,SAASvC,cAAT,CAAyBwC,OAAzB,EAAmC;AAClC,MAAK,OAAOA,OAAP,IAAkB,QAAvB,EAAkC;AACjC,WAAO;AACN7I,MAAAA,IAAI,EAAE6I,OADA;AAGJC,MAAAA,gBAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKNC,MAAAA,YALM,0BAKS,CAAE;AALX,KAAP;AAOA,GARD,MAQO;AACN,WAAO;AACN;AACA/I,MAAAA,IAAI,EAAE6I,OAAO,CAAC9I,EAAR,CAAY,SAAZ,IAA0B8I,OAAO,CAAC7I,IAAlC,GAAyC,OAFzC;AAIJ8I,MAAAA,gBAJI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKL,+CAAOD,OAAO,CAACC,gBAAR,EAAP;;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQNC,MAAAA,YARM,wBAQQH,GARR,EAQc;AACnB,eAAOC,OAAO,CAACE,YAAR,CAAsBH,GAAtB,CAAP;AACA;AAVK,KAAP;AAYA;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAU1K,cAAV,CAA0B8K,QAA1B,EAAoCC,OAApC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKC,UAAAA,IADL,GACY,KADZ;;AAAA;AAAA,cAGUA,IAHV;AAAA;AAAA;AAAA;;AAIEA,UAAAA,IAAI,GAAG,IAAP;;AAJF,eAMOF,QANP;AAAA;AAAA;AAAA;;AAOSG,UAAAA,IAPT,GAOgBH,QAAQ,CAACI,IAAT,EAPhB;;AAAA,cASSD,IAAI,CAACD,IATd;AAAA;AAAA;AAAA;;AAUIA,UAAAA,IAAI,GAAG,KAAP;AAVJ;AAWI,iBAAM;AACLlF,YAAAA,MAAM,EAAEgF,QADH;AAEL/F,YAAAA,KAAK,EAAEkG,IAAI,CAAClG;AAFP,WAAN;;AAXJ;AAAA,eAkBOgG,OAlBP;AAAA;AAAA;AAAA;;AAmBSE,UAAAA,OAnBT,GAmBgBF,OAAO,CAACG,IAAR,EAnBhB;;AAAA,cAqBSD,OAAI,CAACD,IArBd;AAAA;AAAA;AAAA;;AAsBIA,UAAAA,IAAI,GAAG,KAAP;AAtBJ;AAuBI,iBAAM;AACLlF,YAAAA,MAAM,EAAEiF,OADH;AAELhG,YAAAA,KAAK,EAAEkG,OAAI,CAAClG;AAFP,WAAN;;AAvBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgCA;AACA;AACA;AACA;AACA;;;AACA,SAAU9E,0BAAV,CAAsC6D,MAAtC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACsBA,MADtB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACaK,UAAAA,KADb;AAEE,yCAAOA,KAAK,CAACgH,oBAAN,EAAP;;AAFF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAS/E,iCAAT,CAA4CgF,MAA5C,EAAoDnF,IAApD,EAA0DE,MAA1D,EAAmE;AAAA;AAAA;AAAA;;AAAA;AAClE,2BAAyBF,IAAI,CAAC2E,gBAAL,EAAzB,wIAAmD;AAAA,UAAvCpG,SAAuC;;AAClD,UAAK,CAAC4G,MAAM,CAACtG,cAAP,CAAuBmB,IAAvB,EAA6BzB,SAA7B,CAAN,EAAiD;AAChD2B,QAAAA,MAAM,CAACkF,eAAP,CAAwB7G,SAAxB,EAAmCyB,IAAnC;AACA;AACD;AALiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMlE","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/schema\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport Text from './text';\nimport TreeWalker from './treewalker';\n\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * {@glink framework/guides/architecture/editing-engine#schema \"Schema\"} section of the\n * {@glink framework/guides/architecture/editing-engine Introduction to the \"Editing engine architecture\"}.\n * * {@glink framework/guides/deep-dive/schema \"Schema\" deep dive} guide.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Schema {\n\t/**\n\t * Creates schema instance.\n\t */\n\tconstructor() {\n\t\tthis._sourceDefinitions = {};\n\n\t\t/**\n\t\t * A dictionary containing attribute properties.\n\t\t *\n\t\t * @private\n\t\t * @member {Object.<String,String>}\n\t\t */\n\t\tthis._attributeProperties = {};\n\n\t\tthis.decorate( 'checkChild' );\n\t\tthis.decorate( 'checkAttribute' );\n\n\t\tthis.on( 'checkAttribute', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.on( 'checkChild', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t\targs[ 1 ] = this.getDefinition( args[ 1 ] );\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Registers schema item. Can only be called once for every item name.\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tinheritAllFrom: '$block'\n\t *\t\t} );\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\tregister( itemName, definition ) {\n\t\tif ( this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * A single item cannot be registered twice in the schema.\n\t\t\t *\n\t\t\t * This situation may happen when:\n\t\t\t *\n\t\t\t * * Two or more plugins called {@link #register `register()`} with the same name. This will usually mean that\n\t\t\t * there is a collision between plugins which try to use the same element in the model. Unfortunately,\n\t\t\t * the only way to solve this is by modifying one of these plugins to use a unique model element name.\n\t\t\t * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n\t\t\t * and usually means one or more of the following issues:\n\t\t\t *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n\t\t\t *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n\t\t\t *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n\t\t\t *\n\t\t\t * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element that is being registered twice.\n\t\t\t * @error schema-cannot-register-item-twice\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\titemName\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ] = [\n\t\t\tObject.assign( {}, definition )\n\t\t];\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Extends a {@link #register registered} item's definition.\n\t *\n\t * Extending properties such as `allowIn` will add more items to the existing properties,\n\t * while redefining properties such as `isBlock` will override the previously defined ones.\n\t *\n\t *\t\tschema.register( 'foo', {\n\t *\t\t\tallowIn: '$root',\n\t *\t\t\tisBlock: true;\n\t *\t\t} );\n\t *\t\tschema.extend( 'foo', {\n\t *\t\t\tallowIn: 'blockQuote',\n\t *\t\t\tisBlock: false\n\t *\t\t} );\n\t *\n\t *\t\tschema.getDefinition( 'foo' );\n\t *\t\t//\t{\n\t *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n\t *\t\t// \t\tisBlock: false\n\t *\t\t//\t}\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\textend( itemName, definition ) {\n\t\tif ( !this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * Cannot extend an item which was not registered yet.\n\t\t\t *\n\t\t\t * This error happens when a plugin tries to extend the schema definition of an item which was not\n\t\t\t * {@link #register registered} yet.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element which is being extended.\n\t\t\t * @error schema-cannot-extend-missing-item\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', this, {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Returns all registered items.\n\t *\n\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n\t */\n\tgetDefinitions() {\n\t\tif ( !this._compiledDefinitions ) {\n\t\t\tthis._compile();\n\t\t}\n\n\t\treturn this._compiledDefinitions;\n\t}\n\n\t/**\n\t * Returns a definition of the given item or `undefined` if item is not registered.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n\t */\n\tgetDefinition( item ) {\n\t\tlet itemName;\n\n\t\tif ( typeof item == 'string' ) {\n\t\t\titemName = item;\n\t\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\n\t\t\titemName = '$text';\n\t\t}\n\t\t// Element or module:engine/model/schema~SchemaContextItem.\n\t\telse {\n\t\t\titemName = item.name;\n\t\t}\n\n\t\treturn this.getDefinitions()[ itemName ];\n\t}\n\n\t/**\n\t * Returns `true` if the given item is registered in the schema.\n\t *\n\t *\t\tschema.isRegistered( 'paragraph' ); // -> true\n\t *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isRegistered( 'foo' ); // -> false\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisRegistered( item ) {\n\t\treturn !!this.getDefinition( item );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n\t *\n\t *\t\tschema.isBlock( 'paragraph' ); // -> true\n\t *\t\tschema.isBlock( '$root' ); // -> false\n\t *\n\t *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n\t *\t\tschema.isBlock( paragraphElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisBlock( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isBlock );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` or `isObject` property\n\t * (all objects are also limits).\n\t *\n\t *\t\tschema.isLimit( 'paragraph' ); // -> false\n\t *\t\tschema.isLimit( '$root' ); // -> true\n\t *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isLimit( 'image' ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisLimit( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!( def.isLimit || def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n\t *\n\t *\t\tschema.isObject( 'paragraph' ); // -> false\n\t *\t\tschema.isObject( 'image' ); // -> true\n\t *\n\t *\t\tconst imageElement = writer.createElement( 'image' );\n\t *\t\tschema.isObject( imageElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisObject( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an inline element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n\t *\n\t *\t\tschema.isInline( 'paragraph' ); // -> false\n\t *\t\tschema.isInline( 'softBreak' ); // -> true\n\t *\n\t *\t\tconst text = writer.createText('foo' );\n\t *\t\tschema.isInline( text ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisInline( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isInline );\n\t}\n\n\t/**\n\t * Checks whether the given node (`child`) can be a child of the given context.\n\t *\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tallowIn: '$root'\n\t *\t\t} );\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n\t *\n\t * Note: When verifying whether the given node can be a child of the given context, the\n\t * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n\t * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n\t * It happens if one of the context's elements does not allow its child.\n\t *\n\t * @fires checkChild\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the child will be checked.\n\t * @param {module:engine/model/node~Node|String} def The child to check.\n\t */\n\tcheckChild( context, def ) {\n\t\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._checkContextMatch( def, context );\n\t}\n\n\t/**\n\t * Checks whether the given attribute can be applied in the given context (on the last\n\t * item of the context).\n\t *\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n\t *\n\t *\t\tschema.extend( '$text', {\n\t *\t\t\tallowAttributes: 'bold'\n\t *\t\t} );\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n\t *\n\t * @fires checkAttribute\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the attribute will be checked.\n\t * @param {String} attributeName\n\t */\n\tcheckAttribute( context, attributeName ) {\n\t\tconst def = this.getDefinition( context.last );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn def.allowAttributes.includes( attributeName );\n\t}\n\n\t/**\n\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n\t *\n\t * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n\t *\n\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n\t * will be valid.\n\t *\n\t * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n\t * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n\t *\n\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n\t * element to which the `elementToMerge` will be merged.\n\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n\t * @returns {Boolean}\n\t */\n\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\n\t\tif ( positionOrBaseElement instanceof Position ) {\n\t\t\tconst nodeBefore = positionOrBaseElement.nodeBefore;\n\t\t\tconst nodeAfter = positionOrBaseElement.nodeAfter;\n\n\t\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node before the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-before\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-before: The node before the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node after the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-after\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-after: The node after the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this.checkMerge( nodeBefore, nodeAfter );\n\t\t}\n\n\t\tfor ( const child of elementToMerge.getChildren() ) {\n\t\t\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkChild} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow elements in specific contexts.\n\t *\n\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow heading1 directly inside a blockQuote.\n\t *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkChild', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst childDefinition = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkChild()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\n\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n\t */\n\taddChildCheck( callback ) {\n\t\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\n\t\t\t// checkChild() was called with a non-registered child.\n\t\t\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\n\t\t\t// don't even execute them.\n\t\t\tif ( !childDef ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst retValue = callback( ctx, childDef );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkAttribute} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow attribute if node to which it is applied\n\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n\t *\n\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow bold on $text inside heading1.\n\t *\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst attributeName = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkAttribute()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n\t */\n\taddAttributeCheck( callback ) {\n\t\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\n\t\t\tconst retValue = callback( ctx, attributeName );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * This method allows assigning additional metadata to the model attributes. For example,\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n\t * used to mark formatting attributes (like `bold` or `italic`).\n\t *\n\t *\t\t// Mark bold as a formatting attribute.\n\t *\t\tschema.setAttributeProperties( 'bold', {\n\t *\t\t\tisFormatting: true\n\t *\t\t} );\n\t *\n\t *\t\t// Override code not to be considered a formatting markup.\n\t *\t\tschema.setAttributeProperties( 'code', {\n\t *\t\t\tisFormatting: false\n\t *\t\t} );\n\t *\n\t * Properties are not limited to members defined in the\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tcustomProperty: 'value'\n\t *\t\t} );\n\t *\n\t * Subsequent calls with the same attribute will extend its custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tone: 1\n\t *\t\t} );\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\ttwo: 2\n\t *\t\t} );\n\t *\n\t *\t\tconsole.log( schema.getAttributeProperties( 'blockQuote' ) );\n\t *\t\t// Logs: { one: 1, two: 2 }\n\t *\n\t * @param {String} attributeName A name of the attribute to receive the properties.\n\t * @param {module:engine/model/schema~AttributeProperties} properties A dictionary of properties.\n\t */\n\tsetAttributeProperties( attributeName, properties ) {\n\t\tthis._attributeProperties[ attributeName ] = Object.assign( this.getAttributeProperties( attributeName ), properties );\n\t}\n\n\t/**\n\t * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n\t *\n\t * @param {String} attributeName A name of the attribute.\n\t * @returns {module:engine/model/schema~AttributeProperties}\n\t */\n\tgetAttributeProperties( attributeName ) {\n\t\treturn this._attributeProperties[ attributeName ] || {};\n\t}\n\n\t/**\n\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n\t * selection/range/position or the root otherwise.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/range~Range|module:engine/model/position~Position} selectionOrRangeOrPosition\n\t * The selection/range/position to check.\n\t * @returns {module:engine/model/element~Element} The lowest limit element containing\n\t * the entire `selectionOrRangeOrPosition`.\n\t */\n\tgetLimitElement( selectionOrRangeOrPosition ) {\n\t\tlet element;\n\n\t\tif ( selectionOrRangeOrPosition instanceof Position ) {\n\t\t\telement = selectionOrRangeOrPosition.parent;\n\t\t} else {\n\t\t\tconst ranges = selectionOrRangeOrPosition instanceof Range ?\n\t\t\t\t[ selectionOrRangeOrPosition ] :\n\t\t\t\tArray.from( selectionOrRangeOrPosition.getRanges() );\n\n\t\t\t// Find the common ancestor for all selection's ranges.\n\t\t\telement = ranges\n\t\t\t\t.reduce( ( element, range ) => {\n\t\t\t\t\tconst rangeCommonAncestor = range.getCommonAncestor();\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\treturn rangeCommonAncestor;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\n\t\t\t\t}, null );\n\t\t}\n\n\t\twhile ( !this.isLimit( element ) ) {\n\t\t\tif ( element.parent ) {\n\t\t\t\telement = element.parent;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Checks whether the attribute is allowed in selection:\n\t *\n\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\n\t * specified attribute allowed.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection which will be checked.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Boolean}\n\t */\n\tcheckAttributeInSelection( selection, attribute ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\t\t\tconst context = [\n\t\t\t\t...firstPosition.getAncestors(),\n\t\t\t\tnew Text( '', selection.getAttributes() )\n\t\t\t];\n\n\t\t\t// Check whether schema allows for a text with the attribute in the selection.\n\t\t\treturn this.checkAttribute( context, attribute );\n\t\t} else {\n\t\t\tconst ranges = selection.getRanges();\n\n\t\t\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tif ( this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\t\t// If we found a node that is allowed to have the attribute, return true.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't found such node, return false.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* getValidRanges( ranges, attribute ) {\n\t\tranges = convertToMinimalFlatRanges( ranges );\n\n\t\tfor ( const range of ranges ) {\n\t\t\tyield* this._getValidRangesForRange( range, attribute );\n\t\t}\n\t}\n\n\t/**\n\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n\t * nearest to that `position` and is a correct range for selection.\n\t *\n\t * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n\t * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n\t * the {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * Direction of searching for the nearest correct selection range can be specified as:\n\t *\n\t * * `both` - searching will be performed in both ways,\n\t * * `forward` - searching will be performed only forward,\n\t * * `backward` - searching will be performed only backward.\n\t *\n\t * When valid selection range cannot be found, `null` is returned.\n\t *\n\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n\t */\n\tgetNearestSelectionRange( position, direction = 'both' ) {\n\t\t// Return collapsed range if provided position is valid.\n\t\tif ( this.checkChild( position, '$text' ) ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\tlet backwardWalker, forwardWalker;\n\n\t\t// Never leave a limit element.\n\t\tconst limitElement = position.getAncestors().reverse().find( item => this.isLimit( item ) ) || position.root;\n\n\t\tif ( direction == 'both' || direction == 'backward' ) {\n\t\t\tbackwardWalker = new TreeWalker( {\n\t\t\t\tboundaries: Range._createIn( limitElement ),\n\t\t\t\tstartPosition: position,\n\t\t\t\tdirection: 'backward'\n\t\t\t} );\n\t\t}\n\n\t\tif ( direction == 'both' || direction == 'forward' ) {\n\t\t\tforwardWalker = new TreeWalker( {\n\t\t\t\tboundaries: Range._createIn( limitElement ),\n\t\t\t\tstartPosition: position\n\t\t\t} );\n\t\t}\n\n\t\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\n\t\t\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\n\t\t\tconst value = data.value;\n\n\t\t\tif ( value.type == type && this.isObject( value.item ) ) {\n\t\t\t\treturn Range._createOn( value.item );\n\t\t\t}\n\n\t\t\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\t\treturn new Range( value.nextPosition );\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to find position ancestors that allows to insert given node.\n\t * It starts searching from the given position and goes node by node to the top of the model tree\n\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n\t *\n\t * @params {module:engine/model/position~Position} position Position from searching will start.\n\t * @params {module:engine/model/node~Node|String} node Node for which allowed parent should be found or its name.\n\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n\t */\n\tfindAllowedParent( position, node ) {\n\t\tlet parent = position.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( this.checkChild( parent, node ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\t// Do not split limit elements.\n\t\t\tif ( this.isLimit( parent ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes attributes disallowed by the schema.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\tremoveDisallowedAttributes( nodes, writer ) {\n\t\tfor ( const node of nodes ) {\n\t\t\t// When node is a `Text` it has no children, so just filter it out.\n\t\t\tif ( node.is( 'text' ) ) {\n\t\t\t\tremoveDisallowedAttributeFromNode( this, node, writer );\n\t\t\t}\n\t\t\t// In a case of `Element` iterates through positions between nodes inside this element\n\t\t\t// and filter out node before the current position, or position parent when position\n\t\t\t// is at start of an element. Using positions prevent from omitting merged nodes\n\t\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/1789.\n\t\t\telse {\n\t\t\t\tconst rangeInNode = Range._createIn( node );\n\t\t\t\tconst positionsInRange = rangeInNode.getPositions();\n\n\t\t\t\tfor ( const position of positionsInRange ) {\n\t\t\t\t\tconst item = position.nodeBefore || position.parent;\n\n\t\t\t\t\tremoveDisallowedAttributeFromNode( this, item, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an instance of the schema context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t * @returns {module:engine/model/schema~SchemaContext}\n\t */\n\tcreateContext( context ) {\n\t\treturn new SchemaContext( context );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_clearCache() {\n\t\tthis._compiledDefinitions = null;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_compile() {\n\t\tconst compiledDefinitions = {};\n\t\tconst sourceRules = this._sourceDefinitions;\n\t\tconst itemNames = Object.keys( sourceRules );\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowContentOf( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowWhere( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowAttributesOf( compiledDefinitions, itemName );\n\t\t\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcleanUpAllowIn( compiledDefinitions, itemName );\n\t\t\tcleanUpAllowAttributes( compiledDefinitions, itemName );\n\t\t}\n\n\t\tthis._compiledDefinitions = compiledDefinitions;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n\t * @param {module:engine/model/schema~SchemaContext} context\n\t * @param {Number} contextItemIndex\n\t */\n\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\n\t\tconst contextItem = context.getItem( contextItemIndex );\n\n\t\tif ( def.allowIn.includes( contextItem.name ) ) {\n\t\t\tif ( contextItemIndex == 0 ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst parentRule = this.getDefinition( contextItem );\n\n\t\t\t\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n\t * inside the given range on which the attribute can be applied.\n\t *\n\t * This is a helper function for {@link ~Schema#getValidRanges}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Range to process.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* _getValidRangesForRange( range, attribute ) {\n\t\tlet start = range.start;\n\t\tlet end = range.start;\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tyield* this._getValidRangesForRange( Range._createIn( item ), attribute );\n\t\t\t}\n\n\t\t\tif ( !this.checkAttribute( item, attribute ) ) {\n\t\t\t\tif ( !start.isEqual( end ) ) {\n\t\t\t\t\tyield new Range( start, end );\n\t\t\t\t}\n\n\t\t\t\tstart = Position._createAfter( item );\n\t\t\t}\n\n\t\t\tend = Position._createAfter( item );\n\t\t}\n\n\t\tif ( !start.isEqual( end ) ) {\n\t\t\tyield new Range( start, end );\n\t\t}\n\t}\n}\n\nmix( Schema, ObservableMixin );\n\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` &ndash; A string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` &ndash; A string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` &ndash; A string or an array of strings. Inherits \"allowed children\" from other items.\n * * `allowWhere` &ndash; A string or an array of strings. Inherits \"allowed in\" from other items.\n * * `allowAttributesOf` &ndash; A string or an array of strings. Inherits attributes from other items.\n * * `inheritTypesFrom` &ndash; A string or an array of strings. Inherits `is*` properties of other items.\n * * `inheritAllFrom` &ndash; A string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * Additionally, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`, `isInline`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` &ndash; Whether this item is paragraph-like. Generally speaking, content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: There is also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` &ndash; It can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements: `$root`, table cell, image caption, etc. In other words, all actions that happen inside\n * a limit element are limited to its content. **Note:** All objects (`isObject`) are treated as limit elements, too.\n * * `isObject` &ndash; Whether an item is \"self-contained\" and should be treated as a whole. Examples of object elements:\n * `image`, `table`, `video`, etc. **Note:** An object is also a limit, so\n * {@link module:engine/model/schema~Schema#isLimit `isLimit()`} returns `true` for object elements automatically.\n * * `isInline` &ndash; Whether an item is \"text-like\" and should be treated as an inline node. Examples of inline elements:\n * `$text`, `softBreak` (`<br>`), etc.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block',\n *\t\t\tisInline: true\n *\t\t} );\n *\n * They reflect typical editor content that is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@glink framework/guides/deep-dive/schema Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes in it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it cannot be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean. Limit it to the actual data and store information in a normalized way.\n * * Remember about definining the `is*` properties. They do not affect the allowed structures, but they can\n * affect how the editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules fed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} methods are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * The `name` property,\n * * The `is*` properties,\n * * The `allowIn` array,\n * * The `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n\t/**\n\t * Creates an instance of the context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t */\n\tconstructor( context ) {\n\t\tif ( context instanceof SchemaContext ) {\n\t\t\treturn context;\n\t\t}\n\n\t\tif ( typeof context == 'string' ) {\n\t\t\tcontext = [ context ];\n\t\t} else if ( !Array.isArray( context ) ) {\n\t\t\t// `context` is item or position.\n\t\t\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\n\t\t\tcontext = context.getAncestors( { includeSelf: true } );\n\t\t}\n\n\t\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\n\t\t\tcontext.shift();\n\t\t}\n\n\t\tthis._items = context.map( mapContextItem );\n\t}\n\n\t/**\n\t * The number of items.\n\t *\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * The last item (the lowest node).\n\t *\n\t * @type {module:engine/model/schema~SchemaContextItem}\n\t */\n\tget last() {\n\t\treturn this._items[ this._items.length - 1 ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all context items.\n\t *\n\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns a new schema context instance with an additional item.\n\t *\n\t * Item can be added as:\n\t *\n\t * \t\tconst context = new SchemaContext( [ '$root' ] );\n\t *\n\t * \t\t// An element.\n\t * \t\tconst fooElement = writer.createElement( 'fooElement' );\n\t * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n\t *\n\t * \t\t// A text node.\n\t * \t\tconst text = writer.createText( 'foobar' );\n\t * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n\t *\n\t * \t\t// A string (element name).\n\t * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n\t *\n\t * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n\t * (without ancestors).\n\t *\n\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item An item that will be added\n\t * to the current context.\n\t * @returns {module:engine/model/schema~SchemaContext} A new schema context instance with an additional item.\n\t */\n\tpush( item ) {\n\t\tconst ctx = new SchemaContext( [ item ] );\n\n\t\tctx._items = [ ...this._items, ...ctx._items ];\n\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Gets an item on the given index.\n\t *\n\t * @returns {module:engine/model/schema~SchemaContextItem}\n\t */\n\tgetItem( index ) {\n\t\treturn this._items[ index ];\n\t}\n\n\t/**\n\t * Returns the names of items.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* getNames() {\n\t\tyield* this._items.map( item => item.name );\n\t}\n\n\t/**\n\t * Checks whether the context ends with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$text' ); // -> true\n\t *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n\t *\t\tctx.endsWith( '$root' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tendsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\n\t}\n\n\t/**\n\t * Checks whether the context starts with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$root' ); // -> true\n\t *\t\tctx.endsWith( '$root paragraph' ); // -> true\n\t *\t\tctx.endsWith( '$text' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tstartsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).startsWith( query );\n\t}\n}\n\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( model.createPositionAt( paragraphElement, 0 ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\n/**\n * A structure containing additional metadata describing the attribute.\n *\n * See {@link module:engine/model/schema~Schema#setAttributeProperties `Schema#setAttributeProperties()`} for usage examples.\n *\n * @typedef {Object} module:engine/model/schema~AttributeProperties\n * @property {Boolean} [isFormatting] Indicates that the attribute should be considered as a visual formatting, like `bold`, `italic` or\n * `fontSize` rather than semantic attribute (such as `src`, `listType`, etc.). For example, it is used by the \"Remove format\" feature.\n * @property {Boolean} [copyOnEnter] Indicates that given text attribute should be copied to the next block when enter is pressed.\n */\n\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\n\tconst itemRule = {\n\t\tname: itemName,\n\n\t\tallowIn: [],\n\t\tallowContentOf: [],\n\t\tallowWhere: [],\n\n\t\tallowAttributes: [],\n\t\tallowAttributesOf: [],\n\n\t\tinheritTypesFrom: []\n\t};\n\n\tcopyTypes( sourceItemRules, itemRule );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\n\n\tmakeInheritAllWork( sourceItemRules, itemRule );\n\n\treturn itemRule;\n}\n\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\n\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\n\t\t// The allowContentOf property may point to an unregistered element.\n\t\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\n\t\t\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\n\n\t\t\tallowedChildren.forEach( allowedItem => {\n\t\t\t\tallowedItem.allowIn.push( itemName );\n\t\t\t} );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowContentOf;\n}\n\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\n\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\n\n\t\t// The allowWhere property may point to an unregistered element.\n\t\tif ( inheritFrom ) {\n\t\t\tconst allowedIn = inheritFrom.allowIn;\n\n\t\t\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowWhere;\n}\n\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\n\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst inheritAttributes = inheritFrom.allowAttributes;\n\n\t\t\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\n\tconst item = compiledDefinitions[ itemName ];\n\n\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\n\t\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\n\n\t\t\tfor ( const name of typeNames ) {\n\t\t\t\tif ( !( name in item ) ) {\n\t\t\t\t\titem[ name ] = inheritFrom[ name ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete item.inheritTypesFrom;\n}\n\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\n\n\titemRule.allowIn = Array.from( new Set( existingItems ) );\n}\n\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\n}\n\nfunction copyTypes( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\n\n\t\tfor ( const name of typeNames ) {\n\t\t\titemRule[ name ] = sourceItemRule[ name ];\n\t\t}\n\t}\n}\n\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\n\t\t\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\n\t\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\n\t\t\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\n\t\t}\n\t}\n}\n\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst inheritFrom = sourceItemRule.inheritAllFrom;\n\n\t\tif ( inheritFrom ) {\n\t\t\titemRule.allowContentOf.push( inheritFrom );\n\t\t\titemRule.allowWhere.push( inheritFrom );\n\t\t\titemRule.allowAttributesOf.push( inheritFrom );\n\t\t\titemRule.inheritTypesFrom.push( inheritFrom );\n\t\t}\n\t}\n}\n\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\n}\n\nfunction getValues( obj ) {\n\treturn Object.keys( obj ).map( key => obj[ key ] );\n}\n\nfunction mapContextItem( ctxItem ) {\n\tif ( typeof ctxItem == 'string' ) {\n\t\treturn {\n\t\t\tname: ctxItem,\n\n\t\t\t* getAttributeKeys() {},\n\n\t\t\tgetAttribute() {}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\t// '$text' means text nodes and text proxies.\n\t\t\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\n\n\t\t\t* getAttributeKeys() {\n\t\t\t\tyield* ctxItem.getAttributeKeys();\n\t\t\t},\n\n\t\t\tgetAttribute( key ) {\n\t\t\t\treturn ctxItem.getAttribute( key );\n\t\t\t}\n\t\t};\n\t}\n}\n\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\nfunction* combineWalkers( backward, forward ) {\n\tlet done = false;\n\n\twhile ( !done ) {\n\t\tdone = true;\n\n\t\tif ( backward ) {\n\t\t\tconst step = backward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: backward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( forward ) {\n\t\t\tconst step = forward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: forward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n// all those minimal flat ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges Ranges to process.\n// @returns {Iterable.<module:engine/model/range~Range>} Minimal flat ranges of given `ranges`.\nfunction* convertToMinimalFlatRanges( ranges ) {\n\tfor ( const range of ranges ) {\n\t\tyield* range.getMinimalFlatRanges();\n\t}\n}\n\nfunction removeDisallowedAttributeFromNode( schema, node, writer ) {\n\tfor ( const attribute of node.getAttributeKeys() ) {\n\t\tif ( !schema.checkAttribute( node, attribute ) ) {\n\t\t\twriter.removeAttribute( attribute, node );\n\t\t}\n\t}\n}\n"]}]}