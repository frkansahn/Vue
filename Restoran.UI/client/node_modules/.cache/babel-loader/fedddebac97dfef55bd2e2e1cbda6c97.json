{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\attributeelement.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\attributeelement.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js"],"names":["Element","CKEditorError","DEFAULT_PRIORITY","AttributeElement","document","name","attrs","children","getFillerOffset","_priority","_id","_clonesGroup","id","Set","type","cutType","replace","otherElement","priority","deep","cloned","nonUiChildrenCount","element","parent","is","childCount","Array","from","getChildren","filter","length"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n\t/**\n\t * Creates an attribute element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( document, name, attrs, children ) {\n\t\tsuper( document, name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\n\t\t/**\n\t\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Number}\n\t\t */\n\t\tthis._priority = DEFAULT_PRIORITY;\n\n\t\t/**\n\t\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t\t * and then two elements are considered similar if, and only if they have the same `_id`.\n\t\t *\n\t\t * @protected\n\t\t * @member {String|Number}\n\t\t */\n\t\tthis._id = null;\n\n\t\t/**\n\t\t * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n\t\t * and still exist in the view tree.\n\t\t *\n\t\t * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n\t\t */\n\t\tthis._clonesGroup = null;\n\t}\n\n\t/**\n\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget priority() {\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t * and then two elements are considered similar if, and only if they have the same `id`.\n\t *\n\t * @readonly\n\t * @type {String|Number}\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n\t * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n\t *\n\t * Note: If this element has been removed from the tree, returned set will not include it.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n\t * if this element has no `id`.\n\t *\n\t * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n\t * with the same `id` that were added and not removed from the view tree.\n\t */\n\tgetElementsWithSameId() {\n\t\tif ( this.id === null ) {\n\t\t\t/**\n\t\t\t * Cannot get elements with the same id for an attribute element without id.\n\t\t\t *\n\t\t\t * @error attribute-element-get-elements-with-same-id-no-id\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'attribute-element-get-elements-with-same-id-no-id: ' +\n\t\t\t\t'Cannot get elements with the same id for an attribute element without id.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn new Set( this._clonesGroup );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tattributeElement.is( 'attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'element' ); // -> true\n\t *\t\tattributeElement.is( 'node' ); // -> true\n\t *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'view:element' ); // -> true\n\t *\t\tattributeElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tattributeElement.is( 'model:element' ); // -> false\n\t *\t\tattributeElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an attribute element, you can also check its\n\t * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n\t *\n\t *\t\tattributeElement.is( 'b' ); // -> true if this is a bold element\n\t *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n\t *\t\ttext.is( 'b' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'attributeElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'attributeElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t *\n\t * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n\t * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n\t * different set of children nodes.\n\t *\n\t * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n\t * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n\t * considered similar.\n\t *\n\t * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n\t *\n\t * * two following similar elements can be merged together into one, longer element,\n\t * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n\t * decide whether processed element should be unwrapped,\n\t * * etc.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\t// If any element has an `id` set, just compare the ids.\n\t\tif ( this.id !== null || otherElement.id !== null ) {\n\t\t\treturn this.id === otherElement.id;\n\t\t}\n\n\t\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\n\t}\n\n\t/**\n\t * Clones provided element with priority.\n\t *\n\t * @protected\n\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n\t */\n\t_clone( deep ) {\n\t\tconst cloned = super._clone( deep );\n\n\t\t// Clone priority too.\n\t\tcloned._priority = this._priority;\n\n\t\t// And id too.\n\t\tcloned._id = this._id;\n\n\t\treturn cloned;\n\t}\n}\n\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\t// <b>foo</b> does not need filler.\n\tif ( nonUiChildrenCount( this ) ) {\n\t\treturn null;\n\t}\n\n\tlet element = this.parent;\n\n\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\n\twhile ( element && element.is( 'attributeElement' ) ) {\n\t\tif ( nonUiChildrenCount( element ) > 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\n\t\treturn null;\n\t}\n\n\t// Render block filler at the end of element (after all ui elements).\n\treturn this.childCount;\n}\n\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount( element ) {\n\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\n}\n"]}]}