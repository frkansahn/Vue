{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\command.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\command.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIwLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGNvcmUvY29tbWFuZAogKi8KaW1wb3J0IE9ic2VydmFibGVNaXhpbiBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9vYnNlcnZhYmxlbWl4aW4nOwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7Ci8qKgogKiBUaGUgYmFzZSBjbGFzcyBmb3IgQ0tFZGl0b3IgY29tbWFuZHMuCiAqCiAqIENvbW1hbmRzIGFyZSB0aGUgbWFpbiB3YXkgdG8gbWFuaXB1bGF0ZSBlZGl0b3IgY29udGVudHMgYW5kIHN0YXRlLiBUaGV5IGFyZSBtb3N0bHkgdXNlZCBieSBVSSBlbGVtZW50cyAob3IgYnkgb3RoZXIKICogY29tbWFuZHMpIHRvIG1ha2UgY2hhbmdlcyBpbiB0aGUgbW9kZWwuIENvbW1hbmRzIGFyZSBhdmFpbGFibGUgaW4gZXZlcnkgcGFydCBvZiBjb2RlIHRoYXQgaGFzIGFjY2VzcyB0bwogKiB0aGUge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yIGVkaXRvcn0gaW5zdGFuY2UuCiAqCiAqIEluc3RhbmNlcyBvZiByZWdpc3RlcmVkIGNvbW1hbmRzIGNhbiBiZSByZXRyaWV2ZWQgZnJvbSB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3IjY29tbWFuZHMgYGVkaXRvci5jb21tYW5kc2B9LgogKiBUaGUgZWFzaWVzdCB3YXkgdG8gZXhlY3V0ZSBhIGNvbW1hbmQgaXMgdGhyb3VnaCB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3IjZXhlY3V0ZSBgZWRpdG9yLmV4ZWN1dGUoKWB9LgogKgogKiBCeSBkZWZhdWx0IGNvbW1hbmRzIGFyZSBkaXNhYmxlZCB3aGVuIHRoZSBlZGl0b3IgaXMgaW4ge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yI2lzUmVhZE9ubHkgcmVhZC1vbmx5fSBtb2RlLgogKgogKiBAbWl4ZXMgbW9kdWxlOnV0aWxzL29ic2VydmFibGVtaXhpbn5PYnNlcnZhYmxlTWl4aW4KICovCgp2YXIgQ29tbWFuZCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIC8qKgogICAqIENyZWF0ZXMgYSBuZXcgYENvbW1hbmRgIGluc3RhbmNlLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcn0gZWRpdG9yIEVkaXRvciBvbiB3aGljaCB0aGlzIGNvbW1hbmQgd2lsbCBiZSB1c2VkLgogICAqLwogIGZ1bmN0aW9uIENvbW1hbmQoZWRpdG9yKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21tYW5kKTsKCiAgICAvKioKICAgICAqIFRoZSBlZGl0b3Igb24gd2hpY2ggdGhpcyBjb21tYW5kIHdpbGwgYmUgdXNlZC4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge21vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yfQogICAgICovCiAgICB0aGlzLmVkaXRvciA9IGVkaXRvcjsKICAgIC8qKgogICAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21tYW5kLiBBIGNvbmNyZXRlIGNvbW1hbmQgY2xhc3Mgc2hvdWxkIGRlZmluZSB3aGF0IGl0IHJlcHJlc2VudHMgZm9yIGl0LgogICAgICoKICAgICAqIEZvciBleGFtcGxlLCB0aGUgYCdib2xkJ2AgY29tbWFuZCdzIHZhbHVlIGluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gc3RhcnRzIGluIGEgYm9sZGVkIHRleHQuCiAgICAgKiBBbmQgdGhlIHZhbHVlIG9mIHRoZSBgJ2xpbmsnYCBjb21tYW5kIG1heSBiZSBhbiBvYmplY3Qgd2l0aCBsaW5rcyBkZXRhaWxzLgogICAgICoKICAgICAqIEl0IGlzIHBvc3NpYmxlIGZvciBhIGNvbW1hbmQgdG8gaGF2ZSBubyB2YWx1ZSAoZS5nLiBmb3Igc3RhdGVsZXNzIGFjdGlvbnMgc3VjaCBhcyBgJ2ltYWdlVXBsb2FkJ2ApLgogICAgICoKICAgICAqIEEgY29uY3JldGUgY29tbWFuZCBjbGFzcyBzaG91bGQgY29udHJvbCB0aGlzIHZhbHVlIGJ5IG92ZXJyaWRpbmcgdGhlIHtAbGluayAjcmVmcmVzaCBgcmVmcmVzaCgpYH0gbWV0aG9kLgogICAgICoKICAgICAqIEBvYnNlcnZhYmxlCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIgI3ZhbHVlCiAgICAgKi8KCiAgICB0aGlzLnNldCgndmFsdWUnLCB1bmRlZmluZWQpOwogICAgLyoqCiAgICAgKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciBhIGNvbW1hbmQgaXMgZW5hYmxlZCBvciBkaXNhYmxlZC4KICAgICAqIEEgZGlzYWJsZWQgY29tbWFuZCB3aWxsIGRvIG5vdGhpbmcgd2hlbiBleGVjdXRlZC4KICAgICAqCiAgICAgKiBBIGNvbmNyZXRlIGNvbW1hbmQgY2xhc3Mgc2hvdWxkIGNvbnRyb2wgdGhpcyB2YWx1ZSBieSBvdmVycmlkaW5nIHRoZSB7QGxpbmsgI3JlZnJlc2ggYHJlZnJlc2goKWB9IG1ldGhvZC4KICAgICAqCiAgICAgKiBJdCBpcyBwb3NzaWJsZSB0byBkaXNhYmxlIGEgY29tbWFuZCBmcm9tICJvdXRzaWRlIi4gRm9yIGluc3RhbmNlLCBpbiB5b3VyIGludGVncmF0aW9uIHlvdSBtYXkgd2FudCB0byBkaXNhYmxlCiAgICAgKiBhIGNlcnRhaW4gc2V0IG9mIGNvbW1hbmRzIGZvciB0aGUgdGltZSBiZWluZy4gVG8gZG8gdGhhdCwgeW91IGNhbiB1c2UgdGhlIGZhY3QgdGhhdCBgaXNFbmFibGVkYCBpcyBvYnNlcnZhYmxlCiAgICAgKiBhbmQgaXQgZmlyZXMgdGhlIGBzZXQ6aXNFbmFibGVkYCBldmVudCBldmVyeSB0aW1lIGFueW9uZSB0cmllcyB0byBtb2RpZnkgaXRzIHZhbHVlOgogICAgICoKICAgICAqCQlmdW5jdGlvbiBkaXNhYmxlQ29tbWFuZCggY21kICkgewogICAgICoJCQljbWQub24oICdzZXQ6aXNFbmFibGVkJywgZm9yY2VEaXNhYmxlLCB7IHByaW9yaXR5OiAnaGlnaGVzdCcgfSApOwogICAgICoKICAgICAqCQkJY21kLmlzRW5hYmxlZCA9IGZhbHNlOwogICAgICoKICAgICAqCQkJLy8gTWFrZSBpdCBwb3NzaWJsZSB0byBlbmFibGUgdGhlIGNvbW1hbmQgYWdhaW4uCiAgICAgKgkJCXJldHVybiAoKSA9PiB7CiAgICAgKgkJCQljbWQub2ZmKCAnc2V0OmlzRW5hYmxlZCcsIGZvcmNlRGlzYWJsZSApOwogICAgICoJCQkJY21kLnJlZnJlc2goKTsKICAgICAqCQkJfTsKICAgICAqCiAgICAgKgkJCWZ1bmN0aW9uIGZvcmNlRGlzYWJsZSggZXZ0ICkgewogICAgICoJCQkJZXZ0LnJldHVybiA9IGZhbHNlOwogICAgICoJCQkJZXZ0LnN0b3AoKTsKICAgICAqCQkJfQogICAgICoJCX0KICAgICAqCiAgICAgKgkJLy8gVXNhZ2U6CiAgICAgKgogICAgICoJCS8vIERpc2FibGluZyB0aGUgY29tbWFuZC4KICAgICAqCQljb25zdCBlbmFibGVCb2xkID0gZGlzYWJsZUNvbW1hbmQoIGVkaXRvci5jb21tYW5kcy5nZXQoICdib2xkJyApICk7CiAgICAgKgogICAgICoJCS8vIEVuYWJsaW5nIHRoZSBjb21tYW5kIGFnYWluLgogICAgICoJCWVuYWJsZUJvbGQoKTsKICAgICAqCiAgICAgKiBAb2JzZXJ2YWJsZQogICAgICogQHJlYWRvbmx5CiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSAjaXNFbmFibGVkCiAgICAgKi8KCiAgICB0aGlzLnNldCgnaXNFbmFibGVkJywgZmFsc2UpOwogICAgLyoqCiAgICAgKiBIb2xkcyBpZGVudGlmaWVycyBmb3Ige0BsaW5rICNmb3JjZURpc2FibGVkfSBtZWNoYW5pc20uCiAgICAgKgogICAgICogQHR5cGUge1NldC48U3RyaW5nPn0KICAgICAqIEBwcml2YXRlCiAgICAgKi8KCiAgICB0aGlzLl9kaXNhYmxlU3RhY2sgPSBuZXcgU2V0KCk7CiAgICB0aGlzLmRlY29yYXRlKCdleGVjdXRlJyk7IC8vIEJ5IGRlZmF1bHQgZXZlcnkgY29tbWFuZCBpcyByZWZyZXNoZWQgd2hlbiBjaGFuZ2VzIGFyZSBhcHBsaWVkIHRvIHRoZSBtb2RlbC4KCiAgICB0aGlzLmxpc3RlblRvKHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LCAnY2hhbmdlJywgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5yZWZyZXNoKCk7CiAgICB9KTsKICAgIHRoaXMub24oJ2V4ZWN1dGUnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgIGlmICghX3RoaXMuaXNFbmFibGVkKSB7CiAgICAgICAgZXZ0LnN0b3AoKTsKICAgICAgfQogICAgfSwgewogICAgICBwcmlvcml0eTogJ2hpZ2gnCiAgICB9KTsgLy8gQnkgZGVmYXVsdCBjb21tYW5kcyBhcmUgZGlzYWJsZWQgd2hlbiB0aGUgZWRpdG9yIGlzIGluIHJlYWQtb25seSBtb2RlLgoKICAgIHRoaXMubGlzdGVuVG8oZWRpdG9yLCAnY2hhbmdlOmlzUmVhZE9ubHknLCBmdW5jdGlvbiAoZXZ0LCBuYW1lLCB2YWx1ZSkgewogICAgICBpZiAodmFsdWUpIHsKICAgICAgICBfdGhpcy5mb3JjZURpc2FibGVkKCdyZWFkT25seU1vZGUnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBfdGhpcy5jbGVhckZvcmNlRGlzYWJsZWQoJ3JlYWRPbmx5TW9kZScpOwogICAgICB9CiAgICB9KTsKICB9CiAgLyoqCiAgICogUmVmcmVzaGVzIHRoZSBjb21tYW5kLiBUaGUgY29tbWFuZCBzaG91bGQgdXBkYXRlIGl0cyB7QGxpbmsgI2lzRW5hYmxlZH0gYW5kIHtAbGluayAjdmFsdWV9IHByb3BlcnRpZXMKICAgKiBpbiB0aGlzIG1ldGhvZC4KICAgKgogICAqIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIHdoZW4KICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudCNldmVudDpjaGFuZ2UgYW55IGNoYW5nZXMgYXJlIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50fS4KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhDb21tYW5kLCBbewogICAga2V5OiAicmVmcmVzaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaCgpIHsKICAgICAgdGhpcy5pc0VuYWJsZWQgPSB0cnVlOwogICAgfQogICAgLyoqCiAgICAgKiBEaXNhYmxlcyB0aGUgY29tbWFuZC4KICAgICAqCiAgICAgKiBDb21tYW5kIG1heSBiZSBkaXNhYmxlZCBieSBtdWx0aXBsZSBmZWF0dXJlcyBvciBhbGdvcml0aG1zIChhdCBvbmNlKS4gV2hlbiBkaXNhYmxpbmcgYSBjb21tYW5kLCB1bmlxdWUgaWQgc2hvdWxkIGJlIHBhc3NlZAogICAgICogKGUuZy4gZmVhdHVyZSBuYW1lKS4gVGhlIHNhbWUgaWRlbnRpZmllciBzaG91bGQgYmUgdXNlZCB3aGVuIHtAbGluayAjY2xlYXJGb3JjZURpc2FibGVkIGVuYWJsaW5nIGJhY2t9IHRoZSBjb21tYW5kLgogICAgICogVGhlIGNvbW1hbmQgYmVjb21lcyBlbmFibGVkIG9ubHkgYWZ0ZXIgYWxsIGZlYXR1cmVzIHtAbGluayAjY2xlYXJGb3JjZURpc2FibGVkIGVuYWJsZWQgaXQgYmFja30uCiAgICAgKgogICAgICogRGlzYWJsaW5nIGFuZCBlbmFibGluZyBhIGNvbW1hbmQ6CiAgICAgKgogICAgICoJCWNvbW1hbmQuaXNFbmFibGVkOyAvLyAtPiB0cnVlCiAgICAgKgkJY29tbWFuZC5mb3JjZURpc2FibGVkKCAnTXlGZWF0dXJlJyApOwogICAgICoJCWNvbW1hbmQuaXNFbmFibGVkOyAvLyAtPiBmYWxzZQogICAgICoJCWNvbW1hbmQuY2xlYXJGb3JjZURpc2FibGVkKCAnTXlGZWF0dXJlJyApOwogICAgICoJCWNvbW1hbmQuaXNFbmFibGVkOyAvLyAtPiB0cnVlCiAgICAgKgogICAgICogQ29tbWFuZCBkaXNhYmxlZCBieSBtdWx0aXBsZSBmZWF0dXJlczoKICAgICAqCiAgICAgKgkJY29tbWFuZC5mb3JjZURpc2FibGVkKCAnTXlGZWF0dXJlJyApOwogICAgICoJCWNvbW1hbmQuZm9yY2VEaXNhYmxlZCggJ090aGVyRmVhdHVyZScgKTsKICAgICAqCQljb21tYW5kLmNsZWFyRm9yY2VEaXNhYmxlZCggJ015RmVhdHVyZScgKTsKICAgICAqCQljb21tYW5kLmlzRW5hYmxlZDsgLy8gLT4gZmFsc2UKICAgICAqCQljb21tYW5kLmNsZWFyRm9yY2VEaXNhYmxlZCggJ090aGVyRmVhdHVyZScgKTsKICAgICAqCQljb21tYW5kLmlzRW5hYmxlZDsgLy8gLT4gdHJ1ZQogICAgICoKICAgICAqIE11bHRpcGxlIGRpc2FibGluZyB3aXRoIHRoZSBzYW1lIGlkZW50aWZpZXIgaXMgcmVkdW5kYW50OgogICAgICoKICAgICAqCQljb21tYW5kLmZvcmNlRGlzYWJsZWQoICdNeUZlYXR1cmUnICk7CiAgICAgKgkJY29tbWFuZC5mb3JjZURpc2FibGVkKCAnTXlGZWF0dXJlJyApOwogICAgICoJCWNvbW1hbmQuY2xlYXJGb3JjZURpc2FibGVkKCAnTXlGZWF0dXJlJyApOwogICAgICoJCWNvbW1hbmQuaXNFbmFibGVkOyAvLyAtPiB0cnVlCiAgICAgKgogICAgICogKipOb3RlOioqIHNvbWUgY29tbWFuZHMgb3IgYWxnb3JpdGhtcyBtYXkgaGF2ZSBtb3JlIGNvbXBsZXggbG9naWMgd2hlbiBpdCBjb21lcyB0byBlbmFibGluZyBvciBkaXNhYmxpbmcgY2VydGFpbiBjb21tYW5kcywKICAgICAqIHNvIHRoZSBjb21tYW5kIG1pZ2h0IGJlIHN0aWxsIGRpc2FibGVkIGFmdGVyIHtAbGluayAjY2xlYXJGb3JjZURpc2FibGVkfSB3YXMgdXNlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgVW5pcXVlIGlkZW50aWZpZXIgZm9yIGRpc2FibGluZy4gVXNlIHRoZSBzYW1lIGlkIHdoZW4ge0BsaW5rICNjbGVhckZvcmNlRGlzYWJsZWQgZW5hYmxpbmcgYmFja30gdGhlIGNvbW1hbmQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZm9yY2VEaXNhYmxlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yY2VEaXNhYmxlZChpZCkgewogICAgICB0aGlzLl9kaXNhYmxlU3RhY2suYWRkKGlkKTsKCiAgICAgIGlmICh0aGlzLl9kaXNhYmxlU3RhY2suc2l6ZSA9PSAxKSB7CiAgICAgICAgdGhpcy5vbignc2V0OmlzRW5hYmxlZCcsIGZvcmNlRGlzYWJsZSwgewogICAgICAgICAgcHJpb3JpdHk6ICdoaWdoZXN0JwogICAgICAgIH0pOwogICAgICAgIHRoaXMuaXNFbmFibGVkID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogQ2xlYXJzIGZvcmNlZCBkaXNhYmxlIHByZXZpb3VzbHkgc2V0IHRocm91Z2gge0BsaW5rICNmb3JjZURpc2FibGVkfS4gU2VlIHtAbGluayAjZm9yY2VEaXNhYmxlZH0uCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIFVuaXF1ZSBpZGVudGlmaWVyLCBlcXVhbCB0byB0aGUgb25lIHBhc3NlZCBpbiB7QGxpbmsgI2ZvcmNlRGlzYWJsZWR9IGNhbGwuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY2xlYXJGb3JjZURpc2FibGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckZvcmNlRGlzYWJsZWQoaWQpIHsKICAgICAgdGhpcy5fZGlzYWJsZVN0YWNrLmRlbGV0ZShpZCk7CgogICAgICBpZiAodGhpcy5fZGlzYWJsZVN0YWNrLnNpemUgPT0gMCkgewogICAgICAgIHRoaXMub2ZmKCdzZXQ6aXNFbmFibGVkJywgZm9yY2VEaXNhYmxlKTsKICAgICAgICB0aGlzLnJlZnJlc2goKTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBFeGVjdXRlcyB0aGUgY29tbWFuZC4KICAgICAqCiAgICAgKiBBIGNvbW1hbmQgbWF5IGFjY2VwdCBwYXJhbWV0ZXJzLiBUaGV5IHdpbGwgYmUgcGFzc2VkIGZyb20ge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yI2V4ZWN1dGUgYGVkaXRvci5leGVjdXRlKClgfQogICAgICogdG8gdGhlIGNvbW1hbmQuCiAgICAgKgogICAgICogVGhlIGBleGVjdXRlKClgIG1ldGhvZCB3aWxsIGF1dG9tYXRpY2FsbHkgYWJvcnQgd2hlbiB0aGUgY29tbWFuZCBpcyBkaXNhYmxlZCAoe0BsaW5rICNpc0VuYWJsZWR9IGlzIGBmYWxzZWApLgogICAgICogVGhpcyBiZWhhdmlvciBpcyBpbXBsZW1lbnRlZCBieSBhIGhpZ2ggcHJpb3JpdHkgbGlzdGVuZXIgdG8gdGhlIHtAbGluayAjZXZlbnQ6ZXhlY3V0ZX0gZXZlbnQuCiAgICAgKgogICAgICogSW4gb3JkZXIgdG8gc2VlIGhvdyB0byBkaXNhYmxlIGEgY29tbWFuZCBmcm9tICJvdXRzaWRlIiBzZWUgdGhlIHtAbGluayAjaXNFbmFibGVkfSBkb2N1bWVudGF0aW9uLgogICAgICoKICAgICAqIEBmaXJlcyBleGVjdXRlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZXhlY3V0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZSgpIHt9CiAgICAvKioKICAgICAqIERlc3Ryb3lzIHRoZSBjb21tYW5kLgogICAgICovCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpOwogICAgfQogICAgLyoqCiAgICAgKiBFdmVudCBmaXJlZCBieSB0aGUge0BsaW5rICNleGVjdXRlfSBtZXRob2QuIFRoZSBjb21tYW5kIGFjdGlvbiBpcyBhIGxpc3RlbmVyIHRvIHRoaXMgZXZlbnQgc28gaXQncwogICAgICogcG9zc2libGUgdG8gY2hhbmdlL2NhbmNlbCB0aGUgYmVoYXZpb3Igb2YgdGhlIGNvbW1hbmQgYnkgbGlzdGVuaW5nIHRvIHRoaXMgZXZlbnQuCiAgICAgKgogICAgICogU2VlIHtAbGluayBtb2R1bGU6dXRpbHMvb2JzZXJ2YWJsZW1peGlufk9ic2VydmFibGVNaXhpbiNkZWNvcmF0ZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIHNhbXBsZXMuCiAgICAgKgogICAgICogKipOb3RlOioqIFRoaXMgZXZlbnQgaXMgZmlyZWQgZXZlbiBpZiBjb21tYW5kIGlzIGRpc2FibGVkLiBIb3dldmVyLCBpdCBpcyBhdXRvbWF0aWNhbGx5IGJsb2NrZWQKICAgICAqIGJ5IGEgaGlnaCBwcmlvcml0eSBsaXN0ZW5lciBpbiBvcmRlciB0byBwcmV2ZW50IGNvbW1hbmQgZXhlY3V0aW9uLgogICAgICoKICAgICAqIEBldmVudCBleGVjdXRlCiAgICAgKi8KCiAgfV0pOwoKICByZXR1cm4gQ29tbWFuZDsKfSgpOwoKZXhwb3J0IHsgQ29tbWFuZCBhcyBkZWZhdWx0IH07Cm1peChDb21tYW5kLCBPYnNlcnZhYmxlTWl4aW4pOyAvLyBIZWxwZXIgZnVuY3Rpb24gdGhhdCBmb3JjZXMgY29tbWFuZCB0byBiZSBkaXNhYmxlZC4KCmZ1bmN0aW9uIGZvcmNlRGlzYWJsZShldnQpIHsKICBldnQucmV0dXJuID0gZmFsc2U7CiAgZXZ0LnN0b3AoKTsKfQ=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-core/src/command.js"],"names":["ObservableMixin","mix","Command","editor","set","undefined","_disableStack","Set","decorate","listenTo","model","document","refresh","on","evt","isEnabled","stop","priority","name","value","forceDisabled","clearForceDisabled","id","add","size","forceDisable","delete","off","stopListening","return"],"mappings":";;;;;;;AAAA;;;;;AAKA;;;AAIA,OAAOA,eAAP,MAA4B,+CAA5B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA;;;;;;;;;;;;;;;IAcqBC,O;;;AACpB;;;;;AAKA,mBAAaC,MAAb,EAAsB;AAAA;;AAAA;;AACrB;;;;;;AAMA,SAAKA,MAAL,GAAcA,MAAd;AAEA;;;;;;;;;;;;;;;AAcA,SAAKC,GAAL,CAAU,OAAV,EAAmBC,SAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAAKD,GAAL,CAAU,WAAV,EAAuB,KAAvB;AAEA;;;;;;;AAMA,SAAKE,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AAEA,SAAKC,QAAL,CAAe,SAAf,EA1EqB,CA4ErB;;AACA,SAAKC,QAAL,CAAe,KAAKN,MAAL,CAAYO,KAAZ,CAAkBC,QAAjC,EAA2C,QAA3C,EAAqD,YAAM;AAC1D,MAAA,KAAI,CAACC,OAAL;AACA,KAFD;AAIA,SAAKC,EAAL,CAAS,SAAT,EAAoB,UAAAC,GAAG,EAAI;AAC1B,UAAK,CAAC,KAAI,CAACC,SAAX,EAAuB;AACtBD,QAAAA,GAAG,CAACE,IAAJ;AACA;AACD,KAJD,EAIG;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAJH,EAjFqB,CAuFrB;;AACA,SAAKR,QAAL,CAAeN,MAAf,EAAuB,mBAAvB,EAA4C,UAAEW,GAAF,EAAOI,IAAP,EAAaC,KAAb,EAAwB;AACnE,UAAKA,KAAL,EAAa;AACZ,QAAA,KAAI,CAACC,aAAL,CAAoB,cAApB;AACA,OAFD,MAEO;AACN,QAAA,KAAI,CAACC,kBAAL,CAAyB,cAAzB;AACA;AACD,KAND;AAOA;AAED;;;;;;;;;;;8BAOU;AACT,WAAKN,SAAL,GAAiB,IAAjB;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAoCeO,E,EAAK;AACnB,WAAKhB,aAAL,CAAmBiB,GAAnB,CAAwBD,EAAxB;;AAEA,UAAK,KAAKhB,aAAL,CAAmBkB,IAAnB,IAA2B,CAAhC,EAAoC;AACnC,aAAKX,EAAL,CAAS,eAAT,EAA0BY,YAA1B,EAAwC;AAAER,UAAAA,QAAQ,EAAE;AAAZ,SAAxC;AACA,aAAKF,SAAL,GAAiB,KAAjB;AACA;AACD;AAED;;;;;;;;uCAKoBO,E,EAAK;AACxB,WAAKhB,aAAL,CAAmBoB,MAAnB,CAA2BJ,EAA3B;;AAEA,UAAK,KAAKhB,aAAL,CAAmBkB,IAAnB,IAA2B,CAAhC,EAAoC;AACnC,aAAKG,GAAL,CAAU,eAAV,EAA2BF,YAA3B;AACA,aAAKb,OAAL;AACA;AACD;AAED;;;;;;;;;;;;;;;;8BAaU,CAAE;AAEZ;;;;;;8BAGU;AACT,WAAKgB,aAAL;AACA;AAED;;;;;;;;;;;;;;;;;SAnMoB1B,O;AAgNrBD,GAAG,CAAEC,OAAF,EAAWF,eAAX,CAAH,C,CAEA;;AACA,SAASyB,YAAT,CAAuBX,GAAvB,EAA6B;AAC5BA,EAAAA,GAAG,CAACe,MAAJ,GAAa,KAAb;AACAf,EAAAA,GAAG,CAACE,IAAJ;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/command\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Command {\n\t/**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor on which this command will be used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The value of the command. A concrete command class should define what it represents for it.\n\t\t *\n\t\t * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n\t\t * And the value of the `'link'` command may be an object with links details.\n\t\t *\n\t\t * It is possible for a command to have no value (e.g. for stateless actions such as `'imageUpload'`).\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member #value\n\t\t */\n\t\tthis.set( 'value', undefined );\n\n\t\t/**\n\t\t * Flag indicating whether a command is enabled or disabled.\n\t\t * A disabled command will do nothing when executed.\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n\t\t * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n\t\t * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n\t\t *\n\t\t *\t\tfunction disableCommand( cmd ) {\n\t\t *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t *\n\t\t *\t\t\tcmd.isEnabled = false;\n\t\t *\n\t\t *\t\t\t// Make it possible to enable the command again.\n\t\t *\t\t\treturn () => {\n\t\t *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n\t\t *\t\t\t\tcmd.refresh();\n\t\t *\t\t\t};\n\t\t *\n\t\t *\t\t\tfunction forceDisable( evt ) {\n\t\t *\t\t\t\tevt.return = false;\n\t\t *\t\t\t\tevt.stop();\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\t// Usage:\n\t\t *\n\t\t *\t\t// Disabling the command.\n\t\t *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n\t\t *\n\t\t *\t\t// Enabling the command again.\n\t\t *\t\tenableBold();\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', false );\n\n\t\t/**\n\t\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t\t *\n\t\t * @type {Set.<String>}\n\t\t * @private\n\t\t */\n\t\tthis._disableStack = new Set();\n\n\t\tthis.decorate( 'execute' );\n\n\t\t// By default every command is refreshed when changes are applied to the model.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => {\n\t\t\tthis.refresh();\n\t\t} );\n\n\t\tthis.on( 'execute', evt => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// By default commands are disabled when the editor is in read-only mode.\n\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\n\t\t\tif ( value ) {\n\t\t\t\tthis.forceDisabled( 'readOnlyMode' );\n\t\t\t} else {\n\t\t\t\tthis.clearForceDisabled( 'readOnlyMode' );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */\n\trefresh() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the command.\n\t *\n\t * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n\t * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n\t * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a command:\n\t *\n\t *\t\tcommand.isEnabled; // -> true\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Command disabled by multiple features:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'OtherFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'OtherFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n\t * so the command might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n\t */\n\tforceDisabled( id ) {\n\t\tthis._disableStack.add( id );\n\n\t\tif ( this._disableStack.size == 1 ) {\n\t\t\tthis.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n\t *\n\t * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */\n\tclearForceDisabled( id ) {\n\t\tthis._disableStack.delete( id );\n\n\t\tif ( this._disableStack.size == 0 ) {\n\t\t\tthis.off( 'set:isEnabled', forceDisable );\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n\t *\n\t * @fires execute\n\t */\n\texecute() {}\n\n\t/**\n\t * Destroys the command.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n\t * possible to change/cancel the behavior of the command by listening to this event.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n\t * by a high priority listener in order to prevent command execution.\n\t *\n\t * @event execute\n\t */\n}\n\nmix( Command, ObservableMixin );\n\n// Helper function that forces command to be disabled.\nfunction forceDisable( evt ) {\n\tevt.return = false;\n\tevt.stop();\n}\n"]}]}