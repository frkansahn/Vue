{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\text.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\text.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI7CmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfZ2V0IGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0IjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSBlbmdpbmUvdmlldy90ZXh0CiAqLwppbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnOwovKioKICogVHJlZSB2aWV3IHRleHQgbm9kZS4KICoKICogVGhlIGNvbnN0cnVjdG9yIG9mIHRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5LiBUbyBjcmVhdGUgYSBuZXcgdGV4dCBub2RlIGluc3RhbmNlCiAqIHVzZSB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlciNjcmVhdGVUZXh0IGBEb3duY2FzdFdyaXRlciNjcmVhdGVUZXh0KClgfQogKiBtZXRob2Qgd2hlbiB3b3JraW5nIG9uIGRhdGEgZG93bmNhc3RlZCBmcm9tIHRoZSBtb2RlbCBvciB0aGUKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy91cGNhc3R3cml0ZXJ+VXBjYXN0V3JpdGVyI2NyZWF0ZVRleHQgYFVwY2FzdFdyaXRlciNjcmVhdGVUZXh0KClgfQogKiBtZXRob2Qgd2hlbiB3b3JraW5nIG9uIG5vbi1zZW1hbnRpYyB2aWV3cy4KICoKICogQGV4dGVuZHMgbW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZQogKi8KCnZhciBUZXh0ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX05vZGUpIHsKICBfaW5oZXJpdHMoVGV4dCwgX05vZGUpOwoKICAvKioKICAgKiBDcmVhdGVzIGEgdHJlZSB2aWV3IHRleHQgbm9kZS4KICAgKgogICAqIEBwcm90ZWN0ZWQKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5Eb2N1bWVudH0gZG9jdW1lbnQgVGhlIGRvY3VtZW50IGluc3RhbmNlIHRvIHdoaWNoIHRoaXMgdGV4dCBub2RlIGJlbG9uZ3MuCiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgVGhlIHRleHQncyBkYXRhLgogICAqLwogIGZ1bmN0aW9uIFRleHQoZG9jdW1lbnQsIGRhdGEpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dCk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGV4dCkuY2FsbCh0aGlzLCBkb2N1bWVudCkpOwogICAgLyoqCiAgICAgKiBUaGUgdGV4dCBjb250ZW50LgogICAgICoKICAgICAqIFNldHRpbmcgdGhlIGRhdGEgZmlyZXMgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlI2V2ZW50OmNoYW5nZTp0ZXh0IGNoYW5nZSBldmVudH0uCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQG1lbWJlciB7U3RyaW5nfSBtb2R1bGU6ZW5naW5lL3ZpZXcvdGV4dH5UZXh0I190ZXh0RGF0YQogICAgICovCgogICAgX3RoaXMuX3RleHREYXRhID0gZGF0YTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgLyoqCiAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyBvYmplY3QgaXMgb2YgdGhlIGdpdmVuIHR5cGUuCiAgICoKICAgKgkJdGV4dC5pcyggJ3RleHQnICk7IC8vIC0+IHRydWUKICAgKgkJdGV4dC5pcyggJ25vZGUnICk7IC8vIC0+IHRydWUKICAgKgkJdGV4dC5pcyggJ3ZpZXc6dGV4dCcgKTsgLy8gLT4gdHJ1ZQogICAqCQl0ZXh0LmlzKCAndmlldzpub2RlJyApOyAvLyAtPiB0cnVlCiAgICoKICAgKgkJdGV4dC5pcyggJ21vZGVsOnRleHQnICk7IC8vIC0+IGZhbHNlCiAgICoJCXRleHQuaXMoICdlbGVtZW50JyApOyAvLyAtPiBmYWxzZQogICAqCQl0ZXh0LmlzKCAncmFuZ2UnICk7IC8vIC0+IGZhbHNlCiAgICoKICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZSNpcyBDaGVjayB0aGUgZW50aXJlIGxpc3Qgb2YgdmlldyBvYmplY3RzfSB3aGljaCBpbXBsZW1lbnQgdGhlIGBpcygpYCBtZXRob2QuCiAgICoKICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAqIEByZXR1cm5zIHtCb29sZWFufQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFRleHQsIFt7CiAgICBrZXk6ICJpcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXModHlwZSkgewogICAgICByZXR1cm4gdHlwZSA9PSAndGV4dCcgfHwgdHlwZSA9PSAndmlldzp0ZXh0JyB8fCBfZ2V0KF9nZXRQcm90b3R5cGVPZihUZXh0LnByb3RvdHlwZSksICJpcyIsIHRoaXMpLmNhbGwodGhpcywgdHlwZSk7CiAgICB9CiAgICAvKioKICAgICAqIFRoZSB0ZXh0IGNvbnRlbnQuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogImlzU2ltaWxhciIsCgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgdGhpcyB0ZXh0IG5vZGUgaXMgc2ltaWxhciB0byBvdGhlciB0ZXh0IG5vZGUuCiAgICAgKiBCb3RoIG5vZGVzIHNob3VsZCBoYXZlIHRoZSBzYW1lIGRhdGEgdG8gYmUgY29uc2lkZXJlZCBhcyBzaW1pbGFyLgogICAgICoKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L3RleHR+VGV4dH0gb3RoZXJOb2RlIE5vZGUgdG8gY2hlY2sgaWYgaXQgaXMgc2FtZSBhcyB0aGlzIG5vZGUuCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGlzU2ltaWxhcihvdGhlck5vZGUpIHsKICAgICAgaWYgKCEob3RoZXJOb2RlIGluc3RhbmNlb2YgVGV4dCkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzID09PSBvdGhlck5vZGUgfHwgdGhpcy5kYXRhID09PSBvdGhlck5vZGUuZGF0YTsKICAgIH0KICAgIC8qKgogICAgICogQ2xvbmVzIHRoaXMgbm9kZS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L3RleHR+VGV4dH0gVGV4dCBub2RlIHRoYXQgaXMgYSBjbG9uZSBvZiB0aGlzIG5vZGUuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2Nsb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xvbmUoKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dCh0aGlzLmRvY3VtZW50LCB0aGlzLmRhdGEpOwogICAgfSAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIHRvU3RyaW5nKCkgewogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyAJcmV0dXJuIGAjJHsgdGhpcy5kYXRhIH1gOwogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIGxvZygpIHsKICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnNvbGUubG9nKCAnVmlld1RleHQ6ICcgKyB0aGlzICk7CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIH0KICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gbG9nRXh0ZW5kZWQoKSB7CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIAljb25zb2xlLmxvZyggJ1ZpZXdUZXh0OiAnICsgdGhpcyApOwogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CgogIH0sIHsKICAgIGtleTogImRhdGEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl90ZXh0RGF0YTsKICAgIH0KICAgIC8qKgogICAgICogVGhpcyBnZXR0ZXIgaXMgcmVxdWlyZWQgd2hlbiB1c2luZyB0aGUgYWRkaXRpb24gYXNzaWdubWVudCBvcGVyYXRvciBvbiBwcm90ZWN0ZWQgcHJvcGVydHk6CiAgICAgKgogICAgICoJCWNvbnN0IGZvbyA9IGRvd25jYXN0V3JpdGVyLmNyZWF0ZVRleHQoICdmb28nICk7CiAgICAgKgkJY29uc3QgYmFyID0gZG93bmNhc3RXcml0ZXIuY3JlYXRlVGV4dCggJ2JhcicgKTsKICAgICAqCiAgICAgKgkJZm9vLl9kYXRhICs9IGJhci5kYXRhOyAgIC8vIGV4ZWN1dGVzOiBgZm9vLl9kYXRhID0gZm9vLl9kYXRhICsgYmFyLmRhdGFgCiAgICAgKgkJY29uc29sZS5sb2coIGZvby5kYXRhICk7IC8vIHByaW50czogJ2Zvb2JhcicKICAgICAqCiAgICAgKiBJZiB0aGUgcHJvdGVjdGVkIGdldHRlciBkaWRuJ3QgZXhpc3QsIGBmb28uX2RhdGFgIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgIGFuZCByZXN1bHQgb2YgdGhlIG1lcmdlIHdpbGwgYmUgaW52YWxpZC4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogIl9kYXRhIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5kYXRhOwogICAgfQogICAgLyoqCiAgICAgKiBTZXRzIGRhdGEgYW5kIGZpcmVzIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZSNldmVudDpjaGFuZ2U6dGV4dCBjaGFuZ2UgZXZlbnR9LgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBmaXJlcyBjaGFuZ2U6dGV4dAogICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgTmV3IGRhdGEgZm9yIHRoZSB0ZXh0IG5vZGUuCiAgICAgKi8KICAgICwKICAgIHNldDogZnVuY3Rpb24gc2V0KGRhdGEpIHsKICAgICAgdGhpcy5fZmlyZUNoYW5nZSgndGV4dCcsIHRoaXMpOwoKICAgICAgdGhpcy5fdGV4dERhdGEgPSBkYXRhOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRleHQ7Cn0oTm9kZSk7CgpleHBvcnQgeyBUZXh0IGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"],"names":["Node","Text","document","data","_textData","type","otherNode","_fireChange"],"mappings":";;;;;;;AAAA;;;;;AAKA;;;AAIA,OAAOA,IAAP,MAAiB,QAAjB;AAEA;;;;;;;;;;;;IAWqBC,I;;;;;AACpB;;;;;;;AAOA,gBAAaC,QAAb,EAAuBC,IAAvB,EAA8B;AAAA;;AAAA;;AAC7B,8EAAOD,QAAP;AAEA;;;;;;;;;AAQA,UAAKE,SAAL,GAAiBD,IAAjB;AAX6B;AAY7B;AAED;;;;;;;;;;;;;;;;;;;;;uBAiBIE,I,EAAO;AACV,aAAOA,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,WAA1B,iEAAmDA,IAAnD,CAAP;AACA;AAED;;;;;;;;;;AAyCA;;;;;;;8BAOWC,S,EAAY;AACtB,UAAK,EAAGA,SAAS,YAAYL,IAAxB,CAAL,EAAsC;AACrC,eAAO,KAAP;AACA;;AAED,aAAO,SAASK,SAAT,IAAsB,KAAKH,IAAL,KAAcG,SAAS,CAACH,IAArD;AACA;AAED;;;;;;;;;6BAMS;AACR,aAAO,IAAIF,IAAJ,CAAU,KAAKC,QAAf,EAAyB,KAAKC,IAA9B,CAAP;AACA,K,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;wBAtEW;AACV,aAAO,KAAKC,SAAZ;AACA;AAED;;;;;;;;;;;;;;;;;wBAcY;AACX,aAAO,KAAKD,IAAZ;AACA;AAED;;;;;;;;sBAOWA,I,EAAO;AACjB,WAAKI,WAAL,CAAkB,MAAlB,EAA0B,IAA1B;;AAEA,WAAKH,SAAL,GAAiBD,IAAjB;AACA;;;;EAlFgCH,I;;SAAbC,I","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this text node belongs.\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( document, data ) {\n\t\tsuper( document );\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'view:text' || super.is( type );\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * This getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @fires change:text\n\t * @param {String} data New data for the text node.\n\t */\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.document, this.data );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}