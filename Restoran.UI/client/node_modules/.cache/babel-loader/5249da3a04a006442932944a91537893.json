{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\position.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\position.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"],"names":["TreeWalker","compareArrays","CKEditorError","EditableElement","Position","parent","offset","shift","shifted","_createAt","skip","options","startPosition","treeWalker","position","is","getAncestors","includeSelf","ancestorsA","ancestorsB","i","type","otherPosition","compareWith","root","isEqual","thisPath","getPath","otherPath","push","result","getChild","endOffset","data","length","childCount","editable","itemOrPosition","node","_createBefore","_createAfter","item","textNode","offsetInText","index"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/position\n */\n\nimport TreeWalker from './treewalker';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n\t * @param {Number} offset Position offset.\n\t */\n\tconstructor( parent, offset ) {\n\t\t/**\n\t\t * Position parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t * module:engine/view/position~Position#parent\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * Position offset.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/position~Position#offset\n\t\t */\n\t\tthis.offset = offset;\n\t}\n\n\t/**\n\t * Node directly after the position. Equals `null` when there is no node after position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset ) || null;\n\t}\n\n\t/**\n\t * Node directly before the position. Equals `null` when there is no node before position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset - 1 ) || null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\tconst endOffset = this.parent.is( 'text' ) ? this.parent.data.length : this.parent.childCount;\n\n\t\treturn this.offset === endOffset;\n\t}\n\n\t/**\n\t * Position's root, that is the root of the position's parent element.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.parent.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n\t * position is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tlet editable = this.parent;\n\n\t\twhile ( !( editable instanceof EditableElement ) ) {\n\t\t\tif ( editable.parent ) {\n\t\t\t\teditable = editable.parent;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn editable;\n\t}\n\n\t/**\n\t * Returns a new instance of Position with offset incremented by `shift` value.\n\t *\n\t * @param {Number} shift How position offset should get changed. Accepts negative values.\n\t * @returns {module:engine/view/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position._createAt( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n\t * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n\t *\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions.\n\t *\n\t * @param {module:engine/view/position~Position} position\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'view:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'model:position' ); // -> false\n\t *\t\tposition.is( 'element' ); // -> false\n\t *\t\tposition.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'view:position';\n\t}\n\n\t/**\n\t * Checks whether this position equals given position.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\n\t}\n\n\t/**\n\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\n\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isAfter\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\n\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isBefore\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\n\t * different when they are located in separate roots.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/view/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root !== otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tif ( this.isEqual( otherPosition ) ) {\n\t\t\treturn 'same';\n\t\t}\n\n\t\t// Get path from root to position's parent element.\n\t\tconst thisPath = this.parent.is( 'node' ) ? this.parent.getPath() : [];\n\t\tconst otherPath = otherPosition.parent.is( 'node' ) ? otherPosition.parent.getPath() : [];\n\n\t\t// Add the positions' offsets to the parents offsets.\n\t\tthisPath.push( this.offset );\n\t\totherPath.push( otherPosition.offset );\n\n\t\t// Compare both path arrays to find common ancestor.\n\t\tconst result = compareArrays( thisPath, otherPath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < otherPath[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\tclone() {\n\t\treturn new Position( this.parent, this.offset );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/view/position~Position._createBefore},\n\t * * {@link module:engine/view/position~Position._createAfter}.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic _createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new this( itemOrPosition.parent, itemOrPosition.offset );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.is( 'text' ) ? node.data.length : node.childCount;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a view item.\n\t\t\t\t *\n\t\t\t\t * @error view-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-createPositionAt-offset-required: ' +\n\t\t\t\t\t'View#createPositionAt() requires the offset when the first parameter is a view item.',\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn new Position( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createAfter( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText + item.data.length );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root.\n\t\t\t *\n\t\t\t * @error view-position-after-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-after-root: You can not make position after root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index + 1 );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createBefore( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You cannot make a position before a root.\n\t\t\t *\n\t\t\t * @error view-position-before-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-before-root: You can not make position before root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */\n"]}]}