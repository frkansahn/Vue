{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\context.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\context.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIwLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGNvcmUvY29udGV4dAogKi8KaW1wb3J0IENvbmZpZyBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9jb25maWcnOwppbXBvcnQgQ29sbGVjdGlvbiBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9jb2xsZWN0aW9uJzsKaW1wb3J0IFBsdWdpbkNvbGxlY3Rpb24gZnJvbSAnLi9wbHVnaW5jb2xsZWN0aW9uJzsKaW1wb3J0IExvY2FsZSBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9sb2NhbGUnOwppbXBvcnQgQ0tFZGl0b3JFcnJvciBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9ja2VkaXRvcmVycm9yJzsKLyoqCiAqIFByb3ZpZGVzIGEgY29tbW9uLCBoaWdoZXItbGV2ZWwgZW52aXJvbm1lbnQgZm9yIHNvbHV0aW9ucyB0aGF0IHVzZSBtdWx0aXBsZSB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3IgZWRpdG9yc30KICogb3IgcGx1Z2lucyB0aGF0IHdvcmsgb3V0c2lkZSB0aGUgZWRpdG9yLiBVc2UgaXQgaW5zdGVhZCBvZiB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3IuY3JlYXRlIGBFZGl0b3IuY3JlYXRlKClgfQogKiBpbiBhZHZhbmNlZCBhcHBsaWNhdGlvbiBpbnRlZ3JhdGlvbnMuCiAqCiAqIEFsbCBjb25maWd1cmF0aW9uIG9wdGlvbnMgcGFzc2VkIHRvIGEgY29udGV4dCB3aWxsIGJlIHVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBlZGl0b3IgaW5zdGFuY2VzIGluaXRpYWxpemVkIGluIHRoYXQgY29udGV4dC4KICoKICoge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHRwbHVnaW5+Q29udGV4dFBsdWdpbiBDb250ZXh0IHBsdWdpbnN9IHBhc3NlZCB0byBhIGNvbnRleHQgaW5zdGFuY2Ugd2lsbCBiZSBzaGFyZWQgYW1vbmcgYWxsCiAqIGVkaXRvciBpbnN0YW5jZXMgaW5pdGlhbGl6ZWQgaW4gdGhpcyBjb250ZXh0LiBUaGVzZSB3aWxsIGJlIHRoZSBzYW1lIHBsdWdpbiBpbnN0YW5jZXMgZm9yIGFsbCB0aGUgZWRpdG9ycy4KICoKICogKipOb3RlOioqIFRoZSBjb250ZXh0IGNhbiBvbmx5IGJlIGluaXRpYWxpemVkIHdpdGgge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHRwbHVnaW5+Q29udGV4dFBsdWdpbiBjb250ZXh0IHBsdWdpbnN9CiAqIChlLmcuIFtjb21tZW50c10oaHR0cHM6Ly9ja2VkaXRvci5jb20vY29sbGFib3JhdGlvbi9jb21tZW50cy8pKS4gUmVndWxhciB7QGxpbmsgbW9kdWxlOmNvcmUvcGx1Z2luflBsdWdpbiBwbHVnaW5zfSByZXF1aXJlIGFuCiAqIGVkaXRvciBpbnN0YW5jZSB0byB3b3JrIGFuZCBjYW5ub3QgYmUgYWRkZWQgdG8gYSBjb250ZXh0LgogKgogKiAqKk5vdGU6KiogWW91IGNhbiBhZGQgYSBjb250ZXh0IHBsdWdpbiB0byBhbiBlZGl0b3IgaW5zdGFuY2UsIHRob3VnaC4KICoKICogSWYgeW91IGFyZSB1c2luZyBtdWx0aXBsZSBlZGl0b3IgaW5zdGFuY2VzIG9uIG9uZSBwYWdlIGFuZCB1c2UgYW55IGNvbnRleHQgcGx1Z2lucywgY3JlYXRlIGEgY29udGV4dCB0byBzaGFyZSB0aGUgY29uZmlndXJhdGlvbiBhbmQKICogcGx1Z2lucyBhbW9uZyB0aGVzZSBlZGl0b3JzLiBTb21lIHBsdWdpbnMgd2lsbCB1c2UgdGhlIGluZm9ybWF0aW9uIGFib3V0IGFsbCBleGlzdGluZyBlZGl0b3JzIHRvIGJldHRlciBpbnRlZ3JhdGUgYmV0d2VlbiB0aGVtLgogKgogKiBJZiB5b3UgYXJlIHVzaW5nIHBsdWdpbnMgdGhhdCBkbyBub3QgcmVxdWlyZSBhbiBlZGl0b3IgdG8gd29yayAoZS5nLiBbY29tbWVudHNdKGh0dHBzOi8vY2tlZGl0b3IuY29tL2NvbGxhYm9yYXRpb24vY29tbWVudHMvKSksCiAqIGVuYWJsZSBhbmQgY29uZmlndXJlIHRoZW0gdXNpbmcgdGhlIGNvbnRleHQuCiAqCiAqIElmIHlvdSBhcmUgdXNpbmcgb25seSBhIHNpbmdsZSBlZGl0b3Igb24gZWFjaCBwYWdlLCB1c2Uge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yLmNyZWF0ZSBgRWRpdG9yLmNyZWF0ZSgpYH0gaW5zdGVhZC4KICogSW4gc3VjaCBjYXNlLCBhIGNvbnRleHQgaW5zdGFuY2Ugd2lsbCBiZSBjcmVhdGVkIGJ5IHRoZSBlZGl0b3IgaW5zdGFuY2UgaW4gYSB0cmFuc3BhcmVudCB3YXkuCiAqCiAqIFNlZSB7QGxpbmsgbW9kdWxlOmNvcmUvY29udGV4dH5Db250ZXh0LmNyZWF0ZSBgQ29udGV4dC5jcmVhdGUoKWB9IGZvciB1c2FnZSBleGFtcGxlcy4KICovCgp2YXIgQ29udGV4dCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIC8qKgogICAqIENyZWF0ZXMgYSBjb250ZXh0IGluc3RhbmNlIHdpdGggYSBnaXZlbiBjb25maWd1cmF0aW9uLgogICAqCiAgICogVXN1YWxseSBub3QgdG8gYmUgdXNlZCBkaXJlY3RseS4gU2VlIHRoZSBzdGF0aWMge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHR+Q29udGV4dC5jcmVhdGUgYGNyZWF0ZSgpYH0gbWV0aG9kLgogICAqCiAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWc9e31dIFRoZSBjb250ZXh0IGNvbmZpZ3VyYXRpb24uCiAgICovCiAgZnVuY3Rpb24gQ29udGV4dChjb25maWcpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZXh0KTsKCiAgICAvKioKICAgICAqIFN0b3JlcyBhbGwgdGhlIGNvbmZpZ3VyYXRpb25zIHNwZWNpZmljIHRvIHRoaXMgY29udGV4dCBpbnN0YW5jZS4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEB0eXBlIHttb2R1bGU6dXRpbHMvY29uZmlnfkNvbmZpZ30KICAgICAqLwogICAgdGhpcy5jb25maWcgPSBuZXcgQ29uZmlnKGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0Q29uZmlnKTsKICAgIHZhciBhdmFpbGFibGVQbHVnaW5zID0gdGhpcy5jb25zdHJ1Y3Rvci5idWlsdGluUGx1Z2luczsKICAgIHRoaXMuY29uZmlnLmRlZmluZSgncGx1Z2lucycsIGF2YWlsYWJsZVBsdWdpbnMpOwogICAgLyoqCiAgICAgKiBUaGUgcGx1Z2lucyBsb2FkZWQgYW5kIGluIHVzZSBieSB0aGlzIGNvbnRleHQgaW5zdGFuY2UuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7bW9kdWxlOmNvcmUvcGx1Z2luY29sbGVjdGlvbn5QbHVnaW5Db2xsZWN0aW9ufQogICAgICovCgogICAgdGhpcy5wbHVnaW5zID0gbmV3IFBsdWdpbkNvbGxlY3Rpb24odGhpcywgYXZhaWxhYmxlUGx1Z2lucyk7CiAgICB2YXIgbGFuZ3VhZ2VDb25maWcgPSB0aGlzLmNvbmZpZy5nZXQoJ2xhbmd1YWdlJykgfHwge307CiAgICAvKioKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge21vZHVsZTp1dGlscy9sb2NhbGV+TG9jYWxlfQogICAgICovCgogICAgdGhpcy5sb2NhbGUgPSBuZXcgTG9jYWxlKHsKICAgICAgdWlMYW5ndWFnZTogdHlwZW9mIGxhbmd1YWdlQ29uZmlnID09PSAnc3RyaW5nJyA/IGxhbmd1YWdlQ29uZmlnIDogbGFuZ3VhZ2VDb25maWcudWksCiAgICAgIGNvbnRlbnRMYW5ndWFnZTogdGhpcy5jb25maWcuZ2V0KCdsYW5ndWFnZS5jb250ZW50JykKICAgIH0pOwogICAgLyoqCiAgICAgKiBTaG9ydGhhbmQgZm9yIHtAbGluayBtb2R1bGU6dXRpbHMvbG9jYWxlfkxvY2FsZSN0fS4KICAgICAqCiAgICAgKiBAc2VlIG1vZHVsZTp1dGlscy9sb2NhbGV+TG9jYWxlI3QKICAgICAqIEBtZXRob2QgI3QKICAgICAqLwoKICAgIHRoaXMudCA9IHRoaXMubG9jYWxlLnQ7CiAgICAvKioKICAgICAqIEEgbGlzdCBvZiBlZGl0b3JzIHRoYXQgdGhpcyBjb250ZXh0IGluc3RhbmNlIGlzIGluamVjdGVkIHRvLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge21vZHVsZTp1dGlscy9jb2xsZWN0aW9ufkNvbGxlY3Rpb259CiAgICAgKi8KCiAgICB0aGlzLmVkaXRvcnMgPSBuZXcgQ29sbGVjdGlvbigpOwogICAgLyoqCiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGVkaXRvciB3aGljaCBjcmVhdGVkIHRoZSBjb250ZXh0LgogICAgICogTnVsbCB3aGVuIHRoZSBjb250ZXh0IHdhcyBjcmVhdGVkIG91dHNpZGUgb2YgdGhlIGVkaXRvci4KICAgICAqCiAgICAgKiBJdCBpcyB1c2VkIHRvIGRlc3Ryb3kgdGhlIGNvbnRleHQgd2hlbiByZW1vdmluZyB0aGUgZWRpdG9yIHRoYXQgaGFzIGNyZWF0ZWQgdGhlIGNvbnRleHQuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEB0eXBlIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcnxudWxsfQogICAgICovCgogICAgdGhpcy5fY29udGV4dE93bmVyID0gbnVsbDsKICB9CiAgLyoqCiAgICogTG9hZHMgYW5kIGluaXRpYWxpemVzIHBsdWdpbnMgc3BlY2lmaWVkIGluIHRoZSBjb25maWd1cmF0aW9uLgogICAqCiAgICogQHJldHVybnMge1Byb21pc2UuPG1vZHVsZTpjb3JlL3BsdWdpbn5Mb2FkZWRQbHVnaW5zPn0gQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzCiAgICogb25jZSB0aGUgaW5pdGlhbGl6YXRpb24gaXMgY29tcGxldGVkLCBwcm92aWRpbmcgYW4gYXJyYXkgb2YgbG9hZGVkIHBsdWdpbnMuCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoQ29udGV4dCwgW3sKICAgIGtleTogImluaXRQbHVnaW5zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0UGx1Z2lucygpIHsKICAgICAgdmFyIHBsdWdpbnMgPSB0aGlzLmNvbmZpZy5nZXQoJ3BsdWdpbnMnKSB8fCBbXTsKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBwbHVnaW5zW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkgewogICAgICAgICAgdmFyIFBsdWdpbiA9IF9zdGVwLnZhbHVlOwoKICAgICAgICAgIGlmICh0eXBlb2YgUGx1Z2luICE9ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIE9ubHkgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBpcyBhbGxvd2VkIGFzIGEge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHRwbHVnaW5+Q29udGV4dFBsdWdpbiBjb250ZXh0IHBsdWdpbn0uCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEBlcnJvciBjb250ZXh0LWluaXRwbHVnaW5zLWNvbnN0cnVjdG9yLW9ubHkKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCdjb250ZXh0LWluaXRwbHVnaW5zLWNvbnN0cnVjdG9yLW9ubHk6IE9ubHkgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBpcyBhbGxvd2VkIGFzIGEgY29udGV4dCBwbHVnaW4uJywgbnVsbCwgewogICAgICAgICAgICAgIFBsdWdpbjogUGx1Z2luCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChQbHVnaW4uaXNDb250ZXh0UGx1Z2luICE9PSB0cnVlKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBPbmx5IGEgcGx1Z2luIG1hcmtlZCBhcyBhIHtAbGluayBtb2R1bGU6Y29yZS9jb250ZXh0cGx1Z2lufkNvbnRleHRQbHVnaW4uaXNDb250ZXh0UGx1Z2luIGNvbnRleHQgcGx1Z2lufQogICAgICAgICAgICAgKiBpcyBhbGxvd2VkIHRvIGJlIHVzZWQgd2l0aCBhIGNvbnRleHQuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEBlcnJvciBjb250ZXh0LWluaXRwbHVnaW5zLWludmFsaWQtcGx1Z2luCiAgICAgICAgICAgICAqLwogICAgICAgICAgICB0aHJvdyBuZXcgQ0tFZGl0b3JFcnJvcignY29udGV4dC1pbml0cGx1Z2lucy1pbnZhbGlkLXBsdWdpbjogT25seSBhIHBsdWdpbiBtYXJrZWQgYXMgYSBjb250ZXh0IHBsdWdpbiBpcyBhbGxvd2VkIHRvIGJlIHVzZWQgd2l0aCBhIGNvbnRleHQuJywgbnVsbCwgewogICAgICAgICAgICAgIFBsdWdpbjogUGx1Z2luCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlOwogICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucy5pbml0KHBsdWdpbnMpOwogICAgfQogICAgLyoqCiAgICAgKiBEZXN0cm95cyB0aGUgY29udGV4dCBpbnN0YW5jZSBhbmQgYWxsIGVkaXRvcnMgdXNlZCB3aXRoIHRoZSBjb250ZXh0LAogICAgICogcmVsZWFzaW5nIGFsbCByZXNvdXJjZXMgdXNlZCBieSB0aGUgY29udGV4dC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgY29udGV4dCBpbnN0YW5jZSBpcyBmdWxseSBkZXN0cm95ZWQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBQcm9taXNlLmFsbChBcnJheS5mcm9tKHRoaXMuZWRpdG9ycywgZnVuY3Rpb24gKGVkaXRvcikgewogICAgICAgIHJldHVybiBlZGl0b3IuZGVzdHJveSgpOwogICAgICB9KSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLnBsdWdpbnMuZGVzdHJveSgpOwogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogQWRkcyBhIHJlZmVyZW5jZSB0byB0aGUgZWRpdG9yIHdoaWNoIGlzIHVzZWQgd2l0aCB0aGlzIGNvbnRleHQuCiAgICAgKgogICAgICogV2hlbiB0aGUgZ2l2ZW4gZWRpdG9yIGhhcyBjcmVhdGVkIHRoZSBjb250ZXh0LCB0aGUgcmVmZXJlbmNlIHRvIHRoaXMgZWRpdG9yIHdpbGwgYmUgc3RvcmVkCiAgICAgKiBhcyBhIHtAbGluayB+Q29udGV4dCNfY29udGV4dE93bmVyfS4KICAgICAqCiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIGJ5IHRoZSBlZGl0b3IuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHBhcmFtIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcn0gZWRpdG9yCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQ29udGV4dE93bmVyIFN0b3JlcyB0aGUgZ2l2ZW4gZWRpdG9yIGFzIGEgY29udGV4dCBvd25lci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfYWRkRWRpdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRWRpdG9yKGVkaXRvciwgaXNDb250ZXh0T3duZXIpIHsKICAgICAgaWYgKHRoaXMuX2NvbnRleHRPd25lcikgewogICAgICAgIC8qKgogICAgICAgICAqIENhbm5vdCBhZGQgbXVsdGlwbGUgZWRpdG9ycyB0byB0aGUgY29udGV4dCB3aGljaCBpcyBjcmVhdGVkIGJ5IHRoZSBlZGl0b3IuCiAgICAgICAgICoKICAgICAgICAgKiBAZXJyb3IgY29udGV4dC1hZGRFZGl0b3ItcHJpdmF0ZS1jb250ZXh0CiAgICAgICAgICovCiAgICAgICAgdGhyb3cgbmV3IENLRWRpdG9yRXJyb3IoJ2NvbnRleHQtYWRkRWRpdG9yLXByaXZhdGUtY29udGV4dDogQ2Fubm90IGFkZCBtdWx0aXBsZSBlZGl0b3JzIHRvIHRoZSBjb250ZXh0IHdoaWNoIGlzIGNyZWF0ZWQgYnkgdGhlIGVkaXRvci4nKTsKICAgICAgfQoKICAgICAgdGhpcy5lZGl0b3JzLmFkZChlZGl0b3IpOwoKICAgICAgaWYgKGlzQ29udGV4dE93bmVyKSB7CiAgICAgICAgdGhpcy5fY29udGV4dE93bmVyID0gZWRpdG9yOwogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIFJlbW92ZXMgYSByZWZlcmVuY2UgdG8gdGhlIGVkaXRvciB3aGljaCB3YXMgdXNlZCB3aXRoIHRoaXMgY29udGV4dC4KICAgICAqIFdoZW4gdGhlIGNvbnRleHQgd2FzIGNyZWF0ZWQgYnkgdGhlIGdpdmVuIGVkaXRvciwgdGhlIGNvbnRleHQgd2lsbCBiZSBkZXN0cm95ZWQuCiAgICAgKgogICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSB0aGUgZWRpdG9yLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBwYXJhbSB7bW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3J9IGVkaXRvcgogICAgICogQHJldHVybiB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgZWRpdG9yIGlzIHJlbW92ZWQgZnJvbSB0aGUgY29udGV4dCBvciB3aGVuIHRoZSBjb250ZXh0IHdhcyBkZXN0cm95ZWQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3JlbW92ZUVkaXRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZUVkaXRvcihlZGl0b3IpIHsKICAgICAgaWYgKHRoaXMuZWRpdG9ycy5oYXMoZWRpdG9yKSkgewogICAgICAgIHRoaXMuZWRpdG9ycy5yZW1vdmUoZWRpdG9yKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuX2NvbnRleHRPd25lciA9PT0gZWRpdG9yKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdHJveSgpOwogICAgICB9CgogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGNvbnRleHQgY29uZmlndXJhdGlvbiB3aGljaCB3aWxsIGJlIGNvcGllZCB0byB0aGUgZWRpdG9ycyBjcmVhdGVkIHVzaW5nIHRoaXMgY29udGV4dC4KICAgICAqCiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCBoYXMgdGhlIHBsdWdpbnMgY29uZmlndXJhdGlvbiByZW1vdmVkICZtZGFzaDsgcGx1Z2lucyBhcmUgc2hhcmVkIHdpdGggYWxsIGVkaXRvcnMKICAgICAqIHRocm91Z2ggYW5vdGhlciBtZWNoYW5pc20uCiAgICAgKgogICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSB0aGUgZWRpdG9yLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEByZXR1cm5zIHtPYmplY3R9IENvbmZpZ3VyYXRpb24gYXMgYSBwbGFpbiBvYmplY3QuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2dldEVkaXRvckNvbmZpZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEVkaXRvckNvbmZpZygpIHsKICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSB0aGlzLmNvbmZpZy5uYW1lcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7CiAgICAgICAgICB2YXIgbmFtZSA9IF9zdGVwMi52YWx1ZTsKCiAgICAgICAgICBpZiAoIVsncGx1Z2lucycsICdyZW1vdmVQbHVnaW5zJywgJ2V4dHJhUGx1Z2lucyddLmluY2x1ZGVzKG5hbWUpKSB7CiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHRoaXMuY29uZmlnLmdldChuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhIG5ldyBjb250ZXh0IGluc3RhbmNlLgogICAgICoKICAgICAqCQljb25zdCBjb21tb25Db25maWcgPSB7IC4uLiB9OyAvLyBDb25maWd1cmF0aW9uIGZvciBhbGwgdGhlIHBsdWdpbnMgYW5kIGVkaXRvcnMuCiAgICAgKgkJY29uc3QgZWRpdG9yUGx1Z2lucyA9IFsgLi4uIF07IC8vIFJlZ3VsYXIgcGx1Z2lucyBoZXJlLgogICAgICoKICAgICAqCQlDb250ZXh0CiAgICAgKgkJCS5jcmVhdGUoIHsKICAgICAqCQkJCS8vIE9ubHkgY29udGV4dCBwbHVnaW5zIGhlcmUuCiAgICAgKgkJCQlwbHVnaW5zOiBbIC4uLiBdLAogICAgICoKICAgICAqCQkJCS8vIENvbmZpZ3VyZSB0aGUgbGFuZ3VhZ2UgZm9yIGFsbCB0aGUgZWRpdG9ycyAoaXQgY2Fubm90IGJlIG92ZXJ3cml0dGVuKS4KICAgICAqCQkJCWxhbmd1YWdlOiB7IC4uLiB9LAogICAgICoKICAgICAqCQkJCS8vIENvbmZpZ3VyYXRpb24gZm9yIGNvbnRleHQgcGx1Z2lucy4KICAgICAqCQkJCWNvbW1lbnRzOiB7IC4uLiB9LAogICAgICoJCQkJLi4uCiAgICAgKgogICAgICoJCQkJLy8gRGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciBlZGl0b3IgcGx1Z2lucy4KICAgICAqCQkJCXRvb2xiYXI6IHsgLi4uIH0sCiAgICAgKgkJCQlpbWFnZTogeyAuLi4gfSwKICAgICAqCQkJCS4uLgogICAgICoJCQl9ICkKICAgICAqCQkJLnRoZW4oIGNvbnRleHQgPT4gewogICAgICoJCQkJY29uc3QgcHJvbWlzZXMgPSBbXTsKICAgICAqCiAgICAgKgkJCQlwcm9taXNlcy5wdXNoKCBDbGFzc2ljRWRpdG9yLmNyZWF0ZSgKICAgICAqCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ2VkaXRvcjEnICksCiAgICAgKgkJCQkJewogICAgICoJCQkJCQllZGl0b3JQbHVnaW5zLAogICAgICoJCQkJCQljb250ZXh0CiAgICAgKgkJCQkJfQogICAgICoJCQkJKSApOwogICAgICoKICAgICAqCQkJCXByb21pc2VzLnB1c2goIENsYXNzaWNFZGl0b3IuY3JlYXRlKAogICAgICoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnZWRpdG9yMicgKSwKICAgICAqCQkJCQl7CiAgICAgKgkJCQkJCWVkaXRvclBsdWdpbnMsCiAgICAgKgkJCQkJCWNvbnRleHQsCiAgICAgKgkJCQkJCXRvb2xiYXI6IHsgLi4uIH0gLy8gWW91IGNhbiBvdmVyd3JpdGUgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGNvbnRleHQuCiAgICAgKgkJCQkJfQogICAgICoJCQkJKSApOwogICAgICoKICAgICAqCQkJCXJldHVybiBQcm9taXNlLmFsbCggcHJvbWlzZXMgKTsKICAgICAqCQkJfSApOwogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29udGV4dCBjb25maWd1cmF0aW9uLgogICAgICogQHJldHVybnMge1Byb21pc2V9IEEgcHJvbWlzZSByZXNvbHZlZCBvbmNlIHRoZSBjb250ZXh0IGlzIHJlYWR5LiBUaGUgcHJvbWlzZSByZXNvbHZlcyB3aXRoIHRoZSBjcmVhdGVkIGNvbnRleHQgaW5zdGFuY2UuCiAgICAgKi8KCiAgfV0sIFt7CiAgICBrZXk6ICJjcmVhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShjb25maWcpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBfdGhpczIoY29uZmlnKTsKICAgICAgICByZXNvbHZlKGNvbnRleHQuaW5pdFBsdWdpbnMoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBjb250ZXh0OwogICAgICAgIH0pKTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ29udGV4dDsKfSgpOwovKioKICogQW4gYXJyYXkgb2YgcGx1Z2lucyBidWlsdCBpbnRvIHRoZSBgQ29udGV4dGAgY2xhc3MuCiAqCiAqIEl0IGlzIHVzZWQgaW4gQ0tFZGl0b3IgNSBidWlsZHMgZmVhdHVyaW5nIGBDb250ZXh0YCB0byBwcm92aWRlIGEgbGlzdCBvZiBjb250ZXh0IHBsdWdpbnMgd2hpY2ggYXJlIGxhdGVyIGF1dG9tYXRpY2FsbHkgaW5pdGlhbGl6ZWQKICogZHVyaW5nIHRoZSBjb250ZXh0IGluaXRpYWxpemF0aW9uLgogKgogKiBUaGV5IHdpbGwgYmUgYXV0b21hdGljYWxseSBpbml0aWFsaXplZCBieSBgQ29udGV4dGAgdW5sZXNzIGBjb25maWcucGx1Z2luc2AgaXMgcGFzc2VkLgogKgogKgkJLy8gQnVpbGQgc29tZSBjb250ZXh0IHBsdWdpbnMgaW50byB0aGUgQ29udGV4dCBjbGFzcyBmaXJzdC4KICoJCUNvbnRleHQuYnVpbHRpblBsdWdpbnMgPSBbIEZvb1BsdWdpbiwgQmFyUGx1Z2luIF07CiAqCiAqCQkvLyBOb3JtYWxseSwgeW91IG5lZWQgdG8gZGVmaW5lIGNvbmZpZy5wbHVnaW5zLCBidXQgc2luY2UgQ29udGV4dC5idWlsdGluUGx1Z2lucyB3YXMKICoJCS8vIGRlZmluZWQsIG5vdyB5b3UgY2FuIGNhbGwgY3JlYXRlKCkgd2l0aG91dCBhbnkgY29uZmlndXJhdGlvbi4KICoJCUNvbnRleHQKICoJCQkuY3JlYXRlKCkKICoJCQkudGhlbiggY29udGV4dCA9PiB7CiAqCQkJCWNvbnRleHQucGx1Z2lucy5nZXQoIEZvb1BsdWdpbiApOyAvLyAtPiBBbiBpbnN0YW5jZSBvZiB0aGUgRm9vIHBsdWdpbi4KICoJCQkJY29udGV4dC5wbHVnaW5zLmdldCggQmFyUGx1Z2luICk7IC8vIC0+IEFuIGluc3RhbmNlIG9mIHRoZSBCYXIgcGx1Z2luLgogKgkJCX0gKTsKICoKICogU2VlIGFsc28ge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHR+Q29udGV4dC5kZWZhdWx0Q29uZmlnIGBDb250ZXh0LmRlZmF1bHRDb25maWdgfQogKiBhbmQge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yLmJ1aWx0aW5QbHVnaW5zIGBFZGl0b3IuYnVpbHRpblBsdWdpbnNgfS4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyIHtBcnJheS48RnVuY3Rpb24+fSBtb2R1bGU6Y29yZS9jb250ZXh0fkNvbnRleHQuYnVpbHRpblBsdWdpbnMKICovCgovKioKICogVGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiB3aGljaCBpcyBidWlsdCBpbnRvIHRoZSBgQ29udGV4dGAgY2xhc3MuCiAqCiAqIEl0IGlzIHVzZWQgaW4gQ0tFZGl0b3IgNSBidWlsZHMgZmVhdHVyaW5nIGBDb250ZXh0YCB0byBwcm92aWRlIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB3aGljaCBhcmUgbGF0ZXIgdXNlZCBkdXJpbmcgdGhlCiAqIGNvbnRleHQgaW5pdGlhbGl6YXRpb24uCiAqCiAqCQlDb250ZXh0LmRlZmF1bHRDb25maWcgPSB7CiAqCQkJZm9vOiAxLAogKgkJCWJhcjogMgogKgkJfTsKICoKICoJCUNvbnRleHQKICoJCQkuY3JlYXRlKCkKICoJCQkudGhlbiggY29udGV4dCA9PiB7CiAqCQkJCWNvbnRleHQuY29uZmlnLmdldCggJ2ZvbycgKTsgLy8gLT4gMQogKgkJCQljb250ZXh0LmNvbmZpZy5nZXQoICdiYXInICk7IC8vIC0+IDIKICoJCQl9ICk7CiAqCiAqCQkvLyBUaGUgZGVmYXVsdCBvcHRpb25zIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBjb25maWd1cmF0aW9uIHBhc3NlZCB0byBjcmVhdGUoKS4KICoJCUNvbnRleHQKICoJCQkuY3JlYXRlKCB7IGJhcjogMyB9ICkKICoJCQkudGhlbiggY29udGV4dCA9PiB7CiAqCQkJCWNvbnRleHQuY29uZmlnLmdldCggJ2ZvbycgKTsgLy8gLT4gMQogKgkJCQljb250ZXh0LmNvbmZpZy5nZXQoICdiYXInICk7IC8vIC0+IDMKICoJCQl9ICk7CiAqCiAqIFNlZSBhbHNvIHtAbGluayBtb2R1bGU6Y29yZS9jb250ZXh0fkNvbnRleHQuYnVpbHRpblBsdWdpbnMgYENvbnRleHQuYnVpbHRpblBsdWdpbnNgfQogKiBhbmQge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yLmRlZmF1bHRDb25maWcgYEVkaXRvci5kZWZhdWx0Q29uZmlnYH0uCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlciB7T2JqZWN0fSBtb2R1bGU6Y29yZS9jb250ZXh0fkNvbnRleHQuZGVmYXVsdENvbmZpZwogKi8KCgpleHBvcnQgeyBDb250ZXh0IGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-core/src/context.js"],"names":["Config","Collection","PluginCollection","Locale","CKEditorError","Context","config","constructor","defaultConfig","availablePlugins","builtinPlugins","define","plugins","languageConfig","get","locale","uiLanguage","ui","contentLanguage","t","editors","_contextOwner","Plugin","isContextPlugin","init","Promise","all","Array","from","editor","destroy","then","isContextOwner","add","has","remove","resolve","result","names","name","includes","context","initPlugins"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/context\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport PluginCollection from './plugincollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link module:core/context~Context.create `Context.create()`} for usage examples.\n */\nexport default class Context {\n\t/**\n\t * Creates a context instance with a given configuration.\n\t *\n\t * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n\t *\n\t * @param {Object} [config={}] The context configuration.\n\t */\n\tconstructor( config ) {\n\t\t/**\n\t\t * Stores all the configurations specific to this context instance.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this context instance.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\tconst languageConfig = this.config.get( 'language' ) || {};\n\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( {\n\t\t\tuiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n\t\t\tcontentLanguage: this.config.get( 'language.content' )\n\t\t} );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * A list of editors that this context instance is injected to.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.editors = new Collection();\n\n\t\t/**\n\t\t * Reference to the editor which created the context.\n\t\t * Null when the context was created outside of the editor.\n\t\t *\n\t\t * It is used to destroy the context when removing the editor that has created the context.\n\t\t *\n\t\t * @private\n\t\t * @type {module:core/editor/editor~Editor|null}\n\t\t */\n\t\tthis._contextOwner = null;\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the configuration.\n\t *\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n\t * once the initialization is completed, providing an array of loaded plugins.\n\t */\n\tinitPlugins() {\n\t\tconst plugins = this.config.get( 'plugins' ) || [];\n\n\t\tfor ( const Plugin of plugins ) {\n\t\t\tif ( typeof Plugin != 'function' ) {\n\t\t\t\t/**\n\t\t\t\t * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-constructor-only\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'context-initplugins-constructor-only: Only a constructor function is allowed as a context plugin.',\n\t\t\t\t\tnull,\n\t\t\t\t\t{ Plugin }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( Plugin.isContextPlugin !== true ) {\n\t\t\t\t/**\n\t\t\t\t * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n\t\t\t\t * is allowed to be used with a context.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-invalid-plugin\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'context-initplugins-invalid-plugin: Only a plugin marked as a context plugin is allowed to be used with a context.',\n\t\t\t\t\tnull,\n\t\t\t\t\t{ Plugin }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this.plugins.init( plugins );\n\t}\n\n\t/**\n\t * Destroys the context instance and all editors used with the context,\n\t * releasing all resources used by the context.\n\t *\n\t * @returns {Promise} A promise that resolves once the context instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\treturn Promise.all( Array.from( this.editors, editor => editor.destroy() ) )\n\t\t\t.then( () => this.plugins.destroy() );\n\t}\n\n\t/**\n\t * Adds a reference to the editor which is used with this context.\n\t *\n\t * When the given editor has created the context, the reference to this editor will be stored\n\t * as a {@link ~Context#_contextOwner}.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Boolean} isContextOwner Stores the given editor as a context owner.\n\t */\n\t_addEditor( editor, isContextOwner ) {\n\t\tif ( this._contextOwner ) {\n\t\t\t/**\n\t\t\t * Cannot add multiple editors to the context which is created by the editor.\n\t\t\t *\n\t\t\t * @error context-addEditor-private-context\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'context-addEditor-private-context: Cannot add multiple editors to the context which is created by the editor.'\n\t\t\t);\n\t\t}\n\n\t\tthis.editors.add( editor );\n\n\t\tif ( isContextOwner ) {\n\t\t\tthis._contextOwner = editor;\n\t\t}\n\t}\n\n\t/**\n\t * Removes a reference to the editor which was used with this context.\n\t * When the context was created by the given editor, the context will be destroyed.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @return {Promise} A promise that resolves once the editor is removed from the context or when the context was destroyed.\n\t */\n\t_removeEditor( editor ) {\n\t\tif ( this.editors.has( editor ) ) {\n\t\t\tthis.editors.remove( editor );\n\t\t}\n\n\t\tif ( this._contextOwner === editor ) {\n\t\t\treturn this.destroy();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Returns the context configuration which will be copied to the editors created using this context.\n\t *\n\t * The configuration returned by this method has the plugins configuration removed &mdash; plugins are shared with all editors\n\t * through another mechanism.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @returns {Object} Configuration as a plain object.\n\t */\n\t_getEditorConfig() {\n\t\tconst result = {};\n\n\t\tfor ( const name of this.config.names() ) {\n\t\t\tif ( ![ 'plugins', 'removePlugins', 'extraPlugins' ].includes( name ) ) {\n\t\t\t\tresult[ name ] = this.config.get( name );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates and initializes a new context instance.\n\t *\n\t *\t\tconst commonConfig = { ... }; // Configuration for all the plugins and editors.\n\t *\t\tconst editorPlugins = [ ... ]; // Regular plugins here.\n\t *\n\t *\t\tContext\n\t *\t\t\t.create( {\n\t *\t\t\t\t// Only context plugins here.\n\t *\t\t\t\tplugins: [ ... ],\n\t *\n\t *\t\t\t\t// Configure the language for all the editors (it cannot be overwritten).\n\t *\t\t\t\tlanguage: { ... },\n\t *\n\t *\t\t\t\t// Configuration for context plugins.\n\t *\t\t\t\tcomments: { ... },\n\t *\t\t\t\t...\n\t *\n\t *\t\t\t\t// Default configuration for editor plugins.\n\t *\t\t\t\ttoolbar: { ... },\n\t *\t\t\t\timage: { ... },\n\t *\t\t\t\t...\n\t *\t\t\t} )\n\t *\t\t\t.then( context => {\n\t *\t\t\t\tconst promises = [];\n\t *\n\t *\t\t\t\tpromises.push( ClassicEditor.create(\n\t *\t\t\t\t\tdocument.getElementById( 'editor1' ),\n\t *\t\t\t\t\t{\n\t *\t\t\t\t\t\teditorPlugins,\n\t *\t\t\t\t\t\tcontext\n\t *\t\t\t\t\t}\n\t *\t\t\t\t) );\n\t *\n\t *\t\t\t\tpromises.push( ClassicEditor.create(\n\t *\t\t\t\t\tdocument.getElementById( 'editor2' ),\n\t *\t\t\t\t\t{\n\t *\t\t\t\t\t\teditorPlugins,\n\t *\t\t\t\t\t\tcontext,\n\t *\t\t\t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n\t *\t\t\t\t\t}\n\t *\t\t\t\t) );\n\t *\n\t *\t\t\t\treturn Promise.all( promises );\n\t *\t\t\t} );\n\t *\n\t * @param {Object} [config] The context configuration.\n\t * @returns {Promise} A promise resolved once the context is ready. The promise resolves with the created context instance.\n\t */\n\tstatic create( config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst context = new this( config );\n\n\t\t\tresolve( context.initPlugins().then( () => context ) );\n\t\t} );\n\t}\n}\n\n/**\n * An array of plugins built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide a list of context plugins which are later automatically initialized\n * during the context initialization.\n *\n * They will be automatically initialized by `Context` unless `config.plugins` is passed.\n *\n *\t\t// Build some context plugins into the Context class first.\n *\t\tContext.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since Context.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.plugins.get( FooPlugin ); // -> An instance of the Foo plugin.\n *\t\t\t\tcontext.plugins.get( BarPlugin ); // -> An instance of the Bar plugin.\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.defaultConfig `Context.defaultConfig`}\n * and {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n *\n * @static\n * @member {Array.<Function>} module:core/context~Context.builtinPlugins\n */\n\n/**\n * The default configuration which is built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide the default configuration options which are later used during the\n * context initialization.\n *\n *\t\tContext.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the configuration passed to create().\n *\t\tContext\n *\t\t\t.create( { bar: 3 } )\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.builtinPlugins `Context.builtinPlugins`}\n * and {@link module:core/editor/editor~Editor.defaultConfig `Editor.defaultConfig`}.\n *\n * @static\n * @member {Object} module:core/context~Context.defaultConfig\n */\n"]}]}