{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-ui\\src\\toolbar\\toolbarview.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-ui\\src\\toolbar\\toolbarview.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"],"names":["View","FocusTracker","FocusCycler","KeystrokeHandler","ToolbarSeparatorView","ResizeObserver","preventDefault","Rect","global","createDropdown","addToolbarToDropdown","attachLinkToDocumentation","verticalDotsIcon","ToolbarView","locale","options","bind","bindTemplate","t","set","items","createCollection","focusTracker","keystrokes","itemsView","ItemsView","children","add","focusables","_focusCycler","keystrokeHandler","actions","focusPrevious","focusNext","setTemplate","tag","attributes","class","to","if","role","style","maxWidth","on","mousedown","_behavior","shouldGroupWhenFull","DynamicGrouping","StaticLayout","item","element","evt","remove","listenTo","render","destroy","focusFirst","focusLast","config","factory","map","name","has","create","console","warn","view","bindTo","using","extendTemplate","viewChildren","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","resizeObserver","cachedPadding","_updateFocusCycleableItems","index","length","_updateGrouping","viewElement","_enableGroupingOnResize","_enableGroupingOnMaxWidthChange","ownerDocument","body","contains","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","previousWidth","entry","contentRect","width","last","first","dropdown","panelPosition","uiLanguageDirection","buttonView","label","tooltip","icon","toolbarView","clear","lastChildRect","lastChild","toolbarRect","computedStyle","window","getComputedStyle","paddingProperty","Number","parseInt","right","left"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\n/* globals console */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport verticalDotsIcon from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\n\nimport '../../theme/components/toolbar/toolbar.css';\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst t = this.t;\n\n\t\t/**\n\t\t * A reference to the options object passed to the constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n\t\t */\n\t\tthis.options = options || {};\n\n\t\t/**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n\t\tthis.set( 'ariaLabel', t( 'Editor toolbar' ) );\n\n\t\t/**\n\t\t * The maximum width of the toolbar element.\n\t\t *\n\t\t * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n\t\t * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {String} #maxWidth\n\t\t */\n\t\tthis.set( 'maxWidth', 'auto' );\n\n\t\t/**\n\t\t * A collection of toolbar items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * to handle keyboard navigation in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * When set true, makes the toolbar look compact with {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {String} #isCompact\n\t\t */\n\t\tthis.set( 'isCompact', false );\n\n\t\t/**\n\t\t * A (child) view containing {@link #items toolbar items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.itemsView = new ItemsView( locale );\n\n\t\t/**\n\t\t * A top–level collection aggregating building blocks of the toolbar.\n\t\t *\n\t\t *\t┌───────────────── ToolbarView ─────────────────┐\n\t\t *\t| ┌──────────────── #children ────────────────┐ |\n\t\t *\t| |   ┌──────────── #itemsView ───────────┐   | |\n\t\t *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n\t\t *\t| |   └──────────────────────────────────-┘   | |\n\t\t *\t| └───────────────────────────────────────────┘ |\n\t\t *\t└───────────────────────────────────────────────┘\n\t\t *\n\t\t * By default, it contains the {@link #itemsView} but it can be extended with additional\n\t\t * UI elements when necessary.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\t\tthis.children.add( this.itemsView );\n\n\t\t/**\n\t\t * A collection of {@link #items} that take part in the focus cycling\n\t\t * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n\t\t * some optional UI elements that also belong to the toolbar and should be focusable\n\t\t * by the user.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.focusables = this.createCollection();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items. Only available when\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n\t\t * is **disabled**.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\n\t\t/**\n\t\t * Helps cycling over {@link #focusables focusable items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isCompact', 'ck-toolbar_compact' )\n\t\t\t\t],\n\t\t\t\trole: 'toolbar',\n\t\t\t\t'aria-label': bind.to( 'ariaLabel' ),\n\t\t\t\tstyle: {\n\t\t\t\t\tmaxWidth: bind.to( 'maxWidth' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * An instance of the active toolbar behavior that shapes its look and functionality.\n\t\t *\n\t\t * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n\t\t */\n\t\tthis._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping( this ) : new StaticLayout( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Children added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tthis._behavior.render( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._behavior.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #focusables}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility that expands the plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items configuration.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n\tfillFromConfig( config, factory ) {\n\t\tconfig.map( name => {\n\t\t\tif ( name == '|' ) {\n\t\t\t\tthis.items.add( new ToolbarSeparatorView() );\n\t\t\t} else if ( factory.has( name ) ) {\n\t\t\t\tthis.items.add( factory.create( name ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n\t\t\t\tconsole.warn( attachLinkToDocumentation(\n\t\t\t\t\t'toolbarview-item-unavailable: The requested toolbar item is unavailable.' ), { name } );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * A collection of items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__items'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n}\n\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\tconst bind = view.bindTemplate;\n\n\t\t// Static toolbar can be vertical when needed.\n\t\tview.set( 'isVertical', false );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are visible.\n\t\tview.itemsView.children.bindTo( view.items ).using( item => item );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are focusable.\n\t\tview.focusables.bindTo( view.items ).using( item => item );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// When vertical, the toolbar has an additional CSS class.\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' )\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {}\n}\n\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * A collection of toolbar children.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewChildren = view.children;\n\n\t\t/**\n\t\t * A collection of focusable toolbar elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewFocusables = view.focusables;\n\n\t\t/**\n\t\t * A view containing toolbar items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.viewItemsView = view.itemsView;\n\n\t\t/**\n\t\t * Toolbar focus tracker.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.viewFocusTracker = view.focusTracker;\n\n\t\t/**\n\t\t * Toolbar locale.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.viewLocale = view.locale;\n\n\t\t/**\n\t\t * Toolbar element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #viewElement\n\t\t */\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n\t\t * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n\t\t * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.ungroupedItems = view.createCollection();\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * A collection of the toolbar items that do not fit into a single row of the toolbar.\n\t\t * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n\t\t * this collection is empty.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.groupedItems = view.createCollection();\n\n\t\t/**\n\t\t * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n\t\t * row of the toolbar. It is displayed on demand as the last of\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n\t\t * (nested) toolbar which displays items that would normally overflow.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.groupedItemsDropdown = this._createGroupedItemsDropdown();\n\n\t\t/**\n\t\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t\t * and manage items that do not fit into a single row.\n\t\t *\n\t\t * **Note:** Created in {@link #_enableGroupingOnResize}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis.resizeObserver = null;\n\n\t\t/**\n\t\t * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n\t\t * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n\t\t * a single toolbar line. This value can be reused between updates because it is unlikely that\n\t\t * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.cachedPadding = null;\n\n\t\t// Only those items that were not grouped are visible to the user.\n\t\tview.itemsView.children.bindTo( this.ungroupedItems ).using( item => item );\n\n\t\t// Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n\t\tthis.ungroupedItems.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tthis.ungroupedItems.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n\t\tview.children.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tview.children.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// ToolbarView#items is dynamic. When an item is added, it should be automatically\n\t\t// represented in either grouped or ungrouped items at the right index.\n\t\t// In other words #items == concat( #ungroupedItems, #groupedItems )\n\t\t// (in length and order).\n\t\tview.items.on( 'add', ( evt, item, index ) => {\n\t\t\tif ( index > this.ungroupedItems.length ) {\n\t\t\t\tthis.groupedItems.add( item, index - this.ungroupedItems.length );\n\t\t\t} else {\n\t\t\t\tthis.ungroupedItems.add( item, index );\n\t\t\t}\n\n\t\t\t// When a new ungrouped item joins in and lands in #ungroupedItems, there's a chance it causes\n\t\t\t// the toolbar to overflow.\n\t\t\tthis._updateGrouping();\n\t\t} );\n\n\t\t// When an item is removed from ToolbarView#items, it should be automatically\n\t\t// removed from either grouped or ungrouped items.\n\t\tview.items.on( 'remove', ( evt, item, index ) => {\n\t\t\tif ( index > this.ungroupedItems.length ) {\n\t\t\t\tthis.groupedItems.remove( item );\n\t\t\t} else {\n\t\t\t\tthis.ungroupedItems.remove( item );\n\t\t\t}\n\n\t\t\t// Whether removed from grouped or ungrouped items, there is a chance\n\t\t\t// some new space is available and we could do some ungrouping.\n\t\t\tthis._updateGrouping();\n\t\t} );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// To group items dynamically, the toolbar needs a dedicated CSS class.\n\t\t\t\t\t'ck-toolbar_grouping'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Enables dynamic items grouping based on the dimensions of the toolbar.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\trender( view ) {\n\t\tthis.viewElement = view.element;\n\n\t\tthis._enableGroupingOnResize();\n\t\tthis._enableGroupingOnMaxWidthChange( view );\n\t}\n\n\t/**\n\t * Cleans up the internals used by this behavior.\n\t */\n\tdestroy() {\n\t\t// The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n\t\t// so let's make sure it's actually destroyed along with the toolbar.\n\t\tthis.groupedItemsDropdown.destroy();\n\n\t\tthis.resizeObserver.destroy();\n\t}\n\n\t/**\n\t * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n\t * and it will move them to the {@link #groupedItems} when it happens.\n\t *\n\t * At the same time, it will also check if there is enough space in the toolbar for the first of the\n\t * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n\t * without the toolbar wrapping.\n\t *\n\t * @protected\n\t */\n\t_updateGrouping() {\n\t\t// Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n\t\t// for instance before #render(), or after render but without a parent or a parent detached\n\t\t// from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n\t\t// nothing else.\n\t\tif ( !this.viewElement.ownerDocument.body.contains( this.viewElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet wereItemsGrouped;\n\n\t\t// Group #items as long as some wrap to the next row. This will happen, for instance,\n\t\t// when the toolbar is getting narrow and there is not enough space to display all items in\n\t\t// a single row.\n\t\twhile ( this._areItemsOverflowing ) {\n\t\t\tthis._groupLastItem();\n\n\t\t\twereItemsGrouped = true;\n\t\t}\n\n\t\t// If none were grouped now but there were some items already grouped before,\n\t\t// then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n\t\t// for instance, the toolbar is stretching and there's more space in it than before.\n\t\tif ( !wereItemsGrouped && this.groupedItems.length ) {\n\t\t\t// Ungroup items as long as none are overflowing or there are none to ungroup left.\n\t\t\twhile ( this.groupedItems.length && !this._areItemsOverflowing ) {\n\t\t\t\tthis._ungroupFirstItem();\n\t\t\t}\n\n\t\t\t// If the ungrouping ended up with some item wrapping to the next row,\n\t\t\t// put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n\t\t\t// an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n\t\t\t// clean–up is vital for the algorithm.\n\t\t\tif ( this._areItemsOverflowing ) {\n\t\t\t\tthis._groupLastItem();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n\t * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _areItemsOverflowing() {\n\t\t// An empty toolbar cannot overflow.\n\t\tif ( !this.ungroupedItems.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst element = this.viewElement;\n\t\tconst uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n\t\tconst lastChildRect = new Rect( element.lastChild );\n\t\tconst toolbarRect = new Rect( element );\n\n\t\tif ( !this.cachedPadding ) {\n\t\t\tconst computedStyle = global.window.getComputedStyle( element );\n\t\t\tconst paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n\t\t\t// parseInt() is essential because of quirky floating point numbers logic and DOM.\n\t\t\t// If the padding turned out too big because of that, the grouped items dropdown would\n\t\t\t// always look (from the Rect perspective) like it overflows (while it's not).\n\t\t\tthis.cachedPadding = Number.parseInt( computedStyle[ paddingProperty ] );\n\t\t}\n\n\t\tif ( uiLanguageDirection === 'ltr' ) {\n\t\t\treturn lastChildRect.right > toolbarRect.right - this.cachedPadding;\n\t\t} else {\n\t\t\treturn lastChildRect.left < toolbarRect.left + this.cachedPadding;\n\t\t}\n\t}\n\n\t/**\n\t * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n\t * upon resize when there is little space available. Instead, the toolbar items are moved to the\n\t * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n\t *\n\t * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n\t * them in the dropdown if necessary. It will also observe the browser window for size changes in\n\t * the future and respond to them by grouping more items or reverting already grouped back, depending\n\t * on the visual space available.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnResize() {\n\t\tlet previousWidth;\n\n\t\t// TODO: Consider debounce.\n\t\tthis.resizeObserver = new ResizeObserver( this.viewElement, entry => {\n\t\t\tif ( !previousWidth || previousWidth !== entry.contentRect.width ) {\n\t\t\t\tthis._updateGrouping();\n\n\t\t\t\tpreviousWidth = entry.contentRect.width;\n\t\t\t}\n\t\t} );\n\n\t\tthis._updateGrouping();\n\t}\n\n\t/**\n\t * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n\t * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnMaxWidthChange( view ) {\n\t\tview.on( 'change:maxWidth', () => {\n\t\t\tthis._updateGrouping();\n\t\t} );\n\t}\n\n\t/**\n\t * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n\t * to the {@link #groupedItems} collection.\n\t *\n\t * The opposite of {@link #_ungroupFirstItem}.\n\t *\n\t * @private\n\t */\n\t_groupLastItem() {\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.add( new ToolbarSeparatorView() );\n\t\t\tthis.viewChildren.add( this.groupedItemsDropdown );\n\t\t\tthis.viewFocusTracker.add( this.groupedItemsDropdown.element );\n\t\t}\n\n\t\tthis.groupedItems.add( this.ungroupedItems.remove( this.ungroupedItems.last ), 0 );\n\t}\n\n\t/**\n\t * Moves the very first item belonging to {@link #groupedItems} back\n\t * to the {@link #ungroupedItems} collection.\n\t *\n\t * The opposite of {@link #_groupLastItem}.\n\t *\n\t * @private\n\t */\n\t_ungroupFirstItem() {\n\t\tthis.ungroupedItems.add( this.groupedItems.remove( this.groupedItems.first ) );\n\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.remove( this.groupedItemsDropdown );\n\t\t\tthis.viewChildren.remove( this.viewChildren.last );\n\t\t\tthis.viewFocusTracker.remove( this.groupedItemsDropdown.element );\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n\t * collection when there is not enough space in the toolbar to display all items in a single row.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createGroupedItemsDropdown() {\n\t\tconst locale = this.viewLocale;\n\t\tconst t = locale.t;\n\t\tconst dropdown = createDropdown( locale );\n\n\t\tdropdown.class = 'ck-toolbar__grouped-dropdown';\n\n\t\t// Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n\t\t// (https://github.com/ckeditor/ckeditor5/issues/5608)\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n\n\t\taddToolbarToDropdown( dropdown, [] );\n\n\t\tdropdown.buttonView.set( {\n\t\t\tlabel: t( 'Show more items' ),\n\t\t\ttooltip: true,\n\t\t\ticon: verticalDotsIcon\n\t\t} );\n\n\t\t// 1:1 pass–through binding.\n\t\tdropdown.toolbarView.items.bindTo( this.groupedItems ).using( item => item );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n\t * collection so it represents the up–to–date state of the UI from the perspective of the user.\n\t *\n\t * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n\t * it must be subject to focus cycling in the toolbar.\n\t *\n\t * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n\t * to learn more about the purpose of this method.\n\t *\n\t * @private\n\t */\n\t_updateFocusCycleableItems() {\n\t\tthis.viewFocusables.clear();\n\n\t\tthis.ungroupedItems.map( item => {\n\t\t\tthis.viewFocusables.add( item );\n\t\t} );\n\n\t\tif ( this.groupedItems.length ) {\n\t\t\tthis.viewFocusables.add( this.groupedItemsDropdown );\n\t\t}\n\t}\n}\n\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow.\n *\n * Also see: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */\n"]}]}