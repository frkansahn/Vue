{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\documentselection.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\documentselection.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjsKaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2dldCBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2dldCI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgovKioKICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjAsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kIG9yIGh0dHBzOi8vY2tlZGl0b3IuY29tL2xlZ2FsL2NrZWRpdG9yLW9zcy1saWNlbnNlCiAqLwoKLyoqCiAqIEBtb2R1bGUgZW5naW5lL21vZGVsL2RvY3VtZW50c2VsZWN0aW9uCiAqLwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7CmltcG9ydCBFbWl0dGVyTWl4aW4gZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvZW1pdHRlcm1peGluJzsKaW1wb3J0IFNlbGVjdGlvbiBmcm9tICcuL3NlbGVjdGlvbic7CmltcG9ydCBMaXZlUmFuZ2UgZnJvbSAnLi9saXZlcmFuZ2UnOwppbXBvcnQgVGV4dCBmcm9tICcuL3RleHQnOwppbXBvcnQgVGV4dFByb3h5IGZyb20gJy4vdGV4dHByb3h5JzsKaW1wb3J0IHRvTWFwIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL3RvbWFwJzsKaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY29sbGVjdGlvbic7CmltcG9ydCBDS0VkaXRvckVycm9yIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2NrZWRpdG9yZXJyb3InOwppbXBvcnQgdWlkIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL3VpZCc7CnZhciBzdG9yZVByZWZpeCA9ICdzZWxlY3Rpb246JzsKLyoqCiAqIGBEb2N1bWVudFNlbGVjdGlvbmAgaXMgYSBzcGVjaWFsIHNlbGVjdGlvbiB3aGljaCBpcyB1c2VkIGFzIHRoZQogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudCNzZWxlY3Rpb24gZG9jdW1lbnQncyBzZWxlY3Rpb259LgogKiBUaGVyZSBjYW4gYmUgb25seSBvbmUgaW5zdGFuY2Ugb2YgYERvY3VtZW50U2VsZWN0aW9uYCBwZXIgZG9jdW1lbnQuCiAqCiAqIERvY3VtZW50IHNlbGVjdGlvbiBjYW4gb25seSBiZSBjaGFuZ2VkIGJ5IHVzaW5nIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyfSBpbnN0YW5jZQogKiBpbnNpZGUgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsI2NoYW5nZSBgY2hhbmdlKClgfSBibG9jaywgYXMgaXQgcHJvdmlkZXMgYSBzZWN1cmUgd2F5IHRvIG1vZGlmeSBtb2RlbC4KICoKICogYERvY3VtZW50U2VsZWN0aW9uYCBpcyBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgdXBvbiBjaGFuZ2VzIGluIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudCBkb2N1bWVudH0KICogdG8gYWx3YXlzIGNvbnRhaW4gdmFsaWQgcmFuZ2VzLiBJdHMgYXR0cmlidXRlcyBhcmUgaW5oZXJpdGVkIGZyb20gdGhlIHRleHQgdW5sZXNzIHNldCBleHBsaWNpdGx5LgogKgogKiBEaWZmZXJlbmNlcyBiZXR3ZWVuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb259IGFuZCBgRG9jdW1lbnRTZWxlY3Rpb25gIGFyZToKICogKiB0aGVyZSBpcyBhbHdheXMgYSByYW5nZSBpbiBgRG9jdW1lbnRTZWxlY3Rpb25gIC0gZXZlbiBpZiBubyByYW5nZXMgd2VyZSBhZGRlZCB0aGVyZSBpcyBhICJkZWZhdWx0IHJhbmdlIgogKiBwcmVzZW50IGluIHRoZSBzZWxlY3Rpb24sCiAqICogcmFuZ2VzIGFkZGVkIHRvIHRoaXMgc2VsZWN0aW9uIHVwZGF0ZXMgYXV0b21hdGljYWxseSB3aGVuIHRoZSBkb2N1bWVudCBjaGFuZ2VzLAogKiAqIGF0dHJpYnV0ZXMgb2YgYERvY3VtZW50U2VsZWN0aW9uYCBhcmUgdXBkYXRlZCBhdXRvbWF0aWNhbGx5IGFjY29yZGluZyB0byBzZWxlY3Rpb24gcmFuZ2VzLgogKgogKiBTaW5jZSBgRG9jdW1lbnRTZWxlY3Rpb25gIHVzZXMge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvbGl2ZXJhbmdlfkxpdmVSYW5nZSBsaXZlIHJhbmdlc30KICogYW5kIGlzIHVwZGF0ZWQgd2hlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudCBkb2N1bWVudH0KICogY2hhbmdlcywgaXQgY2Fubm90IGJlIHNldCBvbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9ub2Rlfk5vZGUgbm9kZXN9CiAqIHRoYXQgYXJlIGluc2lkZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudGZyYWdtZW50fkRvY3VtZW50RnJhZ21lbnQgZG9jdW1lbnQgZnJhZ21lbnR9LgogKiBJZiB5b3UgbmVlZCB0byByZXByZXNlbnQgYSBzZWxlY3Rpb24gaW4gZG9jdW1lbnQgZnJhZ21lbnQsCiAqIHVzZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9uIFNlbGVjdGlvbiBjbGFzc30gaW5zdGVhZC4KICoKICogQG1peGVzIG1vZHVsZTp1dGlscy9lbWl0dGVybWl4aW5+RW1pdHRlck1peGluCiAqLwoKdmFyIERvY3VtZW50U2VsZWN0aW9uID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlcyBhbiBlbXB0eSBsaXZlIHNlbGVjdGlvbiBmb3IgZ2l2ZW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnR+RG9jdW1lbnR9LgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50fkRvY3VtZW50fSBkb2MgRG9jdW1lbnQgd2hpY2ggb3ducyB0aGlzIHNlbGVjdGlvbi4KICAgKi8KICBmdW5jdGlvbiBEb2N1bWVudFNlbGVjdGlvbihkb2MpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb2N1bWVudFNlbGVjdGlvbik7CgogICAgLyoqCiAgICAgKiBTZWxlY3Rpb24gdXNlZCBpbnRlcm5hbGx5IGJ5IHRoYXQgY2xhc3MgKGBEb2N1bWVudFNlbGVjdGlvbmAgaXMgYSBwcm94eSB0byB0aGF0IHNlbGVjdGlvbikuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICovCiAgICB0aGlzLl9zZWxlY3Rpb24gPSBuZXcgTGl2ZVNlbGVjdGlvbihkb2MpOwoKICAgIHRoaXMuX3NlbGVjdGlvbi5kZWxlZ2F0ZSgnY2hhbmdlOnJhbmdlJykudG8odGhpcyk7CgogICAgdGhpcy5fc2VsZWN0aW9uLmRlbGVnYXRlKCdjaGFuZ2U6YXR0cmlidXRlJykudG8odGhpcyk7CgogICAgdGhpcy5fc2VsZWN0aW9uLmRlbGVnYXRlKCdjaGFuZ2U6bWFya2VyJykudG8odGhpcyk7CiAgfQogIC8qKgogICAqIFJldHVybnMgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGNvbGxhcHNlZC4gU2VsZWN0aW9uIGlzIGNvbGxhcHNlZCB3aGVuIHRoZXJlIGlzIGV4YWN0bHkgb25lIHJhbmdlIHdoaWNoIGlzCiAgICogY29sbGFwc2VkLgogICAqCiAgICogQHJlYWRvbmx5CiAgICogQHR5cGUge0Jvb2xlYW59CiAgICovCgoKICBfY3JlYXRlQ2xhc3MoRG9jdW1lbnRTZWxlY3Rpb24sIFt7CiAgICBrZXk6ICJnZXRSYW5nZXMiLAoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBpdGVyYWJsZSB0aGF0IGl0ZXJhdGVzIG92ZXIgY29waWVzIG9mIHNlbGVjdGlvbiByYW5nZXMuCiAgICAgKgogICAgICogQHJldHVybnMge0l0ZXJhYmxlLjxtb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlPn0KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhbmdlcygpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRSYW5nZXMoKTsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgZmlyc3QgcG9zaXRpb24gaW4gdGhlIHNlbGVjdGlvbi4KICAgICAqIEZpcnN0IHBvc2l0aW9uIGlzIHRoZSBwb3NpdGlvbiB0aGF0IHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9uI2lzQmVmb3JlIGlzIGJlZm9yZX0KICAgICAqIGFueSBvdGhlciBwb3NpdGlvbiBpbiB0aGUgc2VsZWN0aW9uLgogICAgICoKICAgICAqIFJldHVybnMgYG51bGxgIGlmIHRoZXJlIGFyZSBubyByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Rmlyc3RQb3NpdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3RQb3NpdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRGaXJzdFBvc2l0aW9uKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGxhc3QgcG9zaXRpb24gaW4gdGhlIHNlbGVjdGlvbi4KICAgICAqIExhc3QgcG9zaXRpb24gaXMgdGhlIHBvc2l0aW9uIHRoYXQge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb24jaXNBZnRlciBpcyBhZnRlcn0KICAgICAqIGFueSBvdGhlciBwb3NpdGlvbiBpbiB0aGUgc2VsZWN0aW9uLgogICAgICoKICAgICAqIFJldHVybnMgYG51bGxgIGlmIHRoZXJlIGFyZSBubyByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGFzdFBvc2l0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0UG9zaXRpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZ2V0TGFzdFBvc2l0aW9uKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBmaXJzdCByYW5nZSBpbiB0aGUgc2VsZWN0aW9uLgogICAgICogRmlyc3QgcmFuZ2UgaXMgdGhlIG9uZSB3aGljaCB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZSNzdGFydCBzdGFydH0gcG9zaXRpb24KICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9uI2lzQmVmb3JlIGlzIGJlZm9yZX0gc3RhcnQgcG9zaXRpb24gb2YgYWxsIG90aGVyIHJhbmdlcwogICAgICogKG5vdCB0byBjb25mdXNlIHdpdGggdGhlIGZpcnN0IHJhbmdlIGFkZGVkIHRvIHRoZSBzZWxlY3Rpb24pLgogICAgICoKICAgICAqIFJldHVybnMgYG51bGxgIGlmIHRoZXJlIGFyZSBubyByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Rmlyc3RSYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3RSYW5nZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRGaXJzdFJhbmdlKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBsYXN0IHJhbmdlIGluIHRoZSBzZWxlY3Rpb24uCiAgICAgKiBMYXN0IHJhbmdlIGlzIHRoZSBvbmUgd2hpY2gge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2UjZW5kIGVuZH0gcG9zaXRpb24KICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9uI2lzQWZ0ZXIgaXMgYWZ0ZXJ9IGVuZCBwb3NpdGlvbiBvZiBhbGwgb3RoZXIgcmFuZ2VzIChub3QgdG8gY29uZnVzZSB3aXRoIHRoZSByYW5nZSBtb3N0CiAgICAgKiByZWNlbnRseSBhZGRlZCB0byB0aGUgc2VsZWN0aW9uKS4KICAgICAqCiAgICAgKiBSZXR1cm5zIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gcmFuZ2VzIGluIHNlbGVjdGlvbi4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZXxudWxsfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldExhc3RSYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFzdFJhbmdlKCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldExhc3RSYW5nZSgpOwogICAgfQogICAgLyoqCiAgICAgKiBHZXRzIGVsZW1lbnRzIG9mIHR5cGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2NoZW1hflNjaGVtYSNpc0Jsb2NrICJibG9jayJ9IHRvdWNoZWQgYnkgdGhlIHNlbGVjdGlvbi4KICAgICAqCiAgICAgKiBUaGlzIG1ldGhvZCdzIHJlc3VsdCBjYW4gYmUgdXNlZCBmb3IgZXhhbXBsZSB0byBhcHBseSBibG9jayBzdHlsaW5nIHRvIGFsbCBibG9ja3MgY292ZXJlZCBieSB0aGlzIHNlbGVjdGlvbi4KICAgICAqCiAgICAgKiAqKk5vdGU6KiogYGdldFNlbGVjdGVkQmxvY2tzKClgIHJldHVybnMgYmxvY2tzIHRoYXQgYXJlIG5lc3RlZCBpbiBvdGhlciBub24tYmxvY2sgZWxlbWVudHMKICAgICAqIGJ1dCB3aWxsIG5vdCByZXR1cm4gYmxvY2tzIG5lc3RlZCBpbiBvdGhlciBibG9ja3MuCiAgICAgKgogICAgICogSW4gdGhpcyBjYXNlIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBleGFjdGx5IGFsbCAzIHBhcmFncmFwaHMgKG5vdGU6IGA8YmxvY2tRdW90ZT5gIGlzIG5vdCBhIGJsb2NrIGl0c2VsZik6CiAgICAgKgogICAgICoJCTxwYXJhZ3JhcGg+W2E8L3BhcmFncmFwaD4KICAgICAqCQk8YmxvY2tRdW90ZT4KICAgICAqCQkJPHBhcmFncmFwaD5iPC9wYXJhZ3JhcGg+CiAgICAgKgkJPC9ibG9ja1F1b3RlPgogICAgICoJCTxwYXJhZ3JhcGg+Y11kPC9wYXJhZ3JhcGg+CiAgICAgKgogICAgICogSW4gdGhpcyBjYXNlIHRoZSBwYXJhZ3JhcGggd2lsbCBhbHNvIGJlIHJldHVybmVkLCBkZXNwaXRlIHRoZSBjb2xsYXBzZWQgc2VsZWN0aW9uOgogICAgICoKICAgICAqCQk8cGFyYWdyYXBoPltdYTwvcGFyYWdyYXBoPgogICAgICoKICAgICAqIEluIHN1Y2ggYSBzY2VuYXJpbywgaG93ZXZlciwgb25seSBibG9ja3MgQSwgQiAmIEUgd2lsbCBiZSByZXR1cm5lZCBhcyBibG9ja3MgQyAmIEQgYXJlIG5lc3RlZCBpbiBibG9jayBCOgogICAgICoKICAgICAqCQlbPGJsb2NrQT48L2Jsb2NrQT4KICAgICAqCQk8YmxvY2tCPgogICAgICoJCQk8YmxvY2tDPjwvYmxvY2tDPgogICAgICoJCQk8YmxvY2tEPjwvYmxvY2tEPgogICAgICoJCTwvYmxvY2tCPgogICAgICoJCTxibG9ja0U+PC9ibG9ja0U+XQogICAgICoKICAgICAqIElmIHRoZSBzZWxlY3Rpb24gaXMgaW5zaWRlIGEgYmxvY2sgYWxsIHRoZSBpbm5lciBibG9ja3MgKEEgJiBCKSBhcmUgcmV0dXJuZWQ6CiAgICAgKgogICAgICogCQk8YmxvY2s+CiAgICAgKgkJCTxibG9ja0E+W2E8L2Jsb2NrQT4KICAgICAqIAkJCTxibG9ja0I+Yl08L2Jsb2NrQj4KICAgICAqIAkJPC9ibG9jaz4KICAgICAqCiAgICAgKiAqKlNwZWNpYWwgY2FzZSoqOiBJZiBhIHNlbGVjdGlvbiBlbmRzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBibG9jaywgdGhhdCBibG9jayBpcyBub3QgcmV0dXJuZWQgYXMgZnJvbSB1c2VyIHBlcnNwZWN0aXZlCiAgICAgKiB0aGlzIGJsb2NrIHdhc24ndCBzZWxlY3RlZC4gU2VlIFsjOTg0XShodHRwczovL2dpdGh1Yi5jb20vY2tlZGl0b3IvY2tlZGl0b3I1LWVuZ2luZS9pc3N1ZXMvOTg0KSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICoKICAgICAqCQk8cGFyYWdyYXBoPlthPC9wYXJhZ3JhcGg+CiAgICAgKgkJPHBhcmFncmFwaD5iPC9wYXJhZ3JhcGg+CiAgICAgKgkJPHBhcmFncmFwaD5dYzwvcGFyYWdyYXBoPiAvLyB0aGlzIGJsb2NrIHdpbGwgbm90IGJlIHJldHVybmVkCiAgICAgKgogICAgICogQHJldHVybnMge0l0ZXJhYmxlLjxtb2R1bGU6ZW5naW5lL21vZGVsL2VsZW1lbnR+RWxlbWVudD59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0U2VsZWN0ZWRCbG9ja3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlbGVjdGVkQmxvY2tzKCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldFNlbGVjdGVkQmxvY2tzKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIHNlbGVjdGVkIGVsZW1lbnQuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2VsZW1lbnR+RWxlbWVudCBFbGVtZW50fSBpcyBjb25zaWRlcmVkIGFzIHNlbGVjdGVkIGlmIHRoZXJlIGlzIG9ubHkKICAgICAqIG9uZSByYW5nZSBpbiB0aGUgc2VsZWN0aW9uLCBhbmQgdGhhdCByYW5nZSBjb250YWlucyBleGFjdGx5IG9uZSBlbGVtZW50LgogICAgICogUmV0dXJucyBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gc2VsZWN0ZWQgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnR8bnVsbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRTZWxlY3RlZEVsZW1lbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlbGVjdGVkRWxlbWVudCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRTZWxlY3RlZEVsZW1lbnQoKTsKICAgIH0KICAgIC8qKgogICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBjb250YWlucyB0aGUgZW50aXJlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnQuIFRoaXMgbWVhbnMgdGhhdCBzZWxlY3Rpb24gbXVzdCBzdGFydAogICAgICogYXQgYSBwb3NpdGlvbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9wb3NpdGlvbn5Qb3NpdGlvbiNpc1RvdWNoaW5nIHRvdWNoaW5nfSB0aGUgZWxlbWVudCdzIHN0YXJ0IGFuZCBlbmRzIGF0IHBvc2l0aW9uCiAgICAgKiB0b3VjaGluZyB0aGUgZWxlbWVudCdzIGVuZC4KICAgICAqCiAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIG1ldGhvZCB3aWxsIGNoZWNrIHdoZXRoZXIgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBzZWxlY3Rpb24ncyBjdXJyZW50IHJvb3QgaXMgc2VsZWN0ZWQuCiAgICAgKiBVc2VmdWwgdG8gY2hlY2sgaWYgZS5nLiB0aGUgdXNlciBoYXMganVzdCBwcmVzc2VkIDxrYmQ+Q3RybDwva2JkPiArIDxrYmQ+QTwva2JkPi4KICAgICAqCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvZWxlbWVudH5FbGVtZW50fSBbZWxlbWVudD10aGlzLmFuY2hvci5yb290XQogICAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY29udGFpbnNFbnRpcmVDb250ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb250YWluc0VudGlyZUNvbnRlbnQoZWxlbWVudCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmNvbnRhaW5zRW50aXJlQ29udGVudChlbGVtZW50KTsKICAgIH0KICAgIC8qKgogICAgICogVW5iaW5kcyBhbGwgZXZlbnRzIHByZXZpb3VzbHkgYm91bmQgYnkgZG9jdW1lbnQgc2VsZWN0aW9uLgogICAgICovCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIHRoaXMuX3NlbGVjdGlvbi5kZXN0cm95KCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgaXRlcmFibGUgdGhhdCBpdGVyYXRlcyBvdmVyIHRoaXMgc2VsZWN0aW9uJ3MgYXR0cmlidXRlIGtleXMuCiAgICAgKgogICAgICogQHJldHVybnMge0l0ZXJhYmxlLjxTdHJpbmc+fQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEF0dHJpYnV0ZUtleXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZUtleXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZ2V0QXR0cmlidXRlS2V5cygpOwogICAgfQogICAgLyoqCiAgICAgKiBSZXR1cm5zIGl0ZXJhYmxlIHRoYXQgaXRlcmF0ZXMgb3ZlciB0aGlzIHNlbGVjdGlvbidzIGF0dHJpYnV0ZXMuCiAgICAgKgogICAgICogQXR0cmlidXRlcyBhcmUgcmV0dXJuZWQgYXMgYXJyYXlzIGNvbnRhaW5pbmcgdHdvIGl0ZW1zLiBGaXJzdCBvbmUgaXMgYXR0cmlidXRlIGtleSBhbmQgc2Vjb25kIGlzIGF0dHJpYnV0ZSB2YWx1ZS4KICAgICAqIFRoaXMgZm9ybWF0IGlzIGFjY2VwdGVkIGJ5IG5hdGl2ZSBgTWFwYCBvYmplY3QgYW5kIGFsc28gY2FuIGJlIHBhc3NlZCBpbiBgTm9kZWAgY29uc3RydWN0b3IuCiAgICAgKgogICAgICogQHJldHVybnMge0l0ZXJhYmxlLjwqPn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRBdHRyaWJ1dGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBdHRyaWJ1dGVzKCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldEF0dHJpYnV0ZXMoKTsKICAgIH0KICAgIC8qKgogICAgICogR2V0cyBhbiBhdHRyaWJ1dGUgdmFsdWUgZm9yIGdpdmVuIGtleSBvciBgdW5kZWZpbmVkYCBpZiB0aGF0IGF0dHJpYnV0ZSBpcyBub3Qgc2V0IG9uIHRoZSBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBLZXkgb2YgYXR0cmlidXRlIHRvIGxvb2sgZm9yLgogICAgICogQHJldHVybnMgeyp9IEF0dHJpYnV0ZSB2YWx1ZSBvciBgdW5kZWZpbmVkYC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRBdHRyaWJ1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZShrZXkpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRBdHRyaWJ1dGUoa2V5KTsKICAgIH0KICAgIC8qKgogICAgICogQ2hlY2tzIGlmIHRoZSBzZWxlY3Rpb24gaGFzIGFuIGF0dHJpYnV0ZSBmb3IgZ2l2ZW4ga2V5LgogICAgICoKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5IG9mIGF0dHJpYnV0ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgYXR0cmlidXRlIHdpdGggZ2l2ZW4ga2V5IGlzIHNldCBvbiBzZWxlY3Rpb24sIGBmYWxzZWAgb3RoZXJ3aXNlLgogICAgICovCgogIH0sIHsKICAgIGtleTogImhhc0F0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzQXR0cmlidXRlKGtleSkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmhhc0F0dHJpYnV0ZShrZXkpOwogICAgfQogICAgLyoqCiAgICAgKiBSZWZyZXNoZXMgc2VsZWN0aW9uIGF0dHJpYnV0ZXMgYW5kIG1hcmtlcnMgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBtb2RlbC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZWZyZXNoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoKCkgewogICAgICB0aGlzLl9zZWxlY3Rpb24uX3VwZGF0ZU1hcmtlcnMoKTsKCiAgICAgIHRoaXMuX3NlbGVjdGlvbi5fdXBkYXRlQXR0cmlidXRlcyhmYWxzZSk7CiAgICB9CiAgICAvKioKICAgICAqIENoZWNrcyB3aGV0aGVyIHRoaXMgb2JqZWN0IGlzIG9mIHRoZSBnaXZlbiB0eXBlLgogICAgICoKICAgICAqCQlzZWxlY3Rpb24uaXMoICdzZWxlY3Rpb24nICk7IC8vIC0+IHRydWUKICAgICAqCQlzZWxlY3Rpb24uaXMoICdkb2N1bWVudFNlbGVjdGlvbicgKTsgLy8gLT4gdHJ1ZQogICAgICoJCXNlbGVjdGlvbi5pcyggJ21vZGVsOnNlbGVjdGlvbicgKTsgLy8gLT4gdHJ1ZQogICAgICoJCXNlbGVjdGlvbi5pcyggJ21vZGVsOmRvY3VtZW50U2VsZWN0aW9uJyApOyAvLyAtPiB0cnVlCiAgICAgKgogICAgICoJCXNlbGVjdGlvbi5pcyggJ3ZpZXc6c2VsZWN0aW9uJyApOyAvLyAtPiBmYWxzZQogICAgICoJCXNlbGVjdGlvbi5pcyggJ2VsZW1lbnQnICk7IC8vIC0+IGZhbHNlCiAgICAgKgkJc2VsZWN0aW9uLmlzKCAnbm9kZScgKTsgLy8gLT4gZmFsc2UKICAgICAqCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9ub2Rlfk5vZGUjaXMgQ2hlY2sgdGhlIGVudGlyZSBsaXN0IG9mIG1vZGVsIG9iamVjdHN9IHdoaWNoIGltcGxlbWVudCB0aGUgYGlzKClgIG1ldGhvZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzKHR5cGUpIHsKICAgICAgcmV0dXJuIHR5cGUgPT0gJ3NlbGVjdGlvbicgfHwgdHlwZSA9PSAnbW9kZWw6c2VsZWN0aW9uJyB8fCB0eXBlID09ICdkb2N1bWVudFNlbGVjdGlvbicgfHwgdHlwZSA9PSAnbW9kZWw6ZG9jdW1lbnRTZWxlY3Rpb24nOwogICAgfQogICAgLyoqCiAgICAgKiBNb3ZlcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudHNlbGVjdGlvbn5Eb2N1bWVudFNlbGVjdGlvbiNmb2N1c30gdG8gdGhlIHNwZWNpZmllZCBsb2NhdGlvbi4KICAgICAqIFNob3VsZCBiZSB1c2VkIG9ubHkgd2l0aGluIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyI3NldFNlbGVjdGlvbkZvY3VzfSBtZXRob2QuCiAgICAgKgogICAgICogVGhlIGxvY2F0aW9uIGNhbiBiZSBzcGVjaWZpZWQgaW4gdGhlIHNhbWUgZm9ybSBhcwogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvd3JpdGVyfldyaXRlciNjcmVhdGVQb3NpdGlvbkF0IHdyaXRlci5jcmVhdGVQb3NpdGlvbkF0KCl9IHBhcmFtZXRlcnMuCiAgICAgKgogICAgICogQHNlZSBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjc2V0U2VsZWN0aW9uRm9jdXMKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9pdGVtfkl0ZW18bW9kdWxlOmVuZ2luZS9tb2RlbC9wb3NpdGlvbn5Qb3NpdGlvbn0gaXRlbU9yUG9zaXRpb24KICAgICAqIEBwYXJhbSB7TnVtYmVyfCdlbmQnfCdiZWZvcmUnfCdhZnRlcid9IFtvZmZzZXRdIE9mZnNldCBvciBvbmUgb2YgdGhlIGZsYWdzLiBVc2VkIG9ubHkgd2hlbgogICAgICogZmlyc3QgcGFyYW1ldGVyIGlzIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvaXRlbX5JdGVtIG1vZGVsIGl0ZW19LgogICAgICovCgogIH0sIHsKICAgIGtleTogIl9zZXRGb2N1cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEZvY3VzKGl0ZW1PclBvc2l0aW9uLCBvZmZzZXQpIHsKICAgICAgdGhpcy5fc2VsZWN0aW9uLnNldEZvY3VzKGl0ZW1PclBvc2l0aW9uLCBvZmZzZXQpOwogICAgfQogICAgLyoqCiAgICAgKiBTZXRzIHRoaXMgc2VsZWN0aW9uJ3MgcmFuZ2VzIGFuZCBkaXJlY3Rpb24gdG8gdGhlIHNwZWNpZmllZCBsb2NhdGlvbiBiYXNlZCBvbiB0aGUgZ2l2ZW4KICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3RhYmxlIHNlbGVjdGFibGV9LgogICAgICogU2hvdWxkIGJlIHVzZWQgb25seSB3aXRoaW4gdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjc2V0U2VsZWN0aW9ufSBtZXRob2QuCiAgICAgKgogICAgICogQHNlZSBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjc2V0U2VsZWN0aW9uCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGFibGV9IHNlbGVjdGFibGUKICAgICAqIEBwYXJhbSB7TnVtYmVyfCdiZWZvcmUnfCdlbmQnfCdhZnRlcid8J29uJ3wnaW4nfSBbcGxhY2VPck9mZnNldF0gU2V0cyBwbGFjZSBvciBvZmZzZXQgb2YgdGhlIHNlbGVjdGlvbi4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10KICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYmFja3dhcmRdIFNldHMgdGhpcyBzZWxlY3Rpb24gaW5zdGFuY2UgdG8gYmUgYmFja3dhcmQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3NldFRvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0VG8oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucykgewogICAgICB0aGlzLl9zZWxlY3Rpb24uc2V0VG8oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucyk7CiAgICB9CiAgICAvKioKICAgICAqIFNldHMgYXR0cmlidXRlIG9uIHRoZSBzZWxlY3Rpb24uIElmIGF0dHJpYnV0ZSB3aXRoIHRoZSBzYW1lIGtleSBhbHJlYWR5IGlzIHNldCwgaXQncyB2YWx1ZSBpcyBvdmVyd3JpdHRlbi4KICAgICAqIFNob3VsZCBiZSB1c2VkIG9ubHkgd2l0aGluIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyI3NldFNlbGVjdGlvbkF0dHJpYnV0ZX0gbWV0aG9kLgogICAgICoKICAgICAqIEBzZWUgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyI3NldFNlbGVjdGlvbkF0dHJpYnV0ZQogICAgICogQHByb3RlY3RlZAogICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBLZXkgb2YgdGhlIGF0dHJpYnV0ZSB0byBzZXQuCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfc2V0QXR0cmlidXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpIHsKICAgICAgdGhpcy5fc2VsZWN0aW9uLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTsKICAgIH0KICAgIC8qKgogICAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUgd2l0aCBnaXZlbiBrZXkgZnJvbSB0aGUgc2VsZWN0aW9uLgogICAgICogSWYgdGhlIGdpdmVuIGF0dHJpYnV0ZSB3YXMgc2V0IG9uIHRoZSBzZWxlY3Rpb24sIGZpcmVzIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9uI2V2ZW50OmNoYW5nZTpyYW5nZX0KICAgICAqIGV2ZW50IHdpdGggcmVtb3ZlZCBhdHRyaWJ1dGUga2V5LgogICAgICogU2hvdWxkIGJlIHVzZWQgb25seSB3aXRoaW4gdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjcmVtb3ZlU2VsZWN0aW9uQXR0cmlidXRlfSBtZXRob2QuCiAgICAgKgogICAgICogQHNlZSBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjcmVtb3ZlU2VsZWN0aW9uQXR0cmlidXRlCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IEtleSBvZiB0aGUgYXR0cmlidXRlIHRvIHJlbW92ZS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfcmVtb3ZlQXR0cmlidXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlQXR0cmlidXRlKGtleSkgewogICAgICB0aGlzLl9zZWxlY3Rpb24ucmVtb3ZlQXR0cmlidXRlKGtleSk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgdGhhdCBpdGVyYXRlcyB0aHJvdWdoIGFsbCBzZWxlY3Rpb24gYXR0cmlidXRlcyBzdG9yZWQgaW4gY3VycmVudCBzZWxlY3Rpb24ncyBwYXJlbnQuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHJldHVybnMge0l0ZXJhYmxlLjwqPn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfZ2V0U3RvcmVkQXR0cmlidXRlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFN0b3JlZEF0dHJpYnV0ZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uX2dldFN0b3JlZEF0dHJpYnV0ZXMoKTsKICAgIH0KICAgIC8qKgogICAgICogVGVtcG9yYXJpbHkgY2hhbmdlcyB0aGUgZ3Jhdml0eSBvZiB0aGUgc2VsZWN0aW9uIGZyb20gdGhlIGxlZnQgdG8gdGhlIHJpZ2h0LgogICAgICoKICAgICAqIFRoZSBncmF2aXR5IGRlZmluZXMgZnJvbSB3aGljaCBkaXJlY3Rpb24gdGhlIHNlbGVjdGlvbiBpbmhlcml0cyBpdHMgYXR0cmlidXRlcy4gSWYgaXQncyB0aGUgZGVmYXVsdCBsZWZ0CiAgICAgKiBncmF2aXR5LCB0aGUgc2VsZWN0aW9uIChhZnRlciBiZWluZyBtb3ZlZCBieSB0aGUgdGhlIHVzZXIpIGluaGVyaXRzIGF0dHJpYnV0ZXMgZnJvbSBpdHMgbGVmdCBoYW5kIHNpZGUuCiAgICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgdG8gdGVtcG9yYXJpbHkgb3ZlcnJpZGUgdGhpcyBiZWhhdmlvciBieSBmb3JjaW5nIHRoZSBncmF2aXR5IHRvIHRoZSByaWdodC4KICAgICAqCiAgICAgKiBJdCByZXR1cm5zIGFuIHVuaXF1ZSBpZGVudGlmaWVyIHdoaWNoIGlzIHJlcXVpcmVkIHRvIHJlc3RvcmUgdGhlIGdyYXZpdHkuIEl0IGd1YXJhbnRlZXMgdGhlIHN5bW1ldHJ5CiAgICAgKiBvZiB0aGUgcHJvY2Vzcy4KICAgICAqCiAgICAgKiBAc2VlIG1vZHVsZTplbmdpbmUvbW9kZWwvd3JpdGVyfldyaXRlciNvdmVycmlkZVNlbGVjdGlvbkdyYXZpdHkKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSB1bmlxdWUgaWQgd2hpY2ggYWxsb3dzIHJlc3RvcmluZyB0aGUgZ3Jhdml0eS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfb3ZlcnJpZGVHcmF2aXR5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfb3ZlcnJpZGVHcmF2aXR5KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLm92ZXJyaWRlR3Jhdml0eSgpOwogICAgfQogICAgLyoqCiAgICAgKiBSZXN0b3JlcyB0aGUge0BsaW5rIH5Eb2N1bWVudFNlbGVjdGlvbiNfb3ZlcnJpZGVHcmF2aXR5IG92ZXJyaWRkZW4gZ3Jhdml0eX0uCiAgICAgKgogICAgICogUmVzdG9yaW5nIHRoZSBncmF2aXR5IGlzIG9ubHkgcG9zc2libGUgdXNpbmcgdGhlIHVuaXF1ZSBpZGVudGlmaWVyIHJldHVybmVkIGJ5CiAgICAgKiB7QGxpbmsgfkRvY3VtZW50U2VsZWN0aW9uI19vdmVycmlkZUdyYXZpdHl9LiBOb3RlIHRoYXQgdGhlIGdyYXZpdHkgcmVtYWlucyBvdmVycmlkZGVuIGFzIGxvbmcgYXMgd29uJ3QgYmUgcmVzdG9yZWQKICAgICAqIHRoZSBzYW1lIG51bWJlciBvZiB0aW1lcyBpdCB3YXMgb3ZlcnJpZGRlbi4KICAgICAqCiAgICAgKiBAc2VlIG1vZHVsZTplbmdpbmUvbW9kZWwvd3JpdGVyfldyaXRlciNyZXN0b3JlU2VsZWN0aW9uR3Jhdml0eQogICAgICogQHByb3RlY3RlZAogICAgICogQHBhcmFtIHtTdHJpbmd9IHVpZCBUaGUgdW5pcXVlIGlkIHJldHVybmVkIGJ5IHtAbGluayAjX292ZXJyaWRlR3Jhdml0eX0uCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3Jlc3RvcmVHcmF2aXR5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzdG9yZUdyYXZpdHkodWlkKSB7CiAgICAgIHRoaXMuX3NlbGVjdGlvbi5yZXN0b3JlR3Jhdml0eSh1aWQpOwogICAgfQogICAgLyoqCiAgICAgKiBHZW5lcmF0ZXMgYW5kIHJldHVybnMgYW4gYXR0cmlidXRlIGtleSBmb3Igc2VsZWN0aW9uIGF0dHJpYnV0ZXMgc3RvcmUsIGJhc2luZyBvbiBvcmlnaW5hbCBhdHRyaWJ1dGUga2V5LgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgQXR0cmlidXRlIGtleSB0byBjb252ZXJ0LgogICAgICogQHJldHVybnMge1N0cmluZ30gQ29udmVydGVkIGF0dHJpYnV0ZSBrZXksIGFwcGxpY2FibGUgZm9yIHNlbGVjdGlvbiBzdG9yZS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0NvbGxhcHNlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5pc0NvbGxhcHNlZDsKICAgIH0KICAgIC8qKgogICAgICogU2VsZWN0aW9uIGFuY2hvci4gQW5jaG9yIG1heSBiZSBkZXNjcmliZWQgYXMgYSBwb3NpdGlvbiB3aGVyZSB0aGUgbW9zdCByZWNlbnQgcGFydCBvZiB0aGUgc2VsZWN0aW9uIHN0YXJ0cy4KICAgICAqIFRvZ2V0aGVyIHdpdGgge0BsaW5rICNmb2N1c30gdGhleSBkZWZpbmUgdGhlIGRpcmVjdGlvbiBvZiBzZWxlY3Rpb24sIHdoaWNoIGlzIGltcG9ydGFudAogICAgICogd2hlbiBleHBhbmRpbmcvc2hyaW5raW5nIHNlbGVjdGlvbi4gQW5jaG9yIGlzIGFsd2F5cyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZSNzdGFydCBzdGFydH0gb3IKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlI2VuZCBlbmR9IHBvc2l0aW9uIG9mIHRoZSBtb3N0IHJlY2VudGx5IGFkZGVkIHJhbmdlLgogICAgICoKICAgICAqIElzIHNldCB0byBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIHJhbmdlcyBpbiBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHNlZSAjZm9jdXMKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge21vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb258bnVsbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhbmNob3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uYW5jaG9yOwogICAgfQogICAgLyoqCiAgICAgKiBTZWxlY3Rpb24gZm9jdXMuIEZvY3VzIGlzIGEgcG9zaXRpb24gd2hlcmUgdGhlIHNlbGVjdGlvbiBlbmRzLgogICAgICoKICAgICAqIElzIHNldCB0byBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIHJhbmdlcyBpbiBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHNlZSAjYW5jaG9yCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEB0eXBlIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZm9jdXMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZm9jdXM7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgbnVtYmVyIG9mIHJhbmdlcyBpbiBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICovCgogIH0sIHsKICAgIGtleTogInJhbmdlQ291bnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24ucmFuZ2VDb3VudDsKICAgIH0KICAgIC8qKgogICAgICogRGVzY3JpYmVzIHdoZXRoZXIgYERvY3VtZW50c2VsZWN0aW9uYCBoYXMgb3duIHJhbmdlKHMpIHNldCwgb3IgaWYgaXQgaXMgZGVmYXVsdGVkIHRvCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudCNfZ2V0RGVmYXVsdFJhbmdlIGRvY3VtZW50J3MgZGVmYXVsdCByYW5nZX0uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJoYXNPd25SYW5nZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5oYXNPd25SYW5nZTsKICAgIH0KICAgIC8qKgogICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHtAbGluayAjZm9jdXN9CiAgICAgKiBwcmVjZWRlcyB7QGxpbmsgI2FuY2hvcn0uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0JhY2t3YXJkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmlzQmFja3dhcmQ7CiAgICB9CiAgICAvKioKICAgICAqIERlc2NyaWJlcyB3aGV0aGVyIHRoZSBncmF2aXR5IGlzIG92ZXJyaWRkZW4gKHVzaW5nIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjb3ZlcnJpZGVTZWxlY3Rpb25HcmF2aXR5fSkgb3Igbm90LgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aGUgZ3Jhdml0eSByZW1haW5zIG92ZXJyaWRkZW4gYXMgbG9uZyBhcyB3aWxsIG5vdCBiZSByZXN0b3JlZCB0aGUgc2FtZSBudW1iZXIgb2YgdGltZXMgYXMgaXQgd2FzIG92ZXJyaWRkZW4uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0dyYXZpdHlPdmVycmlkZGVuIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmlzR3Jhdml0eU92ZXJyaWRkZW47CiAgICB9CiAgICAvKioKICAgICAqIEEgY29sbGVjdGlvbiBvZiBzZWxlY3Rpb24gbWFya2Vycy4KICAgICAqIE1hcmtlciBpcyBhIHNlbGVjdGlvbiBtYXJrZXIgd2hlbiBzZWxlY3Rpb24gcmFuZ2UgaXMgaW5zaWRlIHRoZSBtYXJrZXIgcmFuZ2UuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7bW9kdWxlOnV0aWxzL2NvbGxlY3Rpb25+Q29sbGVjdGlvbi48bW9kdWxlOmVuZ2luZS9tb2RlbC9tYXJrZXJjb2xsZWN0aW9ufk1hcmtlcj59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAibWFya2VycyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5tYXJrZXJzOwogICAgfQogICAgLyoqCiAgICAgKiBVc2VkIGZvciB0aGUgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9uI2lzRXF1YWx9IG1ldGhvZC4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3JhbmdlcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5fcmFuZ2VzOwogICAgfQogIH1dLCBbewogICAga2V5OiAiX2dldFN0b3JlQXR0cmlidXRlS2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3RvcmVBdHRyaWJ1dGVLZXkoa2V5KSB7CiAgICAgIHJldHVybiBzdG9yZVByZWZpeCArIGtleTsKICAgIH0KICAgIC8qKgogICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGF0dHJpYnV0ZSBrZXkgaXMgYW4gYXR0cmlidXRlIHN0b3JlZCBvbiBhbiBlbGVtZW50LgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkKICAgICAqIEByZXR1cm5zIHtCb29sZWFufQogICAgICovCgogIH0sIHsKICAgIGtleTogIl9pc1N0b3JlQXR0cmlidXRlS2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNTdG9yZUF0dHJpYnV0ZUtleShrZXkpIHsKICAgICAgcmV0dXJuIGtleS5zdGFydHNXaXRoKHN0b3JlUHJlZml4KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEb2N1bWVudFNlbGVjdGlvbjsKfSgpOwoKZXhwb3J0IHsgRG9jdW1lbnRTZWxlY3Rpb24gYXMgZGVmYXVsdCB9OwptaXgoRG9jdW1lbnRTZWxlY3Rpb24sIEVtaXR0ZXJNaXhpbik7Ci8qKgogKiBGaXJlZCB3aGVuIHNlbGVjdGlvbiByYW5nZShzKSBjaGFuZ2VkLgogKgogKiBAZXZlbnQgY2hhbmdlOnJhbmdlCiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlyZWN0Q2hhbmdlIEluIGNhc2Ugb2Yge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbn0gY2xhc3MgaXQgaXMgYWx3YXlzIHNldAogKiB0byBgdHJ1ZWAgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIHNlbGVjdGlvbiBjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIGRpcmVjdCB1c2Ugb2Ygc2VsZWN0aW9uJ3MgQVBJLgogKiBUaGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnRzZWxlY3Rpb25+RG9jdW1lbnRTZWxlY3Rpb259LCBob3dldmVyLCBtYXkgY2hhbmdlIGJlY2F1c2UgaXRzIHBvc2l0aW9uCiAqIHdhcyBkaXJlY3RseSBjaGFuZ2VkIHRocm91Z2ggdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIgd3JpdGVyfSBvciBiZWNhdXNlIGl0cyBwb3NpdGlvbiB3YXMKICogY2hhbmdlZCBiZWNhdXNlIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIG1vZGVsIGhhcyBiZWVuIGNoYW5nZWQgKHdoaWNoIG1lYW5zIGFuIGluZGlyZWN0IGNoYW5nZSkuCiAqIFRoZSBpbmRpcmVjdCBjaGFuZ2UgZG9lcyBub3Qgb2NjdXIgaW4gY2FzZSBvZiBub3JtYWwgKGRldGFjaGVkKSBzZWxlY3Rpb25zIGJlY2F1c2UgdGhleSBhcmUgInN0YXRpYyIgKGFzICJub3QgbGl2ZSIpCiAqIHdoaWNoIG1lYW4gdGhhdCB0aGV5IGFyZSBub3QgdXBkYXRlZCBvbmNlIHRoZSBkb2N1bWVudCBjaGFuZ2VzLgogKi8KCi8qKgogKiBGaXJlZCB3aGVuIHNlbGVjdGlvbiBhdHRyaWJ1dGUgY2hhbmdlZC4KICoKICogQGV2ZW50IGNoYW5nZTphdHRyaWJ1dGUKICogQHBhcmFtIHtCb29sZWFufSBkaXJlY3RDaGFuZ2UgSW4gY2FzZSBvZiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9ufSBjbGFzcyBpdCBpcyBhbHdheXMgc2V0CiAqIHRvIGB0cnVlYCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgc2VsZWN0aW9uIGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgZGlyZWN0IHVzZSBvZiBzZWxlY3Rpb24ncyBBUEkuCiAqIFRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudHNlbGVjdGlvbn5Eb2N1bWVudFNlbGVjdGlvbn0sIGhvd2V2ZXIsIG1heSBjaGFuZ2UgYmVjYXVzZSBpdHMgYXR0cmlidXRlcwogKiB3ZXJlIGRpcmVjdGx5IGNoYW5nZWQgdGhyb3VnaCB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvd3JpdGVyfldyaXRlciB3cml0ZXJ9IG9yIGJlY2F1c2UgaXRzIHBvc2l0aW9uIHdhcwogKiBjaGFuZ2VkIGluIHRoZSBtb2RlbCBhbmQgaXRzIGF0dHJpYnV0ZXMgd2VyZSByZWZyZXNoZWQgKHdoaWNoIG1lYW5zIGFuIGluZGlyZWN0IGNoYW5nZSkuCiAqIFRoZSBpbmRpcmVjdCBjaGFuZ2UgZG9lcyBub3Qgb2NjdXIgaW4gY2FzZSBvZiBub3JtYWwgKGRldGFjaGVkKSBzZWxlY3Rpb25zIGJlY2F1c2UgdGhleSBhcmUgInN0YXRpYyIgKGFzICJub3QgbGl2ZSIpCiAqIHdoaWNoIG1lYW4gdGhhdCB0aGV5IGFyZSBub3QgdXBkYXRlZCBvbmNlIHRoZSBkb2N1bWVudCBjaGFuZ2VzLgogKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBhdHRyaWJ1dGVLZXlzIEFycmF5IGNvbnRhaW5pbmcga2V5cyBvZiBhdHRyaWJ1dGVzIHRoYXQgY2hhbmdlZC4KICovCgovKioKICogRmlyZWQgd2hlbiBzZWxlY3Rpb24gbWFya2VyKHMpIGNoYW5nZWQuCiAqCiAqIEBldmVudCBjaGFuZ2U6bWFya2VyCiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlyZWN0Q2hhbmdlIFRoaXMgaXMgYWx3YXlzIHNldCB0byBgZmFsc2VgIGluIGNhc2Ugb2YgYGNoYW5nZTptYXJrZXJgIGV2ZW50IGFzIHRoZXJlIGlzIG5vIHBvc3NpYmlsaXR5CiAqIHRvIGNoYW5nZSBtYXJrZXJzIGRpcmVjdGx5IHRocm91Z2gge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnRzZWxlY3Rpb25+RG9jdW1lbnRTZWxlY3Rpb259IEFQSS4KICogU2VlIGFsc28ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnRzZWxlY3Rpb25+RG9jdW1lbnRTZWxlY3Rpb24jZXZlbnQ6Y2hhbmdlOnJhbmdlfSBhbmQKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnRzZWxlY3Rpb25+RG9jdW1lbnRTZWxlY3Rpb24jZXZlbnQ6Y2hhbmdlOmF0dHJpYnV0ZX0uCiAqIEBwYXJhbSB7QXJyYXkuPG1vZHVsZTplbmdpbmUvbW9kZWwvbWFya2VyY29sbGVjdGlvbn5NYXJrZXI+fSBvbGRNYXJrZXJzIE1hcmtlcnMgaW4gd2hpY2ggdGhlIHNlbGVjdGlvbiB3YXMgYmVmb3JlIHRoZSBjaGFuZ2UuCiAqLwovLyBgTGl2ZVNlbGVjdGlvbmAgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5IHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9ufSBhbmQgc2hvdWxkbid0IGJlIHVzZWQgZGlyZWN0bHkuCi8vCi8vIExpdmVTZWxlY3Rpb25gIGlzIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB1cG9uIGNoYW5nZXMgaW4gdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50fkRvY3VtZW50IGRvY3VtZW50fQovLyB0byBhbHdheXMgY29udGFpbiB2YWxpZCByYW5nZXMuIEl0cyBhdHRyaWJ1dGVzIGFyZSBpbmhlcml0ZWQgZnJvbSB0aGUgdGV4dCB1bmxlc3Mgc2V0IGV4cGxpY2l0bHkuCi8vCi8vIERpZmZlcmVuY2VzIGJldHdlZW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbn0gYW5kIGBMaXZlU2VsZWN0aW9uYCBhcmU6Ci8vICogdGhlcmUgaXMgYWx3YXlzIGEgcmFuZ2UgaW4gYExpdmVTZWxlY3Rpb25gIC0gZXZlbiBpZiBubyByYW5nZXMgd2VyZSBhZGRlZCB0aGVyZSBpcyBhICJkZWZhdWx0IHJhbmdlIgovLyBwcmVzZW50IGluIHRoZSBzZWxlY3Rpb24sCi8vICogcmFuZ2VzIGFkZGVkIHRvIHRoaXMgc2VsZWN0aW9uIHVwZGF0ZXMgYXV0b21hdGljYWxseSB3aGVuIHRoZSBkb2N1bWVudCBjaGFuZ2VzLAovLyAqIGF0dHJpYnV0ZXMgb2YgYExpdmVTZWxlY3Rpb25gIGFyZSB1cGRhdGVkIGF1dG9tYXRpY2FsbHkgYWNjb3JkaW5nIHRvIHNlbGVjdGlvbiByYW5nZXMuCi8vCi8vIEBleHRlbmRzIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbgovLwoKdmFyIExpdmVTZWxlY3Rpb24gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfU2VsZWN0aW9uKSB7CiAgX2luaGVyaXRzKExpdmVTZWxlY3Rpb24sIF9TZWxlY3Rpb24pOwoKICAvLyBDcmVhdGVzIGFuIGVtcHR5IGxpdmUgc2VsZWN0aW9uIGZvciBnaXZlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudH0uCiAgLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50fkRvY3VtZW50fSBkb2MgRG9jdW1lbnQgd2hpY2ggb3ducyB0aGlzIHNlbGVjdGlvbi4KICBmdW5jdGlvbiBMaXZlU2VsZWN0aW9uKGRvYykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXZlU2VsZWN0aW9uKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihMaXZlU2VsZWN0aW9uKS5jYWxsKHRoaXMpKTsgLy8gTGlzdCBvZiBzZWxlY3Rpb24gbWFya2Vycy4KICAgIC8vIE1hcmtlciBpcyBhIHNlbGVjdGlvbiBtYXJrZXIgd2hlbiBzZWxlY3Rpb24gcmFuZ2UgaXMgaW5zaWRlIHRoZSBtYXJrZXIgcmFuZ2UuCiAgICAvLwogICAgLy8gQHR5cGUge21vZHVsZTp1dGlscy9jb2xsZWN0aW9ufkNvbGxlY3Rpb259CgogICAgX3RoaXMubWFya2VycyA9IG5ldyBDb2xsZWN0aW9uKHsKICAgICAgaWRQcm9wZXJ0eTogJ25hbWUnCiAgICB9KTsgLy8gRG9jdW1lbnQgd2hpY2ggb3ducyB0aGlzIHNlbGVjdGlvbi4KICAgIC8vCiAgICAvLyBAcHJvdGVjdGVkCiAgICAvLyBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsfQoKICAgIF90aGlzLl9tb2RlbCA9IGRvYy5tb2RlbDsgLy8gRG9jdW1lbnQgd2hpY2ggb3ducyB0aGlzIHNlbGVjdGlvbi4KICAgIC8vCiAgICAvLyBAcHJvdGVjdGVkCiAgICAvLyBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50fkRvY3VtZW50fQoKICAgIF90aGlzLl9kb2N1bWVudCA9IGRvYzsgLy8gS2VlcHMgbWFwcGluZyBvZiBhdHRyaWJ1dGUgbmFtZSB0byBwcmlvcml0eSB3aXRoIHdoaWNoIHRoZSBhdHRyaWJ1dGUgZ290IG1vZGlmaWVkIChhZGRlZC9jaGFuZ2VkL3JlbW92ZWQpCiAgICAvLyBsYXN0IHRpbWUuIFBvc3NpYmxlIHZhbHVlcyBvZiBwcmlvcml0eSBhcmU6IGAnbG93J2AgYW5kIGAnbm9ybWFsJ2AuCiAgICAvLwogICAgLy8gUHJpb3JpdGllcyBhcmUgdXNlZCBieSBpbnRlcm5hbCBgTGl2ZVNlbGVjdGlvbmAgbWVjaGFuaXNtcy4gQWxsIGF0dHJpYnV0ZXMgc2V0IHVzaW5nIGBMaXZlU2VsZWN0aW9uYAogICAgLy8gYXR0cmlidXRlcyBBUEkgYXJlIHNldCB3aXRoIGAnbm9ybWFsJ2AgcHJpb3JpdHkuCiAgICAvLwogICAgLy8gQHByaXZhdGUKICAgIC8vIEBtZW1iZXIge01hcH0gbW9kdWxlOmVuZ2luZS9tb2RlbC9saXZlc2VsZWN0aW9ufkxpdmVTZWxlY3Rpb24jX2F0dHJpYnV0ZVByaW9yaXR5CgogICAgX3RoaXMuX2F0dHJpYnV0ZVByaW9yaXR5ID0gbmV3IE1hcCgpOyAvLyBDb250YWlucyBkYXRhIHJlcXVpcmVkIHRvIGZpeCByYW5nZXMgd2hpY2ggaGF2ZSBiZWVuIG1vdmVkIHRvIHRoZSBncmF2ZXlhcmQuCiAgICAvLyBAcHJpdmF0ZQogICAgLy8gQG1lbWJlciB7QXJyYXl9IG1vZHVsZTplbmdpbmUvbW9kZWwvbGl2ZXNlbGVjdGlvbn5MaXZlU2VsZWN0aW9uI19maXhHcmF2ZXlhcmRSYW5nZXNEYXRhCgogICAgX3RoaXMuX2ZpeEdyYXZleWFyZFJhbmdlc0RhdGEgPSBbXTsgLy8gRmxhZyB0aGF0IGluZm9ybXMgd2hldGhlciB0aGUgc2VsZWN0aW9uIHJhbmdlcyBoYXZlIGNoYW5nZWQuIEl0IGlzIGNoYW5nZWQgb24gdHJ1ZSB3aGVuIGBMaXZlUmFuZ2UjY2hhbmdlOnJhbmdlYCBldmVudCBpcyBmaXJlZC4KICAgIC8vIEBwcml2YXRlCiAgICAvLyBAbWVtYmVyIHtBcnJheX0gbW9kdWxlOmVuZ2luZS9tb2RlbC9saXZlc2VsZWN0aW9ufkxpdmVTZWxlY3Rpb24jX2hhc0NoYW5nZWRSYW5nZQoKICAgIF90aGlzLl9oYXNDaGFuZ2VkUmFuZ2UgPSBmYWxzZTsgLy8gRWFjaCBvdmVycmlkaW5nIGdyYXZpdHkgYWRkcyBhbiBVSUQgdG8gdGhlIHNldCBhbmQgZWFjaCByZW1vdmFsIHJlbW92ZXMgaXQuCiAgICAvLyBHcmF2aXR5IGlzIG92ZXJyaWRkZW4gd2hlbiB0aGVyZSdzIGF0IGxlYXN0IG9uZSBVSUQgaW4gdGhlIHNldC4KICAgIC8vIEdyYXZpdHkgaXMgcmVzdG9yZWQgd2hlbiB0aGUgc2V0IGlzIGVtcHR5LgogICAgLy8gVGhpcyBpcyB0byBwcmV2ZW50IGNvbmZsaWN0cyB3aGVuIGdyYXZpdHkgaXMgb3ZlcnJpZGRlbiBieSBtb3JlIHRoYW4gb25lIGZlYXR1cmUgYXQgdGhlIHNhbWUgdGltZS4KICAgIC8vIEBwcml2YXRlCiAgICAvLyBAdHlwZSB7U2V0fQoKICAgIF90aGlzLl9vdmVycmlkZGVuR3Jhdml0eVJlZ2lzdGVyID0gbmV3IFNldCgpOyAvLyBFbnN1cmUgc2VsZWN0aW9uIGlzIGNvcnJlY3QgYWZ0ZXIgZWFjaCBvcGVyYXRpb24uCgogICAgX3RoaXMubGlzdGVuVG8oX3RoaXMuX21vZGVsLCAnYXBwbHlPcGVyYXRpb24nLCBmdW5jdGlvbiAoZXZ0LCBhcmdzKSB7CiAgICAgIHZhciBvcGVyYXRpb24gPSBhcmdzWzBdOwoKICAgICAgaWYgKCFvcGVyYXRpb24uaXNEb2N1bWVudE9wZXJhdGlvbiB8fCBvcGVyYXRpb24udHlwZSA9PSAnbWFya2VyJyB8fCBvcGVyYXRpb24udHlwZSA9PSAncmVuYW1lJyB8fCBvcGVyYXRpb24udHlwZSA9PSAnbm9vcCcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHdoaWxlIChfdGhpcy5fZml4R3JhdmV5YXJkUmFuZ2VzRGF0YS5sZW5ndGgpIHsKICAgICAgICB2YXIgX3RoaXMkX2ZpeEdyYXZleWFyZFJhID0gX3RoaXMuX2ZpeEdyYXZleWFyZFJhbmdlc0RhdGEuc2hpZnQoKSwKICAgICAgICAgICAgbGl2ZVJhbmdlID0gX3RoaXMkX2ZpeEdyYXZleWFyZFJhLmxpdmVSYW5nZSwKICAgICAgICAgICAgc291cmNlUG9zaXRpb24gPSBfdGhpcyRfZml4R3JhdmV5YXJkUmEuc291cmNlUG9zaXRpb247CgogICAgICAgIF90aGlzLl9maXhHcmF2ZXlhcmRTZWxlY3Rpb24obGl2ZVJhbmdlLCBzb3VyY2VQb3NpdGlvbik7CiAgICAgIH0KCiAgICAgIGlmIChfdGhpcy5faGFzQ2hhbmdlZFJhbmdlKSB7CiAgICAgICAgX3RoaXMuX2hhc0NoYW5nZWRSYW5nZSA9IGZhbHNlOwoKICAgICAgICBfdGhpcy5maXJlKCdjaGFuZ2U6cmFuZ2UnLCB7CiAgICAgICAgICBkaXJlY3RDaGFuZ2U6IGZhbHNlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgcHJpb3JpdHk6ICdsb3dlc3QnCiAgICB9KTsgLy8gRW5zdXJlIHNlbGVjdGlvbiBpcyBjb3JyZWN0IGFuZCB1cCB0byBkYXRlIGFmdGVyIGVhY2ggcmFuZ2UgY2hhbmdlLgoKCiAgICBfdGhpcy5vbignY2hhbmdlOnJhbmdlJywgZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF90aGlzLmdldFJhbmdlcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkgewogICAgICAgICAgdmFyIHJhbmdlID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgaWYgKCFfdGhpcy5fZG9jdW1lbnQuX3ZhbGlkYXRlU2VsZWN0aW9uUmFuZ2UocmFuZ2UpKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSYW5nZSBmcm9tIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9uIGRvY3VtZW50IHNlbGVjdGlvbn0KICAgICAgICAgICAgICogc3RhcnRzIG9yIGVuZHMgYXQgaW5jb3JyZWN0IHBvc2l0aW9uLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBAZXJyb3IgZG9jdW1lbnQtc2VsZWN0aW9uLXdyb25nLXBvc2l0aW9uCiAgICAgICAgICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCdkb2N1bWVudC1zZWxlY3Rpb24td3JvbmctcG9zaXRpb246IFJhbmdlIGZyb20gZG9jdW1lbnQgc2VsZWN0aW9uIHN0YXJ0cyBvciBlbmRzIGF0IGluY29ycmVjdCBwb3NpdGlvbi4nLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgewogICAgICAgICAgICAgIHJhbmdlOiByYW5nZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0cnkgewogICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0pOyAvLyBVcGRhdGUgbWFya2VycyBkYXRhIHN0b3JlZCBieSB0aGUgc2VsZWN0aW9uIGFmdGVyIGVhY2ggbWFya2VyIGNoYW5nZS4KCgogICAgX3RoaXMubGlzdGVuVG8oX3RoaXMuX21vZGVsLm1hcmtlcnMsICd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5fdXBkYXRlTWFya2VycygpOwogICAgfSk7IC8vIEVuc3VyZSBzZWxlY3Rpb24gaXMgdXAgdG8gZGF0ZSBhZnRlciBlYWNoIGNoYW5nZSBibG9jay4KCgogICAgX3RoaXMubGlzdGVuVG8oX3RoaXMuX2RvY3VtZW50LCAnY2hhbmdlJywgZnVuY3Rpb24gKGV2dCwgYmF0Y2gpIHsKICAgICAgY2xlYXJBdHRyaWJ1dGVzU3RvcmVkSW5FbGVtZW50KF90aGlzLl9tb2RlbCwgYmF0Y2gpOwogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKExpdmVTZWxlY3Rpb24sIFt7CiAgICBrZXk6ICJkZXN0cm95IiwKICAgIC8vIFVuYmluZHMgYWxsIGV2ZW50cyBwcmV2aW91c2x5IGJvdW5kIGJ5IGxpdmUgc2VsZWN0aW9uLgogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fcmFuZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpcy5fcmFuZ2VzW2ldLmRldGFjaCgpOwogICAgICB9CgogICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRSYW5nZXMiLAogICAgdmFsdWU6CiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBnZXRSYW5nZXMoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBnZXRSYW5nZXMkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmICghdGhpcy5fcmFuZ2VzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5kZWxlZ2F0ZVlpZWxkKF9nZXQoX2dldFByb3RvdHlwZU9mKExpdmVTZWxlY3Rpb24ucHJvdG90eXBlKSwgImdldFJhbmdlcyIsIHRoaXMpLmNhbGwodGhpcyksICJ0MCIsIDIpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kb2N1bWVudC5fZ2V0RGVmYXVsdFJhbmdlKCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIGdldFJhbmdlcywgdGhpcyk7CiAgICB9KQogIH0sIHsKICAgIGtleTogImdldEZpcnN0UmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpcnN0UmFuZ2UoKSB7CiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihMaXZlU2VsZWN0aW9uLnByb3RvdHlwZSksICJnZXRGaXJzdFJhbmdlIiwgdGhpcykuY2FsbCh0aGlzKSB8fCB0aGlzLl9kb2N1bWVudC5fZ2V0RGVmYXVsdFJhbmdlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGFzdFJhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0UmFuZ2UoKSB7CiAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihMaXZlU2VsZWN0aW9uLnByb3RvdHlwZSksICJnZXRMYXN0UmFuZ2UiLCB0aGlzKS5jYWxsKHRoaXMpIHx8IHRoaXMuX2RvY3VtZW50Ll9nZXREZWZhdWx0UmFuZ2UoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRUbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VG8oc2VsZWN0YWJsZSwgb3B0aW9uc09yUGxhY2VPck9mZnNldCwgb3B0aW9ucykgewogICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihMaXZlU2VsZWN0aW9uLnByb3RvdHlwZSksICJzZXRUbyIsIHRoaXMpLmNhbGwodGhpcywgc2VsZWN0YWJsZSwgb3B0aW9uc09yUGxhY2VPck9mZnNldCwgb3B0aW9ucyk7CgogICAgICB0aGlzLl91cGRhdGVBdHRyaWJ1dGVzKHRydWUpOwoKICAgICAgdGhpcy5fdXBkYXRlTWFya2VycygpOwogICAgfQogIH0sIHsKICAgIGtleTogInNldEZvY3VzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1cyhpdGVtT3JQb3NpdGlvbiwgb2Zmc2V0KSB7CiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKExpdmVTZWxlY3Rpb24ucHJvdG90eXBlKSwgInNldEZvY3VzIiwgdGhpcykuY2FsbCh0aGlzLCBpdGVtT3JQb3NpdGlvbiwgb2Zmc2V0KTsKCiAgICAgIHRoaXMuX3VwZGF0ZUF0dHJpYnV0ZXModHJ1ZSk7CgogICAgICB0aGlzLl91cGRhdGVNYXJrZXJzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0QXR0cmlidXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkgewogICAgICBpZiAodGhpcy5fc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpKSB7CiAgICAgICAgLy8gRmlyZSBldmVudCB3aXRoIGV4YWN0IGRhdGEuCiAgICAgICAgdmFyIGF0dHJpYnV0ZUtleXMgPSBba2V5XTsKICAgICAgICB0aGlzLmZpcmUoJ2NoYW5nZTphdHRyaWJ1dGUnLCB7CiAgICAgICAgICBhdHRyaWJ1dGVLZXlzOiBhdHRyaWJ1dGVLZXlzLAogICAgICAgICAgZGlyZWN0Q2hhbmdlOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVBdHRyaWJ1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShrZXkpIHsKICAgICAgaWYgKHRoaXMuX3JlbW92ZUF0dHJpYnV0ZShrZXkpKSB7CiAgICAgICAgLy8gRmlyZSBldmVudCB3aXRoIGV4YWN0IGRhdGEuCiAgICAgICAgdmFyIGF0dHJpYnV0ZUtleXMgPSBba2V5XTsKICAgICAgICB0aGlzLmZpcmUoJ2NoYW5nZTphdHRyaWJ1dGUnLCB7CiAgICAgICAgICBhdHRyaWJ1dGVLZXlzOiBhdHRyaWJ1dGVLZXlzLAogICAgICAgICAgZGlyZWN0Q2hhbmdlOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJvdmVycmlkZUdyYXZpdHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG92ZXJyaWRlR3Jhdml0eSgpIHsKICAgICAgdmFyIG92ZXJyaWRlVWlkID0gdWlkKCk7IC8vIFJlbWVtYmVyIHRoYXQgYW5vdGhlciBvdmVycmlkaW5nIGhhcyBiZWVuIHJlcXVlc3RlZC4gSXQgd2lsbCBuZWVkIHRvIGJlIHJlbW92ZWQKICAgICAgLy8gYmVmb3JlIHRoZSBncmF2aXR5IGlzIHRvIGJlIHJlc3RvcmVkLgoKICAgICAgdGhpcy5fb3ZlcnJpZGRlbkdyYXZpdHlSZWdpc3Rlci5hZGQob3ZlcnJpZGVVaWQpOwoKICAgICAgaWYgKHRoaXMuX292ZXJyaWRkZW5HcmF2aXR5UmVnaXN0ZXIuc2l6ZSA9PT0gMSkgewogICAgICAgIHRoaXMuX3VwZGF0ZUF0dHJpYnV0ZXModHJ1ZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBvdmVycmlkZVVpZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXN0b3JlR3Jhdml0eSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdG9yZUdyYXZpdHkodWlkKSB7CiAgICAgIGlmICghdGhpcy5fb3ZlcnJpZGRlbkdyYXZpdHlSZWdpc3Rlci5oYXModWlkKSkgewogICAgICAgIC8qKgogICAgICAgICAqIFJlc3RvcmluZyBncmF2aXR5IGZvciBhbiB1bmtub3duIFVJRCBpcyBub3QgcG9zc2libGUuIE1ha2Ugc3VyZSB5b3UgYXJlIHVzaW5nIGEgY29ycmVjdAogICAgICAgICAqIFVJRCBvYnRhaW5lZCBmcm9tIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyI292ZXJyaWRlU2VsZWN0aW9uR3Jhdml0eX0gdG8gcmVzdG9yZS4KICAgICAgICAgKgogICAgICAgICAqIEBlcnJvciBkb2N1bWVudC1zZWxlY3Rpb24tZ3Jhdml0eS13cm9uZy1yZXN0b3JlCiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHVpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgcmV0dXJuZWQgYnkKICAgICAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudHNlbGVjdGlvbn5Eb2N1bWVudFNlbGVjdGlvbiNfb3ZlcnJpZGVHcmF2aXR5fS4KICAgICAgICAgKi8KICAgICAgICB0aHJvdyBuZXcgQ0tFZGl0b3JFcnJvcignZG9jdW1lbnQtc2VsZWN0aW9uLWdyYXZpdHktd3JvbmctcmVzdG9yZTogQXR0ZW1wdGluZyB0byByZXN0b3JlIHRoZSBzZWxlY3Rpb24gZ3Jhdml0eSBmb3IgYW4gdW5rbm93biBVSUQuJywgdGhpcywgewogICAgICAgICAgdWlkOiB1aWQKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdGhpcy5fb3ZlcnJpZGRlbkdyYXZpdHlSZWdpc3Rlci5kZWxldGUodWlkKTsgLy8gUmVzdG9yZSBncmF2aXR5IG9ubHkgd2hlbiBhbGwgb3ZlcnJpZGluZyBoYXZlIGJlZW4gcmVzdG9yZWQuCgoKICAgICAgaWYgKCF0aGlzLmlzR3Jhdml0eU92ZXJyaWRkZW4pIHsKICAgICAgICB0aGlzLl91cGRhdGVBdHRyaWJ1dGVzKHRydWUpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX3BvcFJhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcG9wUmFuZ2UoKSB7CiAgICAgIHRoaXMuX3Jhbmdlcy5wb3AoKS5kZXRhY2goKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfcHVzaFJhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcHVzaFJhbmdlKHJhbmdlKSB7CiAgICAgIHZhciBsaXZlUmFuZ2UgPSB0aGlzLl9wcmVwYXJlUmFuZ2UocmFuZ2UpOyAvLyBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZCB3aGVuIGdpdmVuIGByYW5nZWAgaXMgaW4gZ3JhdmV5YXJkIHJvb3QuCgoKICAgICAgaWYgKGxpdmVSYW5nZSkgewogICAgICAgIHRoaXMuX3Jhbmdlcy5wdXNoKGxpdmVSYW5nZSk7CiAgICAgIH0KICAgIH0gLy8gUHJlcGFyZXMgZ2l2ZW4gcmFuZ2UgdG8gYmUgYWRkZWQgdG8gc2VsZWN0aW9uLiBDaGVja3MgaWYgaXQgaXMgY29ycmVjdCwKICAgIC8vIGNvbnZlcnRzIGl0IHRvIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2xpdmVyYW5nZX5MaXZlUmFuZ2UgTGl2ZVJhbmdlfQogICAgLy8gYW5kIHNldHMgbGlzdGVuZXJzIGxpc3RlbmluZyB0byB0aGUgcmFuZ2UncyBjaGFuZ2UgZXZlbnQuCiAgICAvLwogICAgLy8gQHByaXZhdGUKICAgIC8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gcmFuZ2UKCiAgfSwgewogICAga2V5OiAiX3ByZXBhcmVSYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVSYW5nZShyYW5nZSkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuX2NoZWNrUmFuZ2UocmFuZ2UpOwoKICAgICAgaWYgKHJhbmdlLnJvb3QgPT0gdGhpcy5fZG9jdW1lbnQuZ3JhdmV5YXJkKSB7CiAgICAgICAgLy8gQGlmIENLX0RFQlVHIC8vIGNvbnNvbGUud2FybiggJ1RyeWluZyB0byBhZGQgYSBSYW5nZSB0aGF0IGlzIGluIHRoZSBncmF2ZXlhcmQgcm9vdC4gUmFuZ2UgcmVqZWN0ZWQuJyApOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGxpdmVSYW5nZSA9IExpdmVSYW5nZS5mcm9tUmFuZ2UocmFuZ2UpOwogICAgICBsaXZlUmFuZ2Uub24oJ2NoYW5nZTpyYW5nZScsIGZ1bmN0aW9uIChldnQsIG9sZFJhbmdlLCBkYXRhKSB7CiAgICAgICAgX3RoaXMyLl9oYXNDaGFuZ2VkUmFuZ2UgPSB0cnVlOyAvLyBJZiBgTGl2ZVJhbmdlYCBpcyBpbiB3aG9sZSBtb3ZlZCB0byB0aGUgZ3JhdmV5YXJkLCBzYXZlIG5lY2Vzc2FyeSBkYXRhLiBJdCB3aWxsIGJlIGZpeGVkIG9uIGBNb2RlbCNhcHBseU9wZXJhdGlvbmAgZXZlbnQuCgogICAgICAgIGlmIChsaXZlUmFuZ2Uucm9vdCA9PSBfdGhpczIuX2RvY3VtZW50LmdyYXZleWFyZCkgewogICAgICAgICAgX3RoaXMyLl9maXhHcmF2ZXlhcmRSYW5nZXNEYXRhLnB1c2goewogICAgICAgICAgICBsaXZlUmFuZ2U6IGxpdmVSYW5nZSwKICAgICAgICAgICAgc291cmNlUG9zaXRpb246IGRhdGEuZGVsZXRpb25Qb3NpdGlvbgogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGxpdmVSYW5nZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfdXBkYXRlTWFya2VycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZU1hcmtlcnMoKSB7CiAgICAgIHZhciBtYXJrZXJzID0gW107CiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IHRoaXMuX21vZGVsLm1hcmtlcnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHsKICAgICAgICAgIHZhciBtYXJrZXIgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICB2YXIgbWFya2VyUmFuZ2UgPSBtYXJrZXIuZ2V0UmFuZ2UoKTsKICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7CiAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7CiAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSB0aGlzLmdldFJhbmdlcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7CiAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvblJhbmdlID0gX3N0ZXAzLnZhbHVlOwoKICAgICAgICAgICAgICBpZiAobWFya2VyUmFuZ2UuY29udGFpbnNSYW5nZShzZWxlY3Rpb25SYW5nZSwgIXNlbGVjdGlvblJhbmdlLmlzQ29sbGFwc2VkKSkgewogICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKG1hcmtlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTsKICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHsKICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgb2xkTWFya2VycyA9IEFycmF5LmZyb20odGhpcy5tYXJrZXJzKTsKCiAgICAgIGZvciAodmFyIF9pID0gMCwgX21hcmtlcnMgPSBtYXJrZXJzOyBfaSA8IF9tYXJrZXJzLmxlbmd0aDsgX2krKykgewogICAgICAgIHZhciBfbWFya2VyID0gX21hcmtlcnNbX2ldOwoKICAgICAgICBpZiAoIXRoaXMubWFya2Vycy5oYXMoX21hcmtlcikpIHsKICAgICAgICAgIHRoaXMubWFya2Vycy5hZGQoX21hcmtlcik7CiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9BcnJheSRmcm9tID0gQXJyYXkuZnJvbSh0aGlzLm1hcmtlcnMpOyBfaTIgPCBfQXJyYXkkZnJvbS5sZW5ndGg7IF9pMisrKSB7CiAgICAgICAgdmFyIF9tYXJrZXIyID0gX0FycmF5JGZyb21bX2kyXTsKCiAgICAgICAgaWYgKCFtYXJrZXJzLmluY2x1ZGVzKF9tYXJrZXIyKSkgewogICAgICAgICAgdGhpcy5tYXJrZXJzLnJlbW92ZShfbWFya2VyMik7CiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChjaGFuZ2VkKSB7CiAgICAgICAgdGhpcy5maXJlKCdjaGFuZ2U6bWFya2VyJywgewogICAgICAgICAgb2xkTWFya2Vyczogb2xkTWFya2VycywKICAgICAgICAgIGRpcmVjdENoYW5nZTogZmFsc2UKICAgICAgICB9KTsKICAgICAgfQogICAgfSAvLyBVcGRhdGVzIHRoaXMgc2VsZWN0aW9uIGF0dHJpYnV0ZXMgYWNjb3JkaW5nIHRvIGl0cyByYW5nZXMgYW5kIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudCBtb2RlbCBkb2N1bWVudH0uCiAgICAvLwogICAgLy8gQHByb3RlY3RlZAogICAgLy8gQHBhcmFtIHtCb29sZWFufSBjbGVhckFsbAogICAgLy8gQGZpcmVzIGNoYW5nZTphdHRyaWJ1dGUKCiAgfSwgewogICAga2V5OiAiX3VwZGF0ZUF0dHJpYnV0ZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVBdHRyaWJ1dGVzKGNsZWFyQWxsKSB7CiAgICAgIHZhciBuZXdBdHRyaWJ1dGVzID0gdG9NYXAodGhpcy5fZ2V0U3Vycm91bmRpbmdBdHRyaWJ1dGVzKCkpOwogICAgICB2YXIgb2xkQXR0cmlidXRlcyA9IHRvTWFwKHRoaXMuZ2V0QXR0cmlidXRlcygpKTsKCiAgICAgIGlmIChjbGVhckFsbCkgewogICAgICAgIC8vIElmIGBjbGVhckFsbGAgcmVtb3ZlIGFsbCBhdHRyaWJ1dGVzIGFuZCByZXNldCBwcmlvcml0aWVzLgogICAgICAgIHRoaXMuX2F0dHJpYnV0ZVByaW9yaXR5ID0gbmV3IE1hcCgpOwogICAgICAgIHRoaXMuX2F0dHJzID0gbmV3IE1hcCgpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIElmIG5vdCwgcmVtb3ZlIG9ubHkgYXR0cmlidXRlcyBhZGRlZCB3aXRoIGBsb3dgIHByaW9yaXR5LgogICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7CiAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlOwogICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gdGhpcy5fYXR0cmlidXRlUHJpb3JpdHlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHsKICAgICAgICAgICAgdmFyIF9zdGVwNCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwNC52YWx1ZSwgMiksCiAgICAgICAgICAgICAgICBrZXkgPSBfc3RlcDQkdmFsdWVbMF0sCiAgICAgICAgICAgICAgICBwcmlvcml0eSA9IF9zdGVwNCR2YWx1ZVsxXTsKCiAgICAgICAgICAgIGlmIChwcmlvcml0eSA9PSAnbG93JykgewogICAgICAgICAgICAgIHRoaXMuX2F0dHJzLmRlbGV0ZShrZXkpOwoKICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVQcmlvcml0eS5kZWxldGUoa2V5KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTsKICAgICAgICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkgewogICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5fc2V0QXR0cmlidXRlc1RvKG5ld0F0dHJpYnV0ZXMpOyAvLyBMZXQncyBldmFsdWF0ZSB3aGljaCBhdHRyaWJ1dGVzIHJlYWxseSBjaGFuZ2VkLgoKCiAgICAgIHZhciBjaGFuZ2VkID0gW107IC8vIEZpcnN0LCBsb29wIHRocm91Z2ggYWxsIGF0dHJpYnV0ZXMgdGhhdCBhcmUgc2V0IG9uIHNlbGVjdGlvbiByaWdodCBub3cuCiAgICAgIC8vIENoZWNrIHdoaWNoIG9mIHRoZW0gYXJlIGRpZmZlcmVudCB0aGFuIG9sZCBhdHRyaWJ1dGVzLgoKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gdHJ1ZTsKICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNSA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I1ID0gdW5kZWZpbmVkOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I1ID0gdGhpcy5nZXRBdHRyaWJ1dGVzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDU7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSAoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWUpIHsKICAgICAgICAgIHZhciBfc3RlcDUkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDUudmFsdWUsIDIpLAogICAgICAgICAgICAgIG5ld0tleSA9IF9zdGVwNSR2YWx1ZVswXSwKICAgICAgICAgICAgICBuZXdWYWx1ZSA9IF9zdGVwNSR2YWx1ZVsxXTsKCiAgICAgICAgICBpZiAoIW9sZEF0dHJpYnV0ZXMuaGFzKG5ld0tleSkgfHwgb2xkQXR0cmlidXRlcy5nZXQobmV3S2V5KSAhPT0gbmV3VmFsdWUpIHsKICAgICAgICAgICAgY2hhbmdlZC5wdXNoKG5ld0tleSk7CiAgICAgICAgICB9CiAgICAgICAgfSAvLyBUaGVuLCBjaGVjayB3aGljaCBvZiBvbGQgYXR0cmlidXRlcyBnb3QgcmVtb3ZlZC4KCiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yNSA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3I1ID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ICYmIF9pdGVyYXRvcjUucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yNS5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNSkgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjYgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjYgPSBvbGRBdHRyaWJ1dGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA2OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gKF9zdGVwNiA9IF9pdGVyYXRvcjYubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSB0cnVlKSB7CiAgICAgICAgICB2YXIgX3N0ZXA2JHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXA2LnZhbHVlLCAxKSwKICAgICAgICAgICAgICBvbGRLZXkgPSBfc3RlcDYkdmFsdWVbMF07CgogICAgICAgICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZShvbGRLZXkpKSB7CiAgICAgICAgICAgIGNoYW5nZWQucHVzaChvbGRLZXkpOwogICAgICAgICAgfQogICAgICAgIH0gLy8gRmlyZSBldmVudCB3aXRoIGV4YWN0IGRhdGEgKGZpcmUgb25seSBpZiBhbnl0aGluZyBjaGFuZ2VkKS4KCiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yNiA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3I2ID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ICYmIF9pdGVyYXRvcjYucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yNi5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNikgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjY7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoY2hhbmdlZC5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5maXJlKCdjaGFuZ2U6YXR0cmlidXRlJywgewogICAgICAgICAgYXR0cmlidXRlS2V5czogY2hhbmdlZCwKICAgICAgICAgIGRpcmVjdENoYW5nZTogZmFsc2UKICAgICAgICB9KTsKICAgICAgfQogICAgfSAvLyBJbnRlcm5hbCBtZXRob2QgZm9yIHNldHRpbmcgYExpdmVTZWxlY3Rpb25gIGF0dHJpYnV0ZS4gU3VwcG9ydHMgYXR0cmlidXRlIHByaW9yaXRpZXMgKHRocm91Z2ggYGRpcmVjdENoYW5nZWAKICAgIC8vIHBhcmFtZXRlcikuCiAgICAvLwogICAgLy8gQHByaXZhdGUKICAgIC8vIEBwYXJhbSB7U3RyaW5nfSBrZXkgQXR0cmlidXRlIGtleS4KICAgIC8vIEBwYXJhbSB7Kn0gdmFsdWUgQXR0cmlidXRlIHZhbHVlLgogICAgLy8gQHBhcmFtIHtCb29sZWFufSBbZGlyZWN0Q2hhbmdlPXRydWVdIGB0cnVlYCBpZiB0aGUgY2hhbmdlIGlzIGNhdXNlZCBieSBgU2VsZWN0aW9uYCBBUEksIGBmYWxzZWAgaWYgY2hhbmdlCiAgICAvLyBpcyBjYXVzZWQgYnkgYEJhdGNoYCBBUEkuCiAgICAvLyBAcmV0dXJucyB7Qm9vbGVhbn0gV2hldGhlciB2YWx1ZSBoYXMgY2hhbmdlZC4KCiAgfSwgewogICAga2V5OiAiX3NldEF0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEF0dHJpYnV0ZShrZXksIHZhbHVlKSB7CiAgICAgIHZhciBkaXJlY3RDaGFuZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7CiAgICAgIHZhciBwcmlvcml0eSA9IGRpcmVjdENoYW5nZSA/ICdub3JtYWwnIDogJ2xvdyc7CgogICAgICBpZiAocHJpb3JpdHkgPT0gJ2xvdycgJiYgdGhpcy5fYXR0cmlidXRlUHJpb3JpdHkuZ2V0KGtleSkgPT0gJ25vcm1hbCcpIHsKICAgICAgICAvLyBQcmlvcml0eSB0b28gbG93LgogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdmFyIG9sZFZhbHVlID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTGl2ZVNlbGVjdGlvbi5wcm90b3R5cGUpLCAiZ2V0QXR0cmlidXRlIiwgdGhpcykuY2FsbCh0aGlzLCBrZXkpOyAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuCgoKICAgICAgaWYgKG9sZFZhbHVlID09PSB2YWx1ZSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5fYXR0cnMuc2V0KGtleSwgdmFsdWUpOyAvLyBVcGRhdGUgcHJpb3JpdGllcyBtYXAuCgoKICAgICAgdGhpcy5fYXR0cmlidXRlUHJpb3JpdHkuc2V0KGtleSwgcHJpb3JpdHkpOwoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IC8vIEludGVybmFsIG1ldGhvZCBmb3IgcmVtb3ZpbmcgYExpdmVTZWxlY3Rpb25gIGF0dHJpYnV0ZS4gU3VwcG9ydHMgYXR0cmlidXRlIHByaW9yaXRpZXMgKHRocm91Z2ggYGRpcmVjdENoYW5nZWAKICAgIC8vIHBhcmFtZXRlcikuCiAgICAvLwogICAgLy8gTk9URTogRXZlbiBpZiBhdHRyaWJ1dGUgaXMgbm90IHByZXNlbnQgaW4gdGhlIHNlbGVjdGlvbiBidXQgaXMgcHJvdmlkZWQgdG8gdGhpcyBtZXRob2QsIGl0J3MgcHJpb3JpdHkgd2lsbAogICAgLy8gYmUgY2hhbmdlZCBhY2NvcmRpbmcgdG8gYGRpcmVjdENoYW5nZWAgcGFyYW1ldGVyLgogICAgLy8KICAgIC8vIEBwcml2YXRlCiAgICAvLyBAcGFyYW0ge1N0cmluZ30ga2V5IEF0dHJpYnV0ZSBrZXkuCiAgICAvLyBAcGFyYW0ge0Jvb2xlYW59IFtkaXJlY3RDaGFuZ2U9dHJ1ZV0gYHRydWVgIGlmIHRoZSBjaGFuZ2UgaXMgY2F1c2VkIGJ5IGBTZWxlY3Rpb25gIEFQSSwgYGZhbHNlYCBpZiBjaGFuZ2UKICAgIC8vIGlzIGNhdXNlZCBieSBgQmF0Y2hgIEFQSS4KICAgIC8vIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIGF0dHJpYnV0ZSB3YXMgcmVtb3ZlZC4gTWF5IG5vdCBiZSB0cnVlIGlmIHN1Y2ggYXR0cmlidXRlcyBkaWRuJ3QgZXhpc3Qgb3IgdGhlCiAgICAvLyBleGlzdGluZyBhdHRyaWJ1dGUgaGFkIGhpZ2hlciBwcmlvcml0eS4KCiAgfSwgewogICAga2V5OiAiX3JlbW92ZUF0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZUF0dHJpYnV0ZShrZXkpIHsKICAgICAgdmFyIGRpcmVjdENoYW5nZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTsKICAgICAgdmFyIHByaW9yaXR5ID0gZGlyZWN0Q2hhbmdlID8gJ25vcm1hbCcgOiAnbG93JzsKCiAgICAgIGlmIChwcmlvcml0eSA9PSAnbG93JyAmJiB0aGlzLl9hdHRyaWJ1dGVQcmlvcml0eS5nZXQoa2V5KSA9PSAnbm9ybWFsJykgewogICAgICAgIC8vIFByaW9yaXR5IHRvbyBsb3cuCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IC8vIFVwZGF0ZSBwcmlvcml0aWVzIG1hcC4KCgogICAgICB0aGlzLl9hdHRyaWJ1dGVQcmlvcml0eS5zZXQoa2V5LCBwcmlvcml0eSk7IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHZhbHVlIGhhcyBub3QgY2hhbmdlZC4KCgogICAgICBpZiAoIV9nZXQoX2dldFByb3RvdHlwZU9mKExpdmVTZWxlY3Rpb24ucHJvdG90eXBlKSwgImhhc0F0dHJpYnV0ZSIsIHRoaXMpLmNhbGwodGhpcywga2V5KSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5fYXR0cnMuZGVsZXRlKGtleSk7CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gLy8gSW50ZXJuYWwgbWV0aG9kIGZvciBzZXR0aW5nIG11bHRpcGxlIGBMaXZlU2VsZWN0aW9uYCBhdHRyaWJ1dGVzLiBTdXBwb3J0cyBhdHRyaWJ1dGUgcHJpb3JpdGllcyAodGhyb3VnaAogICAgLy8gYGRpcmVjdENoYW5nZWAgcGFyYW1ldGVyKS4KICAgIC8vCiAgICAvLyBAcHJpdmF0ZQogICAgLy8gQHBhcmFtIHtNYXAuPFN0cmluZywqPn0gYXR0cnMgSXRlcmFibGUgb2JqZWN0IGNvbnRhaW5pbmcgYXR0cmlidXRlcyB0byBiZSBzZXQuCiAgICAvLyBAcmV0dXJucyB7U2V0LjxTdHJpbmc+fSBDaGFuZ2VkIGF0dHJpYnV0ZSBrZXlzLgoKICB9LCB7CiAgICBrZXk6ICJfc2V0QXR0cmlidXRlc1RvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0QXR0cmlidXRlc1RvKGF0dHJzKSB7CiAgICAgIHZhciBjaGFuZ2VkID0gbmV3IFNldCgpOwogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I3ID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjcgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjcgPSB0aGlzLmdldEF0dHJpYnV0ZXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IChfc3RlcDcgPSBfaXRlcmF0b3I3Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ID0gdHJ1ZSkgewogICAgICAgICAgdmFyIF9zdGVwNyR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwNy52YWx1ZSwgMiksCiAgICAgICAgICAgICAgb2xkS2V5ID0gX3N0ZXA3JHZhbHVlWzBdLAogICAgICAgICAgICAgIG9sZFZhbHVlID0gX3N0ZXA3JHZhbHVlWzFdOwoKICAgICAgICAgIC8vIERvIG5vdCByZW1vdmUgYXR0cmlidXRlIGlmIGF0dHJpYnV0ZSB3aXRoIHNhbWUga2V5IGFuZCB2YWx1ZSBpcyBhYm91dCB0byBiZSBzZXQuCiAgICAgICAgICBpZiAoYXR0cnMuZ2V0KG9sZEtleSkgPT09IG9sZFZhbHVlKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSAvLyBBbGwgcmVzdCBhdHRyaWJ1dGVzIHdpbGwgYmUgcmVtb3ZlZCBzbyBjaGFuZ2VkIGF0dHJpYnV0ZXMgd29uJ3QgY2hhbmdlIC4KCgogICAgICAgICAgdGhpcy5fcmVtb3ZlQXR0cmlidXRlKG9sZEtleSwgZmFsc2UpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I3ID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvcjcgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgJiYgX2l0ZXJhdG9yNy5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3I3LnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I3KSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOCA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjggPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yOCA9IHVuZGVmaW5lZDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yOCA9IGF0dHJzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA4OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb244ID0gKF9zdGVwOCA9IF9pdGVyYXRvcjgubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSB0cnVlKSB7CiAgICAgICAgICB2YXIgX3N0ZXA4JHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXA4LnZhbHVlLCAyKSwKICAgICAgICAgICAgICBrZXkgPSBfc3RlcDgkdmFsdWVbMF0sCiAgICAgICAgICAgICAgdmFsdWUgPSBfc3RlcDgkdmFsdWVbMV07CgogICAgICAgICAgLy8gQXR0cmlidXRlIG1heSBub3QgYmUgc2V0IGJlY2F1c2Ugb2YgYXR0cmlidXRlcyBvciBiZWNhdXNlIHNhbWUga2V5L3ZhbHVlIGlzIGFscmVhZHkgYWRkZWQuCiAgICAgICAgICB2YXIgZ290QWRkZWQgPSB0aGlzLl9zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSwgZmFsc2UpOwoKICAgICAgICAgIGlmIChnb3RBZGRlZCkgewogICAgICAgICAgICBjaGFuZ2VkLmFkZChrZXkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I4ID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvcjggPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggJiYgX2l0ZXJhdG9yOC5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3I4LnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I4KSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yODsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBjaGFuZ2VkOwogICAgfSAvLyBSZXR1cm5zIGFuIGl0ZXJhYmxlIHRoYXQgaXRlcmF0ZXMgdGhyb3VnaCBhbGwgc2VsZWN0aW9uIGF0dHJpYnV0ZXMgc3RvcmVkIGluIGN1cnJlbnQgc2VsZWN0aW9uJ3MgcGFyZW50LgogICAgLy8KICAgIC8vIEBwcm90ZWN0ZWQKICAgIC8vIEByZXR1cm5zIHtJdGVyYWJsZS48Kj59CgogIH0sIHsKICAgIGtleTogIl9nZXRTdG9yZWRBdHRyaWJ1dGVzIiwKICAgIHZhbHVlOgogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2dldFN0b3JlZEF0dHJpYnV0ZXMoKSB7CiAgICAgIHZhciBzZWxlY3Rpb25QYXJlbnQsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245LCBfZGlkSXRlcmF0b3JFcnJvcjksIF9pdGVyYXRvckVycm9yOSwgX2l0ZXJhdG9yOSwgX3N0ZXA5LCBrZXksIHJlYWxLZXk7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2dldFN0b3JlZEF0dHJpYnV0ZXMkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHNlbGVjdGlvblBhcmVudCA9IHRoaXMuZ2V0Rmlyc3RQb3NpdGlvbigpLnBhcmVudDsKCiAgICAgICAgICAgICAgaWYgKCEodGhpcy5pc0NvbGxhcHNlZCAmJiBzZWxlY3Rpb25QYXJlbnQuaXNFbXB0eSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzA7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245ID0gdHJ1ZTsKICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjkgPSBmYWxzZTsKICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjkgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA1OwogICAgICAgICAgICAgIF9pdGVyYXRvcjkgPSBzZWxlY3Rpb25QYXJlbnQuZ2V0QXR0cmlidXRlS2V5cygpW1N5bWJvbC5pdGVyYXRvcl0oKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBpZiAoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgPSAoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uZXh0KCkpLmRvbmUpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGtleSA9IF9zdGVwOS52YWx1ZTsKCiAgICAgICAgICAgICAgaWYgKCFrZXkuc3RhcnRzV2l0aChzdG9yZVByZWZpeCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJlYWxLZXkgPSBrZXkuc3Vic3RyKHN0b3JlUHJlZml4Lmxlbmd0aCk7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMzsKICAgICAgICAgICAgICByZXR1cm4gW3JlYWxLZXksIHNlbGVjdGlvblBhcmVudC5nZXRBdHRyaWJ1dGUoa2V5KV07CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245ID0gdHJ1ZTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDUpOwogICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yOSA9IHRydWU7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I5ID0gX2NvbnRleHQyLnQwOwoKICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDIyOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjM7CgogICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgJiYgX2l0ZXJhdG9yOS5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yOS5yZXR1cm4oKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjU7CgogICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3I5KSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI4OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjk7CgogICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDI1KTsKCiAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5maW5pc2goMjIpOwoKICAgICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9nZXRTdG9yZWRBdHRyaWJ1dGVzLCB0aGlzLCBbWzUsIDE4LCAyMiwgMzBdLCBbMjMsLCAyNSwgMjldXSk7CiAgICB9KSAvLyBDaGVja3MgbW9kZWwgdGV4dCBub2RlcyB0aGF0IGFyZSBjbG9zZXN0IHRvIHRoZSBzZWxlY3Rpb24ncyBmaXJzdCBwb3NpdGlvbiBhbmQgcmV0dXJucyBhdHRyaWJ1dGVzIG9mIGZpcnN0CiAgICAvLyBmb3VuZCBlbGVtZW50LiBJZiB0aGVyZSBhcmUgbm8gdGV4dCBub2RlcyBpbiBzZWxlY3Rpb24ncyBmaXJzdCBwb3NpdGlvbiBwYXJlbnQsIGl0IHJldHVybnMgc2VsZWN0aW9uCiAgICAvLyBhdHRyaWJ1dGVzIHN0b3JlZCBpbiB0aGF0IHBhcmVudC4KICAgIC8vCiAgICAvLyBAcHJpdmF0ZQogICAgLy8gQHJldHVybnMge0l0ZXJhYmxlLjwqPn0gQ29sbGVjdGlvbiBvZiBhdHRyaWJ1dGVzLgoKICB9LCB7CiAgICBrZXk6ICJfZ2V0U3Vycm91bmRpbmdBdHRyaWJ1dGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3Vycm91bmRpbmdBdHRyaWJ1dGVzKCkgewogICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmdldEZpcnN0UG9zaXRpb24oKTsKICAgICAgdmFyIHNjaGVtYSA9IHRoaXMuX21vZGVsLnNjaGVtYTsKICAgICAgdmFyIGF0dHJzID0gbnVsbDsKCiAgICAgIGlmICghdGhpcy5pc0NvbGxhcHNlZCkgewogICAgICAgIC8vIDEuIElmIHNlbGVjdGlvbiBpcyBhIHJhbmdlLi4uCiAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5nZXRGaXJzdFJhbmdlKCk7IC8vIC4uLmxvb2sgZm9yIGEgZmlyc3QgY2hhcmFjdGVyIG5vZGUgaW4gdGhhdCByYW5nZSBhbmQgdGFrZSBhdHRyaWJ1dGVzIGZyb20gaXQuCgogICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTAgPSB0cnVlOwogICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjEwID0gZmFsc2U7CiAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTAgPSB1bmRlZmluZWQ7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxMCA9IHJhbmdlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxMDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTAgPSAoX3N0ZXAxMCA9IF9pdGVyYXRvcjEwLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IHRydWUpIHsKICAgICAgICAgICAgdmFyIHZhbHVlID0gX3N0ZXAxMC52YWx1ZTsKCiAgICAgICAgICAgIC8vIElmIHRoZSBpdGVtIGlzIGFuIG9iamVjdCwgd2UgZG9uJ3Qgd2FudCB0byBnZXQgYXR0cmlidXRlcyBmcm9tIGl0cyBjaGlsZHJlbi4KICAgICAgICAgICAgaWYgKHZhbHVlLml0ZW0uaXMoJ2VsZW1lbnQnKSAmJiBzY2hlbWEuaXNPYmplY3QodmFsdWUuaXRlbSkpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT0gJ3RleHQnKSB7CiAgICAgICAgICAgICAgYXR0cnMgPSB2YWx1ZS5pdGVtLmdldEF0dHJpYnV0ZXMoKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxMCA9IHRydWU7CiAgICAgICAgICBfaXRlcmF0b3JFcnJvcjEwID0gZXJyOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCAmJiBfaXRlcmF0b3IxMC5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICAgIF9pdGVyYXRvcjEwLnJldHVybigpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMCkgewogICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gMi4gSWYgdGhlIHNlbGVjdGlvbiBpcyBhIGNhcmV0IG9yIHRoZSByYW5nZSBkb2VzIG5vdCBjb250YWluIGEgY2hhcmFjdGVyIG5vZGUuLi4KICAgICAgICB2YXIgbm9kZUJlZm9yZSA9IHBvc2l0aW9uLnRleHROb2RlID8gcG9zaXRpb24udGV4dE5vZGUgOiBwb3NpdGlvbi5ub2RlQmVmb3JlOwogICAgICAgIHZhciBub2RlQWZ0ZXIgPSBwb3NpdGlvbi50ZXh0Tm9kZSA/IHBvc2l0aW9uLnRleHROb2RlIDogcG9zaXRpb24ubm9kZUFmdGVyOyAvLyBXaGVuIGdyYXZpdHkgaXMgb3ZlcnJpZGRlbiB0aGVuIGRvbid0IHRha2Ugbm9kZSBiZWZvcmUgaW50byBjb25zaWRlcmF0aW9uLgoKICAgICAgICBpZiAoIXRoaXMuaXNHcmF2aXR5T3ZlcnJpZGRlbikgewogICAgICAgICAgLy8gLi4ubG9vayBhdCB0aGUgbm9kZSBiZWZvcmUgY2FyZXQgYW5kIHRha2UgYXR0cmlidXRlcyBmcm9tIGl0IGlmIGl0IGlzIGEgY2hhcmFjdGVyIG5vZGUuCiAgICAgICAgICBhdHRycyA9IGdldEF0dHJzSWZDaGFyYWN0ZXIobm9kZUJlZm9yZSk7CiAgICAgICAgfSAvLyAzLiBJZiBub3QsIGxvb2sgYXQgdGhlIG5vZGUgYWZ0ZXIgY2FyZXQuLi4KCgogICAgICAgIGlmICghYXR0cnMpIHsKICAgICAgICAgIGF0dHJzID0gZ2V0QXR0cnNJZkNoYXJhY3Rlcihub2RlQWZ0ZXIpOwogICAgICAgIH0gLy8gNC4gSWYgbm90LCB0cnkgdG8gZmluZCB0aGUgZmlyc3QgY2hhcmFjdGVyIG9uIHRoZSBsZWZ0LCB0aGF0IGlzIGluIHRoZSBzYW1lIG5vZGUuCiAgICAgICAgLy8gV2hlbiBncmF2aXR5IGlzIG92ZXJyaWRkZW4gdGhlbiBkb24ndCB0YWtlIG5vZGUgYmVmb3JlIGludG8gY29uc2lkZXJhdGlvbi4KCgogICAgICAgIGlmICghdGhpcy5pc0dyYXZpdHlPdmVycmlkZGVuICYmICFhdHRycykgewogICAgICAgICAgdmFyIG5vZGUgPSBub2RlQmVmb3JlOwoKICAgICAgICAgIHdoaWxlIChub2RlICYmICFhdHRycykgewogICAgICAgICAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7CiAgICAgICAgICAgIGF0dHJzID0gZ2V0QXR0cnNJZkNoYXJhY3Rlcihub2RlKTsKICAgICAgICAgIH0KICAgICAgICB9IC8vIDUuIElmIG5vdCBmb3VuZCwgdHJ5IHRvIGZpbmQgdGhlIGZpcnN0IGNoYXJhY3RlciBvbiB0aGUgcmlnaHQsIHRoYXQgaXMgaW4gdGhlIHNhbWUgbm9kZS4KCgogICAgICAgIGlmICghYXR0cnMpIHsKICAgICAgICAgIHZhciBfbm9kZSA9IG5vZGVBZnRlcjsKCiAgICAgICAgICB3aGlsZSAoX25vZGUgJiYgIWF0dHJzKSB7CiAgICAgICAgICAgIF9ub2RlID0gX25vZGUubmV4dFNpYmxpbmc7CiAgICAgICAgICAgIGF0dHJzID0gZ2V0QXR0cnNJZkNoYXJhY3Rlcihfbm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgfSAvLyA2LiBJZiBub3QgZm91bmQsIHNlbGVjdGlvbiBzaG91bGQgcmV0cmlldmUgYXR0cmlidXRlcyBmcm9tIHBhcmVudC4KCgogICAgICAgIGlmICghYXR0cnMpIHsKICAgICAgICAgIGF0dHJzID0gdGhpcy5fZ2V0U3RvcmVkQXR0cmlidXRlcygpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGF0dHJzOwogICAgfSAvLyBGaXhlcyBhIHNlbGVjdGlvbiByYW5nZSBhZnRlciBpdCBlbmRzIHVwIGluIGdyYXZleWFyZCByb290LgogICAgLy8KICAgIC8vIEBwcml2YXRlCiAgICAvLyBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvbGl2ZXJhbmdlfkxpdmVSYW5nZX0gbGl2ZVJhbmdlIFRoZSByYW5nZSBmcm9tIHNlbGVjdGlvbiwgdGhhdCBlbmRlZCB1cCBpbiB0aGUgZ3JhdmV5YXJkIHJvb3QuCiAgICAvLyBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb259IHJlbW92ZWRSYW5nZVN0YXJ0IFN0YXJ0IHBvc2l0aW9uIG9mIGEgcmFuZ2Ugd2hpY2ggd2FzIHJlbW92ZWQuCgogIH0sIHsKICAgIGtleTogIl9maXhHcmF2ZXlhcmRTZWxlY3Rpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9maXhHcmF2ZXlhcmRTZWxlY3Rpb24obGl2ZVJhbmdlLCByZW1vdmVkUmFuZ2VTdGFydCkgewogICAgICAvLyBUaGUgc3RhcnQgb2YgdGhlIHJlbW92ZWQgcmFuZ2UgaXMgdGhlIGNsb3Nlc3QgcG9zaXRpb24gdG8gdGhlIGBsaXZlUmFuZ2VgIC0gdGhlIG9yaWdpbmFsIHNlbGVjdGlvbiByYW5nZS4KICAgICAgLy8gVGhpcyBpcyBhIGdvb2QgY2FuZGlkYXRlIGZvciBhIGZpeGVkIHNlbGVjdGlvbiByYW5nZS4KICAgICAgdmFyIHBvc2l0aW9uQ2FuZGlkYXRlID0gcmVtb3ZlZFJhbmdlU3RhcnQuY2xvbmUoKTsgLy8gRmluZCBhIHJhbmdlIHRoYXQgaXMgYSBjb3JyZWN0IHNlbGVjdGlvbiByYW5nZSBhbmQgaXMgY2xvc2VzdCB0byB0aGUgc3RhcnQgb2YgcmVtb3ZlZCByYW5nZS4KCiAgICAgIHZhciBzZWxlY3Rpb25SYW5nZSA9IHRoaXMuX21vZGVsLnNjaGVtYS5nZXROZWFyZXN0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb25DYW5kaWRhdGUpOyAvLyBSZW1vdmUgdGhlIG9sZCBzZWxlY3Rpb24gcmFuZ2UgYmVmb3JlIHByZXBhcmluZyBhbmQgYWRkaW5nIG5ldyBzZWxlY3Rpb24gcmFuZ2UuIFRoaXMgb3JkZXIgaXMgaW1wb3J0YW50LAogICAgICAvLyBiZWNhdXNlIG5ldyByYW5nZSwgaW4gc29tZSBjYXNlcywgbWF5IGludGVyc2VjdCB3aXRoIG9sZCByYW5nZSAoaXQgZGVwZW5kcyBvbiBgZ2V0TmVhcmVzdFNlbGVjdGlvblJhbmdlKClgIHJlc3VsdCkuCgoKICAgICAgdmFyIGluZGV4ID0gdGhpcy5fcmFuZ2VzLmluZGV4T2YobGl2ZVJhbmdlKTsKCiAgICAgIHRoaXMuX3Jhbmdlcy5zcGxpY2UoaW5kZXgsIDEpOwoKICAgICAgbGl2ZVJhbmdlLmRldGFjaCgpOyAvLyBJZiBuZWFyZXN0IHZhbGlkIHNlbGVjdGlvbiByYW5nZSBoYXMgYmVlbiBmb3VuZCAtIGFkZCBpdCBpbiB0aGUgcGxhY2Ugb2Ygb2xkIHJhbmdlLgoKICAgICAgaWYgKHNlbGVjdGlvblJhbmdlKSB7CiAgICAgICAgLy8gQ2hlY2sgdGhlIHJhbmdlLCBjb252ZXJ0IGl0IHRvIGxpdmUgcmFuZ2UsIGJpbmQgZXZlbnRzLCBldGMuCiAgICAgICAgdmFyIG5ld1JhbmdlID0gdGhpcy5fcHJlcGFyZVJhbmdlKHNlbGVjdGlvblJhbmdlKTsgLy8gQWRkIG5ldyByYW5nZSBpbiB0aGUgcGxhY2Ugb2Ygb2xkIHJhbmdlLgoKCiAgICAgICAgdGhpcy5fcmFuZ2VzLnNwbGljZShpbmRleCwgMCwgbmV3UmFuZ2UpOwogICAgICB9IC8vIElmIG5lYXJlc3QgdmFsaWQgc2VsZWN0aW9uIHJhbmdlIGNhbm5vdCBiZSBmb3VuZCAtIGp1c3QgcmVtb3ZpbmcgdGhlIG9sZCByYW5nZSBpcyBmaW5lLgoKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0NvbGxhcHNlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuX3Jhbmdlcy5sZW5ndGg7CiAgICAgIHJldHVybiBsZW5ndGggPT09IDAgPyB0aGlzLl9kb2N1bWVudC5fZ2V0RGVmYXVsdFJhbmdlKCkuaXNDb2xsYXBzZWQgOiBfZ2V0KF9nZXRQcm90b3R5cGVPZihMaXZlU2VsZWN0aW9uLnByb3RvdHlwZSksICJpc0NvbGxhcHNlZCIsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogImFuY2hvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKExpdmVTZWxlY3Rpb24ucHJvdG90eXBlKSwgImFuY2hvciIsIHRoaXMpIHx8IHRoaXMuX2RvY3VtZW50Ll9nZXREZWZhdWx0UmFuZ2UoKS5zdGFydDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb2N1cyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKExpdmVTZWxlY3Rpb24ucHJvdG90eXBlKSwgImZvY3VzIiwgdGhpcykgfHwgdGhpcy5fZG9jdW1lbnQuX2dldERlZmF1bHRSYW5nZSgpLmVuZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyYW5nZUNvdW50IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcmFuZ2VzLmxlbmd0aCA/IHRoaXMuX3Jhbmdlcy5sZW5ndGggOiAxOwogICAgfSAvLyBEZXNjcmliZXMgd2hldGhlciBgTGl2ZVNlbGVjdGlvbmAgaGFzIG93biByYW5nZShzKSBzZXQsIG9yIGlmIGl0IGlzIGRlZmF1bHRlZCB0bwogICAgLy8ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnR+RG9jdW1lbnQjX2dldERlZmF1bHRSYW5nZSBkb2N1bWVudCdzIGRlZmF1bHQgcmFuZ2V9LgogICAgLy8KICAgIC8vIEByZWFkb25seQogICAgLy8gQHR5cGUge0Jvb2xlYW59CgogIH0sIHsKICAgIGtleTogImhhc093blJhbmdlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcmFuZ2VzLmxlbmd0aCA+IDA7CiAgICB9IC8vIFdoZW4gc2V0IHRvIGB0cnVlYCB0aGVuIHNlbGVjdGlvbiBhdHRyaWJ1dGVzIG9uIG5vZGUgYmVmb3JlIHRoZSBjYXJldCB3b24ndCBiZSB0YWtlbgogICAgLy8gaW50byBjb25zaWRlcmF0aW9uIHdoaWxlIHVwZGF0aW5nIHNlbGVjdGlvbiBhdHRyaWJ1dGVzLgogICAgLy8KICAgIC8vIEBwcm90ZWN0ZWQKICAgIC8vIEB0eXBlIHtCb29sZWFufQoKICB9LCB7CiAgICBrZXk6ICJpc0dyYXZpdHlPdmVycmlkZGVuIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gISF0aGlzLl9vdmVycmlkZGVuR3Jhdml0eVJlZ2lzdGVyLnNpemU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTGl2ZVNlbGVjdGlvbjsKfShTZWxlY3Rpb24pOyAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL2xpdmVzZWxlY3Rpb25+TGl2ZVNlbGVjdGlvbiNfdXBkYXRlQXR0cmlidXRlc30uCi8vCi8vIEl0IHRha2VzIG1vZGVsIGl0ZW0sIGNoZWNrcyB3aGV0aGVyIGl0IGlzIGEgdGV4dCBub2RlIChvciB0ZXh0IHByb3h5KSBhbmQsIGlmIHNvLCByZXR1cm5zIGl0J3MgYXR0cmlidXRlcy4gSWYgbm90LCByZXR1cm5zIGBudWxsYC4KLy8KLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbXxudWxsfSAgbm9kZQovLyBAcmV0dXJucyB7Qm9vbGVhbn0KCgpmdW5jdGlvbiBnZXRBdHRyc0lmQ2hhcmFjdGVyKG5vZGUpIHsKICBpZiAobm9kZSBpbnN0YW5jZW9mIFRleHRQcm94eSB8fCBub2RlIGluc3RhbmNlb2YgVGV4dCkgewogICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlcygpOwogIH0KCiAgcmV0dXJuIG51bGw7Cn0gLy8gUmVtb3ZlcyBzZWxlY3Rpb24gYXR0cmlidXRlcyBmcm9tIGVsZW1lbnQgd2hpY2ggaXMgbm90IGVtcHR5IGFueW1vcmUuCi8vCi8vIEBwcml2YXRlCi8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9tb2RlbH5Nb2RlbH0gbW9kZWwKLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2JhdGNofkJhdGNofSBiYXRjaAoKCmZ1bmN0aW9uIGNsZWFyQXR0cmlidXRlc1N0b3JlZEluRWxlbWVudChtb2RlbCwgYmF0Y2gpIHsKICB2YXIgZGlmZmVyID0gbW9kZWwuZG9jdW1lbnQuZGlmZmVyOwogIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgPSB0cnVlOwogIHZhciBfZGlkSXRlcmF0b3JFcnJvcjExID0gZmFsc2U7CiAgdmFyIF9pdGVyYXRvckVycm9yMTEgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHsKICAgICAgdmFyIGVudHJ5ID0gX3N0ZXAxMS52YWx1ZTsKCiAgICAgIGlmIChlbnRyeS50eXBlICE9ICdpbnNlcnQnKSB7CiAgICAgICAgcmV0dXJuICJjb250aW51ZSI7CiAgICAgIH0KCiAgICAgIHZhciBjaGFuZ2VQYXJlbnQgPSBlbnRyeS5wb3NpdGlvbi5wYXJlbnQ7CiAgICAgIHZhciBpc05vTG9uZ2VyRW1wdHkgPSBlbnRyeS5sZW5ndGggPT09IGNoYW5nZVBhcmVudC5tYXhPZmZzZXQ7CgogICAgICBpZiAoaXNOb0xvbmdlckVtcHR5KSB7CiAgICAgICAgbW9kZWwuZW5xdWV1ZUNoYW5nZShiYXRjaCwgZnVuY3Rpb24gKHdyaXRlcikgewogICAgICAgICAgdmFyIHN0b3JlZEF0dHJpYnV0ZXMgPSBBcnJheS5mcm9tKGNoYW5nZVBhcmVudC5nZXRBdHRyaWJ1dGVLZXlzKCkpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aChzdG9yZVByZWZpeCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSB0cnVlOwogICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTIgPSBmYWxzZTsKICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjEyID0gdW5kZWZpbmVkOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjEyID0gc3RvcmVkQXR0cmlidXRlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEyID0gKF9zdGVwMTIgPSBfaXRlcmF0b3IxMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSB0cnVlKSB7CiAgICAgICAgICAgICAgdmFyIGtleSA9IF9zdGVwMTIudmFsdWU7CiAgICAgICAgICAgICAgd3JpdGVyLnJlbW92ZUF0dHJpYnV0ZShrZXksIGNoYW5nZVBhcmVudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjEyID0gdHJ1ZTsKICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IxMiA9IGVycjsKICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgJiYgX2l0ZXJhdG9yMTIucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjEyLnJldHVybigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMikgewogICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxMjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICBmb3IgKHZhciBfaXRlcmF0b3IxMSA9IGRpZmZlci5nZXRDaGFuZ2VzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDExOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMSA9IChfc3RlcDExID0gX2l0ZXJhdG9yMTEubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjExID0gdHJ1ZSkgewogICAgICB2YXIgX3JldCA9IF9sb29wKCk7CgogICAgICBpZiAoX3JldCA9PT0gImNvbnRpbnVlIikgY29udGludWU7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZGlkSXRlcmF0b3JFcnJvcjExID0gdHJ1ZTsKICAgIF9pdGVyYXRvckVycm9yMTEgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjExICYmIF9pdGVyYXRvcjExLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgX2l0ZXJhdG9yMTEucmV0dXJuKCk7CiAgICAgIH0KICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjExKSB7CiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxMTsKICAgICAgfQogICAgfQogIH0KfQ=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js"],"names":["mix","EmitterMixin","Selection","LiveRange","Text","TextProxy","toMap","Collection","CKEditorError","uid","storePrefix","DocumentSelection","doc","_selection","LiveSelection","delegate","to","getRanges","getFirstPosition","getLastPosition","getFirstRange","getLastRange","getSelectedBlocks","getSelectedElement","element","containsEntireContent","destroy","getAttributeKeys","getAttributes","key","getAttribute","hasAttribute","_updateMarkers","_updateAttributes","type","itemOrPosition","offset","setFocus","selectable","placeOrOffset","options","setTo","value","setAttribute","removeAttribute","_getStoredAttributes","overrideGravity","restoreGravity","isCollapsed","anchor","focus","rangeCount","hasOwnRange","isBackward","isGravityOverridden","markers","_ranges","startsWith","idProperty","_model","model","_document","_attributePriority","Map","_fixGraveyardRangesData","_hasChangedRange","_overriddenGravityRegister","Set","listenTo","evt","args","operation","isDocumentOperation","length","shift","liveRange","sourcePosition","_fixGraveyardSelection","fire","directChange","priority","on","range","_validateSelectionRange","batch","clearAttributesStoredInElement","i","detach","stopListening","_getDefaultRange","optionsOrPlaceOrOffset","_setAttribute","attributeKeys","_removeAttribute","overrideUid","add","size","has","delete","pop","_prepareRange","push","_checkRange","root","graveyard","fromRange","oldRange","data","deletionPosition","changed","marker","markerRange","getRange","selectionRange","containsRange","oldMarkers","Array","from","includes","remove","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","_attrs","_setAttributesTo","newKey","newValue","get","oldKey","oldValue","set","attrs","gotAdded","selectionParent","parent","isEmpty","realKey","substr","position","schema","item","is","isObject","nodeBefore","textNode","nodeAfter","getAttrsIfCharacter","node","previousSibling","nextSibling","removedRangeStart","positionCandidate","clone","getNearestSelectionRange","index","indexOf","splice","newRange","start","end","differ","document","entry","changeParent","isNoLongerEmpty","maxOffset","enqueueChange","writer","storedAttributes","filter","getChanges"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/documentselection\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nconst storePrefix = 'selection:';\n\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\n\t */\n\tconstructor( doc ) {\n\t\t/**\n\t\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._selection = new LiveSelection( doc );\n\n\t\tthis._selection.delegate( 'change:range' ).to( this );\n\t\tthis._selection.delegate( 'change:attribute' ).to( this );\n\t\tthis._selection.delegate( 'change:marker' ).to( this );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget hasOwnRange() {\n\t\treturn this._selection.hasOwnRange;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t *\n\t * @readonly\n\t * @returns {Boolean}\n\t */\n\tget isGravityOverridden() {\n\t\treturn this._selection.isGravityOverridden;\n\t}\n\n\t/**\n\t * A collection of selection markers.\n\t * Marker is a selection marker when selection range is inside the marker range.\n\t *\n\t * @readonly\n\t * @type {module:utils/collection~Collection.<module:engine/model/markercollection~Marker>}\n\t */\n\tget markers() {\n\t\treturn this._selection.markers;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\tgetRanges() {\n\t\treturn this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n\t * but will not return blocks nested in other blocks.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<blockQuote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</blockQuote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * If the selection is inside a block all the inner blocks (A & B) are returned:\n\t *\n\t * \t\t<block>\n\t *\t\t\t<blockA>[a</blockA>\n\t * \t\t\t<blockB>b]</blockB>\n\t * \t\t</block>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\tgetSelectedBlocks() {\n\t\treturn this._selection.getSelectedBlocks();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element ) {\n\t\treturn this._selection.containsEntireContent( element );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by document selection.\n\t */\n\tdestroy() {\n\t\tthis._selection.destroy();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._selection.getAttributeKeys();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._selection.getAttributes();\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._selection.getAttribute( key );\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._selection.hasAttribute( key );\n\t}\n\n\t/**\n\t * Refreshes selection attributes and markers according to the current position in the model.\n\t */\n\trefresh() {\n\t\tthis._selection._updateMarkers();\n\t\tthis._selection._updateAttributes( false );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'documentSelection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\t\tselection.is( 'model:documentSelection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'model:selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'model:documentSelection';\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionFocus\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelection\n\t * @protected\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._selection.setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n\t * event with removed attribute key.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._selection.removeAttribute( key );\n\t}\n\n\t/**\n\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t *\n\t * @protected\n\t * @returns {Iterable.<*>}\n\t */\n\t_getStoredAttributes() {\n\t\treturn this._selection._getStoredAttributes();\n\t}\n\n\t/**\n\t * Temporarily changes the gravity of the selection from the left to the right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n\t * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\n\t * @protected\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\t_overrideGravity() {\n\t\treturn this._selection.overrideGravity();\n\t}\n\n\t/**\n\t * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\n\t * @protected\n\t * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n\t */\n\t_restoreGravity( uid ) {\n\t\tthis._selection.restoreGravity( uid );\n\t}\n\n\t/**\n\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key to convert.\n\t * @returns {String} Converted attribute key, applicable for selection store.\n\t */\n\tstatic _getStoreAttributeKey( key ) {\n\t\treturn storePrefix + key;\n\t}\n\n\t/**\n\t * Checks whether the given attribute key is an attribute stored on an element.\n\t *\n\t * @protected\n\t * @param {String} key\n\t * @returns {Boolean}\n\t */\n\tstatic _isStoreAttributeKey( key ) {\n\t\treturn key.startsWith( storePrefix );\n\t}\n}\n\nmix( DocumentSelection, EmitterMixin );\n\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n\n/**\n * Fired when selection marker(s) changed.\n *\n * @event change:marker\n * @param {Boolean} directChange This is always set to `false` in case of `change:marker` event as there is no possibility\n * to change markers directly through {@link module:engine/model/documentselection~DocumentSelection} API.\n * See also {@link module:engine/model/documentselection~DocumentSelection#event:change:range} and\n * {@link module:engine/model/documentselection~DocumentSelection#event:change:attribute}.\n * @param {Array.<module:engine/model/markercollection~Marker>} oldMarkers Markers in which the selection was before the change.\n */\n\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nclass LiveSelection extends Selection {\n\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\n\tconstructor( doc ) {\n\t\tsuper();\n\n\t\t// List of selection markers.\n\t\t// Marker is a selection marker when selection range is inside the marker range.\n\t\t//\n\t\t// @type {module:utils/collection~Collection}\n\t\tthis.markers = new Collection( { idProperty: 'name' } );\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/model~Model}\n\t\tthis._model = doc.model;\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/document~Document}\n\t\tthis._document = doc;\n\n\t\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n\t\t// last time. Possible values of priority are: `'low'` and `'normal'`.\n\t\t//\n\t\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n\t\t// attributes API are set with `'normal'` priority.\n\t\t//\n\t\t// @private\n\t\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\t\tthis._attributePriority = new Map();\n\n\t\t// Contains data required to fix ranges which have been moved to the graveyard.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\n\t\tthis._fixGraveyardRangesData = [];\n\n\t\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\t\tthis._hasChangedRange = false;\n\n\t\t// Each overriding gravity adds an UID to the set and each removal removes it.\n\t\t// Gravity is overridden when there's at least one UID in the set.\n\t\t// Gravity is restored when the set is empty.\n\t\t// This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n\t\t// @private\n\t\t// @type {Set}\n\t\tthis._overriddenGravityRegister = new Set();\n\n\t\t// Ensure selection is correct after each operation.\n\t\tthis.listenTo( this._model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( this._fixGraveyardRangesData.length ) {\n\t\t\t\tconst { liveRange, sourcePosition } = this._fixGraveyardRangesData.shift();\n\n\t\t\t\tthis._fixGraveyardSelection( liveRange, sourcePosition );\n\t\t\t}\n\n\t\t\tif ( this._hasChangedRange ) {\n\t\t\t\tthis._hasChangedRange = false;\n\t\t\t\tthis.fire( 'change:range', { directChange: false } );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Ensure selection is correct and up to date after each range change.\n\t\tthis.on( 'change:range', () => {\n\t\t\tfor ( const range of this.getRanges() ) {\n\t\t\t\tif ( !this._document._validateSelectionRange( range ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n\t\t\t\t\t * starts or ends at incorrect position.\n\t\t\t\t\t *\n\t\t\t\t\t * @error document-selection-wrong-position\n\t\t\t\t\t * @param {module:engine/model/range~Range} range\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'document-selection-wrong-position: Range from document selection starts or ends at incorrect position.',\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t{ range }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Update markers data stored by the selection after each marker change.\n\t\tthis.listenTo( this._model.markers, 'update', () => this._updateMarkers() );\n\n\t\t// Ensure selection is up to date after each change block.\n\t\tthis.listenTo( this._document, 'change', ( evt, batch ) => {\n\t\t\tclearAttributesStoredInElement( this._model, batch );\n\t\t} );\n\t}\n\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n\t}\n\n\tget anchor() {\n\t\treturn super.anchor || this._document._getDefaultRange().start;\n\t}\n\n\tget focus() {\n\t\treturn super.focus || this._document._getDefaultRange().end;\n\t}\n\n\tget rangeCount() {\n\t\treturn this._ranges.length ? this._ranges.length : 1;\n\t}\n\n\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t//\n\t// @readonly\n\t// @type {Boolean}\n\tget hasOwnRange() {\n\t\treturn this._ranges.length > 0;\n\t}\n\n\t// When set to `true` then selection attributes on node before the caret won't be taken\n\t// into consideration while updating selection attributes.\n\t//\n\t// @protected\n\t// @type {Boolean}\n\tget isGravityOverridden() {\n\t\treturn !!this._overriddenGravityRegister.size;\n\t}\n\n\t// Unbinds all events previously bound by live selection.\n\tdestroy() {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tthis._ranges[ i ].detach();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t* getRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tyield* super.getRanges();\n\t\t} else {\n\t\t\tyield this._document._getDefaultRange();\n\t\t}\n\t}\n\n\tgetFirstRange() {\n\t\treturn super.getFirstRange() || this._document._getDefaultRange();\n\t}\n\n\tgetLastRange() {\n\t\treturn super.getLastRange() || this._document._getDefaultRange();\n\t}\n\n\tsetTo( selectable, optionsOrPlaceOrOffset, options ) {\n\t\tsuper.setTo( selectable, optionsOrPlaceOrOffset, options );\n\t\tthis._updateAttributes( true );\n\t\tthis._updateMarkers();\n\t}\n\n\tsetFocus( itemOrPosition, offset ) {\n\t\tsuper.setFocus( itemOrPosition, offset );\n\t\tthis._updateAttributes( true );\n\t\tthis._updateMarkers();\n\t}\n\n\tsetAttribute( key, value ) {\n\t\tif ( this._setAttribute( key, value ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\tremoveAttribute( key ) {\n\t\tif ( this._removeAttribute( key ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\toverrideGravity() {\n\t\tconst overrideUid = uid();\n\n\t\t// Remember that another overriding has been requested. It will need to be removed\n\t\t// before the gravity is to be restored.\n\t\tthis._overriddenGravityRegister.add( overrideUid );\n\n\t\tif ( this._overriddenGravityRegister.size === 1 ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\n\t\treturn overrideUid;\n\t}\n\n\trestoreGravity( uid ) {\n\t\tif ( !this._overriddenGravityRegister.has( uid ) ) {\n\t\t\t/**\n\t\t\t * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n\t\t\t * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n\t\t\t *\n\t\t\t * @error document-selection-gravity-wrong-restore\n\t\t\t * @param {String} uid The unique identifier returned by\n\t\t\t * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.',\n\t\t\t\tthis,\n\t\t\t\t{ uid }\n\t\t\t);\n\t\t}\n\n\t\tthis._overriddenGravityRegister.delete( uid );\n\n\t\t// Restore gravity only when all overriding have been restored.\n\t\tif ( !this.isGravityOverridden ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\t}\n\n\t_popRange() {\n\t\tthis._ranges.pop().detach();\n\t}\n\n\t_pushRange( range ) {\n\t\tconst liveRange = this._prepareRange( range );\n\n\t\t// `undefined` is returned when given `range` is in graveyard root.\n\t\tif ( liveRange ) {\n\t\t\tthis._ranges.push( liveRange );\n\t\t}\n\t}\n\n\t// Prepares given range to be added to selection. Checks if it is correct,\n\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n\t// and sets listeners listening to the range's change event.\n\t//\n\t// @private\n\t// @param {module:engine/model/range~Range} range\n\t_prepareRange( range ) {\n\t\tthis._checkRange( range );\n\n\t\tif ( range.root == this._document.graveyard ) {\n\t\t\t// @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\n\t\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\n\t\t\tthis._hasChangedRange = true;\n\n\t\t\t// If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\n\t\t\tif ( liveRange.root == this._document.graveyard ) {\n\t\t\t\tthis._fixGraveyardRangesData.push( {\n\t\t\t\t\tliveRange,\n\t\t\t\t\tsourcePosition: data.deletionPosition\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn liveRange;\n\t}\n\n\t_updateMarkers() {\n\t\tconst markers = [];\n\t\tlet changed = false;\n\n\t\tfor ( const marker of this._model.markers ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tfor ( const selectionRange of this.getRanges() ) {\n\t\t\t\tif ( markerRange.containsRange( selectionRange, !selectionRange.isCollapsed ) ) {\n\t\t\t\t\tmarkers.push( marker );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst oldMarkers = Array.from( this.markers );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tif ( !this.markers.has( marker ) ) {\n\t\t\t\tthis.markers.add( marker );\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of Array.from( this.markers ) ) {\n\t\t\tif ( !markers.includes( marker ) ) {\n\t\t\t\tthis.markers.remove( marker );\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( changed ) {\n\t\t\tthis.fire( 'change:marker', { oldMarkers, directChange: false } );\n\t\t}\n\t}\n\n\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n\t//\n\t// @protected\n\t// @param {Boolean} clearAll\n\t// @fires change:attribute\n\t_updateAttributes( clearAll ) {\n\t\tconst newAttributes = toMap( this._getSurroundingAttributes() );\n\t\tconst oldAttributes = toMap( this.getAttributes() );\n\n\t\tif ( clearAll ) {\n\t\t\t// If `clearAll` remove all attributes and reset priorities.\n\t\t\tthis._attributePriority = new Map();\n\t\t\tthis._attrs = new Map();\n\t\t} else {\n\t\t\t// If not, remove only attributes added with `low` priority.\n\t\t\tfor ( const [ key, priority ] of this._attributePriority ) {\n\t\t\t\tif ( priority == 'low' ) {\n\t\t\t\t\tthis._attrs.delete( key );\n\t\t\t\t\tthis._attributePriority.delete( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setAttributesTo( newAttributes );\n\n\t\t// Let's evaluate which attributes really changed.\n\t\tconst changed = [];\n\n\t\t// First, loop through all attributes that are set on selection right now.\n\t\t// Check which of them are different than old attributes.\n\t\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\n\t\t\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\n\t\t\t\tchanged.push( newKey );\n\t\t\t}\n\t\t}\n\n\t\t// Then, check which of old attributes got removed.\n\t\tfor ( const [ oldKey ] of oldAttributes ) {\n\t\t\tif ( !this.hasAttribute( oldKey ) ) {\n\t\t\t\tchanged.push( oldKey );\n\t\t\t}\n\t\t}\n\n\t\t// Fire event with exact data (fire only if anything changed).\n\t\tif ( changed.length > 0 ) {\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\n\t\t}\n\t}\n\n\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {*} value Attribute value.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether value has changed.\n\t_setAttribute( key, value, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oldValue = super.getAttribute( key );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( oldValue === value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.set( key, value );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n\t// be changed according to `directChange` parameter.\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n\t// existing attribute had higher priority.\n\t_removeAttribute( key, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( !super.hasAttribute( key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.delete( key );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n\t// `directChange` parameter).\n\t//\n\t// @private\n\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n\t// @returns {Set.<String>} Changed attribute keys.\n\t_setAttributesTo( attrs ) {\n\t\tconst changed = new Set();\n\n\t\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\n\t\t\t// Do not remove attribute if attribute with same key and value is about to be set.\n\t\t\tif ( attrs.get( oldKey ) === oldValue ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// All rest attributes will be removed so changed attributes won't change .\n\t\t\tthis._removeAttribute( oldKey, false );\n\t\t}\n\n\t\tfor ( const [ key, value ] of attrs ) {\n\t\t\t// Attribute may not be set because of attributes or because same key/value is already added.\n\t\t\tconst gotAdded = this._setAttribute( key, value, false );\n\n\t\t\tif ( gotAdded ) {\n\t\t\t\tchanged.add( key );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t//\n\t// @protected\n\t// @returns {Iterable.<*>}\n\t* _getStoredAttributes() {\n\t\tconst selectionParent = this.getFirstPosition().parent;\n\n\t\tif ( this.isCollapsed && selectionParent.isEmpty ) {\n\t\t\tfor ( const key of selectionParent.getAttributeKeys() ) {\n\t\t\t\tif ( key.startsWith( storePrefix ) ) {\n\t\t\t\t\tconst realKey = key.substr( storePrefix.length );\n\n\t\t\t\t\tyield [ realKey, selectionParent.getAttribute( key ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\n\t// found element. If there are no text nodes in selection's first position parent, it returns selection\n\t// attributes stored in that parent.\n\t//\n\t// @private\n\t// @returns {Iterable.<*>} Collection of attributes.\n\t_getSurroundingAttributes() {\n\t\tconst position = this.getFirstPosition();\n\t\tconst schema = this._model.schema;\n\n\t\tlet attrs = null;\n\n\t\tif ( !this.isCollapsed ) {\n\t\t\t// 1. If selection is a range...\n\t\t\tconst range = this.getFirstRange();\n\n\t\t\t// ...look for a first character node in that range and take attributes from it.\n\t\t\tfor ( const value of range ) {\n\t\t\t\t// If the item is an object, we don't want to get attributes from its children.\n\t\t\t\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( value.type == 'text' ) {\n\t\t\t\t\tattrs = value.item.getAttributes();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 2. If the selection is a caret or the range does not contain a character node...\n\n\t\t\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n\t\t\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden ) {\n\t\t\t\t// ...look at the node before caret and take attributes from it if it is a character node.\n\t\t\t\tattrs = getAttrsIfCharacter( nodeBefore );\n\t\t\t}\n\n\t\t\t// 3. If not, look at the node after caret...\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = getAttrsIfCharacter( nodeAfter );\n\t\t\t}\n\n\t\t\t// 4. If not, try to find the first character on the left, that is in the same node.\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden && !attrs ) {\n\t\t\t\tlet node = nodeBefore;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.previousSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. If not found, try to find the first character on the right, that is in the same node.\n\t\t\tif ( !attrs ) {\n\t\t\t\tlet node = nodeAfter;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. If not found, selection should retrieve attributes from parent.\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = this._getStoredAttributes();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Fixes a selection range after it ends up in graveyard root.\n\t//\n\t// @private\n\t// @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\n\t// @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\n\t_fixGraveyardSelection( liveRange, removedRangeStart ) {\n\t\t// The start of the removed range is the closest position to the `liveRange` - the original selection range.\n\t\t// This is a good candidate for a fixed selection range.\n\t\tconst positionCandidate = removedRangeStart.clone();\n\n\t\t// Find a range that is a correct selection range and is closest to the start of removed range.\n\t\tconst selectionRange = this._model.schema.getNearestSelectionRange( positionCandidate );\n\n\t\t// Remove the old selection range before preparing and adding new selection range. This order is important,\n\t\t// because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\n\t\tconst index = this._ranges.indexOf( liveRange );\n\t\tthis._ranges.splice( index, 1 );\n\t\tliveRange.detach();\n\n\t\t// If nearest valid selection range has been found - add it in the place of old range.\n\t\tif ( selectionRange ) {\n\t\t\t// Check the range, convert it to live range, bind events, etc.\n\t\t\tconst newRange = this._prepareRange( selectionRange );\n\n\t\t\t// Add new range in the place of old range.\n\t\t\tthis._ranges.splice( index, 0, newRange );\n\t\t}\n\t\t// If nearest valid selection range cannot be found - just removing the old range is fine.\n\t}\n}\n\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\nfunction getAttrsIfCharacter( node ) {\n\tif ( node instanceof TextProxy || node instanceof Text ) {\n\t\treturn node.getAttributes();\n\t}\n\n\treturn null;\n}\n\n// Removes selection attributes from element which is not empty anymore.\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\nfunction clearAttributesStoredInElement( model, batch ) {\n\tconst differ = model.document.differ;\n\n\tfor ( const entry of differ.getChanges() ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst changeParent = entry.position.parent;\n\t\tconst isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n\t\tif ( isNoLongerEmpty ) {\n\t\t\tmodel.enqueueChange( batch, writer => {\n\t\t\t\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() )\n\t\t\t\t\t.filter( key => key.startsWith( storePrefix ) );\n\n\t\t\t\tfor ( const key of storedAttributes ) {\n\t\t\t\t\twriter.removeAttribute( key, changeParent );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n"]}]}