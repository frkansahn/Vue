{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-utils\\src\\collection.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-utils\\src\\collection.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-utils/src/collection.js"],"names":["EmitterMixin","CKEditorError","uid","mix","Collection","options","_items","_itemMap","Map","_idProperty","idProperty","_bindToExternalToInternalMap","WeakMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","item","index","itemId","get","undefined","length","splice","set","fire","idOrIndex","itemOrId","has","id","indexOf","subject","itemDoesNotExist","delete","externalItem","callback","ctx","map","find","filter","_bindToCollection","stopListening","remove","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","factory","addItem","evt","isExternalBoundToThis","externalItemBound","push","finalIndex","skipped","add","i","getIndex","listenTo","reduce","result","Symbol","iterator"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/collection\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport mix from './mix';\n\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Collection {\n\t/**\n\t * Creates a new Collection instance.\n\t *\n\t * @param {Object} [options={}] The options object.\n\t * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The internal list of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * The internal map of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._itemMap = new Map();\n\n\t\t/**\n\t\t * The name of the property which is considered to identify an item.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._idProperty = options.idProperty || 'id';\n\n\t\t/**\n\t\t * A helper mapping external items of a bound collection ({@link #bindTo})\n\t\t * and actual items of this collection. It provides information\n\t\t * necessary to properly remove items bound to another collection.\n\t\t *\n\t\t * See {@link #_bindToInternalToExternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToExternalToInternalMap = new WeakMap();\n\n\t\t/**\n\t\t * A helper mapping items of this collection to external items of a bound collection\n\t\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n\t\t * to avoid loops in two–way bindings.\n\t\t *\n\t\t * See {@link #_bindToExternalToInternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToInternalToExternalMap = new WeakMap();\n\n\t\t/**\n\t\t * Stores indexes of skipped items from bound external collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Array}\n\t\t */\n\t\tthis._skippedIndexesFromExternal = [];\n\n\t\t/**\n\t\t * A collection instance this collection is bound to as a result\n\t\t * of calling {@link #bindTo} method.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/collection~Collection} #_bindToCollection\n\t\t */\n\t}\n\n\t/**\n\t * The number of items available in the collection.\n\t *\n\t * @member {Number} #length\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the first item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The first item or `null` if collection is empty.\n\t */\n\tget first() {\n\t\treturn this._items[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the last item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The last item or `null` if collection is empty.\n\t */\n\tget last() {\n\t\treturn this._items[ this.length - 1 ] || null;\n\t}\n\n\t/**\n\t * Adds an item into the collection.\n\t *\n\t * If the item does not have an id, then it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {Object} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` not specified.\n\t * @fires add\n\t */\n\tadd( item, index ) {\n\t\tlet itemId;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( ( idProperty in item ) ) {\n\t\t\titemId = item[ idProperty ];\n\n\t\t\tif ( typeof itemId != 'string' ) {\n\t\t\t\t/**\n\t\t\t\t * This item's id should be a string.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-invalid-id\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-invalid-id', this );\n\t\t\t}\n\n\t\t\tif ( this.get( itemId ) ) {\n\t\t\t\t/**\n\t\t\t\t * This item already exists in the collection.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-item-already-exists\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-item-already-exists', this );\n\t\t\t}\n\t\t} else {\n\t\t\titem[ idProperty ] = itemId = uid();\n\t\t}\n\n\t\t// TODO: Use ES6 default function argument.\n\t\tif ( index === undefined ) {\n\t\t\tindex = this._items.length;\n\t\t} else if ( index > this._items.length || index < 0 ) {\n\t\t\t/**\n\t\t\t * The index number has invalid value.\n\t\t\t *\n\t\t\t * @error collection-add-item-bad-index\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-add-item-invalid-index', this );\n\t\t}\n\n\t\tthis._items.splice( index, 0, item );\n\n\t\tthis._itemMap.set( itemId, item );\n\n\t\tthis.fire( 'add', item, index );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets item by its id or index.\n\t *\n\t * @param {String|Number} idOrIndex The item id or index in the collection.\n\t * @returns {Object|null} The requested item or `null` if such item does not exist.\n\t */\n\tget( idOrIndex ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrIndex == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrIndex );\n\t\t} else if ( typeof idOrIndex == 'number' ) {\n\t\t\titem = this._items[ idOrIndex ];\n\t\t} else {\n\t\t\t/**\n\t\t\t * Index or id must be given.\n\t\t\t *\n\t\t\t * @error collection-get-invalid-arg\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-get-invalid-arg: Index or id must be given.', this );\n\t\t}\n\n\t\treturn item || null;\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether the collection contains an item.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Boolean} `true` if the collection contains the item, `false` otherwise.\n\t */\n\thas( itemOrId ) {\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\treturn this._itemMap.has( itemOrId );\n\t\t} else { // Object\n\t\t\tconst idProperty = this._idProperty;\n\t\t\tconst id = itemOrId[ idProperty ];\n\n\t\t\treturn this._itemMap.has( id );\n\t\t}\n\t}\n\n\t/**\n\t * Gets index of item in the collection.\n\t * When item is not defined in the collection then index will be equal -1.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Number} Index of given item.\n\t */\n\tgetIndex( itemOrId ) {\n\t\tlet item;\n\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\titem = this._itemMap.get( itemOrId );\n\t\t} else {\n\t\t\titem = itemOrId;\n\t\t}\n\n\t\treturn this._items.indexOf( item );\n\t}\n\n\t/**\n\t * Removes an item from the collection.\n\t *\n\t * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\n\t * @returns {Object} The removed item.\n\t * @fires remove\n\t */\n\tremove( subject ) {\n\t\tlet index, id, item;\n\t\tlet itemDoesNotExist = false;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( typeof subject == 'string' ) {\n\t\t\tid = subject;\n\t\t\titem = this._itemMap.get( id );\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tindex = this._items.indexOf( item );\n\t\t\t}\n\t\t} else if ( typeof subject == 'number' ) {\n\t\t\tindex = subject;\n\t\t\titem = this._items[ index ];\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tid = item[ idProperty ];\n\t\t\t}\n\t\t} else {\n\t\t\titem = subject;\n\t\t\tid = item[ idProperty ];\n\t\t\tindex = this._items.indexOf( item );\n\t\t\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\n\t\t}\n\n\t\tif ( itemDoesNotExist ) {\n\t\t\t/**\n\t\t\t * Item not found.\n\t\t\t *\n\t\t\t * @error collection-remove-404\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-remove-404: Item not found.', this );\n\t\t}\n\n\t\tthis._items.splice( index, 1 );\n\t\tthis._itemMap.delete( id );\n\n\t\tconst externalItem = this._bindToInternalToExternalMap.get( item );\n\t\tthis._bindToInternalToExternalMap.delete( item );\n\t\tthis._bindToExternalToInternalMap.delete( externalItem );\n\n\t\tthis.fire( 'remove', item, index );\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Array} The result of mapping.\n\t */\n\tmap( callback, ctx ) {\n\t\treturn this._items.map( callback, ctx );\n\t}\n\n\t/**\n\t * Finds the first item in the collection for which the `callback` returns a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object} The item for which `callback` returned a true value.\n\t */\n\tfind( callback, ctx ) {\n\t\treturn this._items.find( callback, ctx );\n\t}\n\n\t/**\n\t * Returns an array with items for which the `callback` returned a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object[]} The array with matching items.\n\t */\n\tfilter( callback, ctx ) {\n\t\treturn this._items.filter( callback, ctx );\n\t}\n\n\t/**\n\t * Removes all items from the collection and destroys the binding created using\n\t * {@link #bindTo}.\n\t */\n\tclear() {\n\t\tif ( this._bindToCollection ) {\n\t\t\tthis.stopListening( this._bindToCollection );\n\t\t\tthis._bindToCollection = null;\n\t\t}\n\n\t\twhile ( this.length ) {\n\t\t\tthis.remove( 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Binds and synchronizes the collection with another one.\n\t *\n\t * The binding can be a simple factory:\n\t *\n\t *\t\tclass FactoryClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).as( FactoryClass );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n\t *\n\t *\t\tsource.remove( 0 );\n\t *\t\tconsole.log( target.length ); // 1\n\t *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n\t *\n\t * or the factory driven by a custom callback:\n\t *\n\t *\t\tclass FooClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tclass BarClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( ( item ) => {\n\t *\t\t\tif ( item.label == 'foo' ) {\n\t *\t\t\t\treturn new FooClass( item );\n\t *\t\t\t} else {\n\t *\t\t\t\treturn new BarClass( item );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n\t *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n\t *\n\t * or the factory out of property name:\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( 'label' );\n\t *\n\t *\t\tsource.add( { label: { value: 'foo' } } );\n\t *\t\tsource.add( { label: { value: 'bar' } } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n\t *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n\t *\n\t * It's possible to skip specified items by returning falsy value:\n\t *\n\t *\t\tconst source = new Collection();\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( item => {\n\t *\t\t\tif ( item.hidden ) {\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn item;\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { hidden: true } );\n\t *\t\tsource.add( { hidden: false } );\n\t *\n\t *\t\tconsole.log( source.length ); // 2\n\t *\t\tconsole.log( target.length ); // 1\n\t *\n\t * **Note**: {@link #clear} can be used to break the binding.\n\t *\n\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n\t * @returns {Object}\n\t * @returns {module:utils/collection~CollectionBindToChain} The binding chain object.\n\t */\n\tbindTo( externalCollection ) {\n\t\tif ( this._bindToCollection ) {\n\t\t\t/**\n\t\t\t * The collection cannot be bound more than once.\n\t\t\t *\n\t\t\t * @error collection-bind-to-rebind\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-bind-to-rebind: The collection cannot be bound more than once.', this );\n\t\t}\n\n\t\tthis._bindToCollection = externalCollection;\n\n\t\treturn {\n\t\t\tas: Class => {\n\t\t\t\tthis._setUpBindToBinding( item => new Class( item ) );\n\t\t\t},\n\n\t\t\tusing: callbackOrProperty => {\n\t\t\t\tif ( typeof callbackOrProperty == 'function' ) {\n\t\t\t\t\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Finalizes and activates a binding initiated by {#bindTo}.\n\t *\n\t * @protected\n\t * @param {Function} factory A function which produces collection items.\n\t */\n\t_setUpBindToBinding( factory ) {\n\t\tconst externalCollection = this._bindToCollection;\n\n\t\t// Adds the item to the collection once a change has been done to the external collection.\n\t\t//\n\t\t// @private\n\t\tconst addItem = ( evt, externalItem, index ) => {\n\t\t\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\n\t\t\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\n\n\t\t\t// If an external collection is bound to this collection, which makes it a 2–way binding,\n\t\t\t// and the particular external collection item is already bound, don't add it here.\n\t\t\t// The external item has been created **out of this collection's item** and (re)adding it will\n\t\t\t// cause a loop.\n\t\t\tif ( isExternalBoundToThis && externalItemBound ) {\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\n\t\t\t\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\n\t\t\t} else {\n\t\t\t\tconst item = factory( externalItem );\n\n\t\t\t\t// When there is no item we need to remember skipped index first and then we can skip this item.\n\t\t\t\tif ( !item ) {\n\t\t\t\t\tthis._skippedIndexesFromExternal.push( index );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lets try to put item at the same index as index in external collection\n\t\t\t\t// but when there are a skipped items in one or both collections we need to recalculate this index.\n\t\t\t\tlet finalIndex = index;\n\n\t\t\t\t// When we try to insert item after some skipped items from external collection we need\n\t\t\t\t// to include this skipped items and decrease index.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n\t\t\t\t// internal -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We can't just add 'D' to internal at the same index as index in external because\n\t\t\t\t// this will produce empty indexes what is invalid:\n\t\t\t\t// internal -> [ 'A', empty, empty, 'D' ]\n\t\t\t\t//\n\t\t\t\t// So we need to include skipped items and decrease index\n\t\t\t\t// internal -> [ 'A', 'D' ]\n\t\t\t\tfor ( const skipped of this._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\t\tfinalIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration that external collection could skip some items from\n\t\t\t\t// internal collection.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n\t\t\t\t// external -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We need to include skipped items and place new item after them:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\t\t\t\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( finalIndex >= skipped ) {\n\t\t\t\t\t\tfinalIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, item );\n\t\t\t\tthis._bindToInternalToExternalMap.set( item, externalItem );\n\t\t\t\tthis.add( item, finalIndex );\n\n\t\t\t\t// After adding new element to internal collection we need update indexes\n\t\t\t\t// of skipped items in external collection.\n\t\t\t\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\n\t\t\t\t\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\n\t\t\t\t\t\texternalCollection._skippedIndexesFromExternal[ i ]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Load the initial content of the collection.\n\t\tfor ( const externalItem of externalCollection ) {\n\t\t\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\n\t\t}\n\n\t\t// Synchronize the with collection as new items are added.\n\t\tthis.listenTo( externalCollection, 'add', addItem );\n\n\t\t// Synchronize the with collection as new items are removed.\n\t\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\n\t\t\tconst item = this._bindToExternalToInternalMap.get( externalItem );\n\n\t\t\tif ( item ) {\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\n\t\t\t// After removing element from external collection we need update/remove indexes\n\t\t\t// of skipped items in internal collection.\n\t\t\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\n\t\t\t\tif ( index < skipped ) {\n\t\t\t\t\tresult.push( skipped - 1 );\n\t\t\t\t}\n\n\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\tresult.push( skipped );\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [] );\n\t\t} );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an item is added to the collection.\n\t *\n\t * @event add\n\t * @param {Object} item The added item.\n\t */\n\n\t/**\n\t * Fired when an item is removed from the collection.\n\t *\n\t * @event remove\n\t * @param {Object} item The removed item.\n\t * @param {Number} index Index from which item was removed.\n\t */\n}\n\nmix( Collection, EmitterMixin );\n\n/**\n * An object returned by the {@link module:utils/collection~Collection#bindTo `bindTo()`} method\n * providing functions that specify the type of the binding.\n *\n * See the {@link module:utils/collection~Collection#bindTo `bindTo()`} documentation for examples.\n *\n * @interface module:utils/collection~CollectionBindToChain\n */\n\n/**\n * Creates a callback or a property binding.\n *\n * @method #using\n * @param {Function|String} callbackOrProperty  When the function is passed, it should return\n * the collection items. When the string is provided, the property value is used to create the bound collection items.\n */\n\n/**\n * Creates the class factory binding in which items of the source collection are passed to\n * the constructor of the specified class.\n *\n * @method #as\n * @param {Function} Class The class constructor used to create instances in the factory.\n */\n"]}]}