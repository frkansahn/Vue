{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-paragraph\\src\\paragraph.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-paragraph\\src\\paragraph.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js"],"names":["ParagraphCommand","Plugin","Paragraph","editor","model","data","commands","add","schema","register","inheritAllFrom","conversion","elementToElement","view","for","viewElement","modelWriter","paragraphLikeElements","has","name","isEmpty","createElement","converterPriority","upcastDispatcher","on","evt","conversionApi","consumable","test","viewItem","isParagraphable","modelCursor","Object","assign","wrapInParagraph","priority","modelRange","document","registerPostFixer","writer","_autoparagraphEmptyRoots","enqueueChange","getRootNames","rootName","root","getRoot","checkChild","insertElement","Set","input","position","paragraph","insert","convertItem","createPositionAt","node","context","createContext","push"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst data = editor.data;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Content autoparagraphing. --------------------------------------------------\n\n\t\t// Handles element which has not been converted by any plugin and checks if it would be converted if\n\t\t// we wrap it in a paragraph or change it to a paragraph.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\tif ( !Paragraph.paragraphLikeElements.has( viewElement.name ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Do not auto-paragraph empty elements.\n\t\t\t\tif ( viewElement.isEmpty ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn modelWriter.createElement( 'paragraph' );\n\t\t\t},\n\t\t\tconverterPriority: 'low'\n\t\t} );\n\n\t\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n\t\t\t// Do not try auto-paragraphing if the element was already converted.\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the element is not paragraph-like try wrapping it in a paragraph.\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\t\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\n\t\t\t// When node is already converted then do nothing.\n\t\t\tif ( data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Empty roots autoparagraphing. -----------------------------------------------\n\n\t\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\n\t\t// Besides fixing content on #changesDone we also need to handle editor.data#ready event because\n\t\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\n\t\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\n\n\t\teditor.data.on( 'ready', () => {\n\t\t\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Fixes all empty roots.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n\t_autoparagraphEmptyRoots( writer ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\n\t\t\t\t// If paragraph element is allowed in the root, create paragraph element.\n\t\t\t\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\n\t\t\t\t\twriter.insertElement( 'paragraph', root );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td'\n] );\n\nfunction wrapInParagraph( input, position, conversionApi ) {\n\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\tconversionApi.writer.insert( paragraph, position );\n\treturn conversionApi.convertItem( input, conversionApi.writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction isParagraphable( node, position, schema ) {\n\tconst context = schema.createContext( position );\n\n\t// When paragraph is allowed in this context...\n\tif ( !schema.checkChild( context, 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\t// And a node would be allowed in this paragraph...\n\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"]}]}