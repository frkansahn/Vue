{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\element.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\element.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"],"names":["Node","NodeList","Text","TextProxy","isIterable","Element","name","attrs","children","_children","_insertChild","type","cutType","replace","index","getNode","Symbol","iterator","node","getNodeIndex","getNodeStartOffset","offset","offsetToIndex","relativePath","getChild","json","length","push","toJSON","deep","Array","from","map","_clone","getAttributes","nodes","childCount","items","normalize","parent","_remove","_insertNodes","howMany","_removeNodes","maxOffset","child","fromJSON","attributes","data"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/element\n */\n\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n// @if CK_DEBUG_ENGINE // const { stringifyMap, convertMapToStringifiedObject, convertMapToTags } = require( '../dev-utils/utils' );\n\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a model element.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n\t *\n\t * @protected\n\t * @param {String} name Element's name.\n\t * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * One or more nodes to be inserted as children of created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Element name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/model/element~Element#name\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * List of children nodes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Number of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'model:element' ); // -> true\n\t *\t\telement.is( 'model:node' ); // -> true\n\t *\n\t *\t\telement.is( 'view:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'image' ); // -> true if this is an <image> element\n\t *\t\telement.is( 'element', 'image' ); // -> same as above\n\t *\t\ttext.is( 'image' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^model:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this element's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's index in this element.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst divElement = new Element( [ textNode, pElement ] );\n\t *\t\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdivElement.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdivElement.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number}\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n\t *\n\t * @returns {Object} `Element` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.name = this.name;\n\n\t\tif ( this._children.length > 0 ) {\n\t\t\tjson.children = [];\n\n\t\t\tfor ( const node of this._children ) {\n\t\t\t\tjson.children.push( node.toJSON() );\n\t\t\t}\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n\t * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any child.\n\t */\n\t_clone( deep = false ) {\n\t\tconst children = deep ? Array.from( this._children ).map( node => node._clone( true ) ) : null;\n\n\t\treturn new Element( this.name, this.getAttributes(), children );\n\t}\n\n\t/**\n\t * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n\t *\n\t * @see module:engine/model/writer~Writer#append\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\n\t */\n\t_appendChild( nodes ) {\n\t\tthis._insertChild( this.childCount, nodes );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this element.\n\t *\n\t * @see module:engine/model/writer~Writer#insert\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index and sets\n\t * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `Element` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `Element`.\n\t * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tlet children = null;\n\n\t\tif ( json.children ) {\n\t\t\tchildren = [];\n\n\t\t\tfor ( const child of json.children ) {\n\t\t\t\tif ( child.name ) {\n\t\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Element( json.name, json.attributes, children );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `<${ this.rootName || this.name }>`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelElement: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( `ModelElement: ${ this }, ${ this.childCount } children,\n\t// @if CK_DEBUG_ENGINE //\t\tattrs: ${ convertMapToStringifiedObject( this.getAttributes() ) }` );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logAll() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( '--------------------' );\n\t// @if CK_DEBUG_ENGINE //\n\t// @if CK_DEBUG_ENGINE // \tthis.logExtended();\n\t// @if CK_DEBUG_ENGINE //\tconsole.log( 'List of children:' );\n\t// @if CK_DEBUG_ENGINE //\n\t// @if CK_DEBUG_ENGINE // \tfor ( const child of this.getChildren() ) {\n\t// @if CK_DEBUG_ENGINE // \t\tchild.log();\n\t// @if CK_DEBUG_ENGINE // \t}\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // printTree( level = 0) {\n\t// @if CK_DEBUG_ENGINE // \tlet string = '';\n\n\t// @if CK_DEBUG_ENGINE // \tstring += '\\t'.repeat( level );\n\t// @if CK_DEBUG_ENGINE // \tstring += `<${ this.rootName || this.name }${ convertMapToTags( this.getAttributes() ) }>`;\n\n\t// @if CK_DEBUG_ENGINE // \tfor ( const child of this.getChildren() ) {\n\t// @if CK_DEBUG_ENGINE // \t\tstring += '\\n';\n\n\t// @if CK_DEBUG_ENGINE // \t\tif ( child.is( 'text' ) ) {\n\t// @if CK_DEBUG_ENGINE // \t\t\tconst textAttrs = convertMapToTags( child._attrs );\n\n\t// @if CK_DEBUG_ENGINE // \t\t\tstring += '\\t'.repeat( level + 1 );\n\n\t// @if CK_DEBUG_ENGINE // \t\t\tif ( textAttrs !== '' ) {\n\t// @if CK_DEBUG_ENGINE // \t\t\t\tstring += `<$text${ textAttrs }>` + child.data + '</$text>';\n\t// @if CK_DEBUG_ENGINE // \t\t\t} else {\n\t// @if CK_DEBUG_ENGINE // \t\t\t\tstring += child.data;\n\t// @if CK_DEBUG_ENGINE // \t\t\t}\n\t// @if CK_DEBUG_ENGINE // \t\t} else {\n\t// @if CK_DEBUG_ENGINE // \t\t\tstring += child.printTree( level + 1 );\n\t// @if CK_DEBUG_ENGINE // \t\t}\n\t// @if CK_DEBUG_ENGINE // \t}\n\n\t// @if CK_DEBUG_ENGINE // \tif ( this.childCount ) {\n\t// @if CK_DEBUG_ENGINE // \t\tstring += '\\n' + '\\t'.repeat( level );\n\t// @if CK_DEBUG_ENGINE // \t}\n\n\t// @if CK_DEBUG_ENGINE // \tstring += `</${ this.rootName || this.name }>`;\n\n\t// @if CK_DEBUG_ENGINE // \treturn string;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logTree() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( this.printTree() );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n"]}]}