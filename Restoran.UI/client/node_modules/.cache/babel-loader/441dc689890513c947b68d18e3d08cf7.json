{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-typing\\src\\utils\\injecttypingmutationshandling.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-typing\\src\\utils\\injecttypingmutationshandling.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-typing/src/utils/injecttypingmutationshandling.js"],"names":["diff","DomConverter","getSingleTextNodeChange","containerChildrenMutated","injectTypingMutationsHandling","editor","editing","view","document","on","evt","mutations","viewSelection","MutationHandler","handle","_handleContainerChildrenMutations","mutation","_handleTextMutation","_handleTextNodeInsertion","mutationsCommonAncestor","getMutationsContainer","domConverter","domMutationCommonAncestor","mapViewToDom","freshDomConverter","modelFromCurrentDom","data","toModel","domToView","getChild","currentModel","mapper","toModelElement","modelFromDomChildren","Array","from","getChildren","currentModelChildren","lastDomChild","length","lastCurrentChild","is","pop","schema","model","isSafeForTextMutation","newText","map","item","join","replace","oldText","diffResult","calculateChanges","firstChangeAt","insertions","deletions","modelSelectionRange","toModelRange","getFirstRange","insertText","substr","removeRange","createRange","createPositionAt","execute","text","range","resultRange","type","viewPos","node","modelPos","toModelPosition","getShiftedBy","change","index","insertedText","values","lca","reduce","commonAncestor","getCommonAncestor","includeSelf","getAncestors","parentFirst","find","element","children","every","child","isInline","lastChangeAt","i"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injecttypingmutationshandling\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nimport { getSingleTextNodeChange, containerChildrenMutated } from './utils';\n\n/**\n * Handles mutations caused by normal typing.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectTypingMutationsHandling( editor ) {\n\teditor.editing.view.document.on( 'mutations', ( evt, mutations, viewSelection ) => {\n\t\tnew MutationHandler( editor ).handle( mutations, viewSelection );\n\t} );\n}\n\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\nclass MutationHandler {\n\t/**\n\t * Creates an instance of the mutation handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * Editor instance for which mutations are handled.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The editing controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController} #editing\n\t\t */\n\t\tthis.editing = this.editor.editing;\n\t}\n\n\t/**\n\t * Handles given mutations.\n\t *\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\thandle( mutations, viewSelection ) {\n\t\tif ( containerChildrenMutated( mutations ) ) {\n\t\t\tthis._handleContainerChildrenMutations( mutations, viewSelection );\n\t\t} else {\n\t\t\tfor ( const mutation of mutations ) {\n\t\t\t\t// Fortunately it will never be both.\n\t\t\t\tthis._handleTextMutation( mutation, viewSelection );\n\t\t\t\tthis._handleTextNodeInsertion( mutation );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles situations when container's children mutated during input. This can happen when\n\t * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n\t * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n\t * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n\t * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n\t *\n\t * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n\t * and then compared with the current model to calculate the proper text change.\n\t *\n\t * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n\t * in {@link #_handleTextMutation}).\n\t *\n\t * @private\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\t_handleContainerChildrenMutations( mutations, viewSelection ) {\n\t\t// Get common ancestor of all mutations.\n\t\tconst mutationsCommonAncestor = getMutationsContainer( mutations );\n\n\t\t// Quit if there is no common ancestor.\n\t\tif ( !mutationsCommonAncestor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.editor.editing.view.domConverter;\n\n\t\t// Get common ancestor in DOM.\n\t\tconst domMutationCommonAncestor = domConverter.mapViewToDom( mutationsCommonAncestor );\n\n\t\t// Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n\t\t// This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\t\tconst freshDomConverter = new DomConverter( this.editor.editing.view.document );\n\t\tconst modelFromCurrentDom = this.editor.data.toModel(\n\t\t\tfreshDomConverter.domToView( domMutationCommonAncestor )\n\t\t).getChild( 0 );\n\n\t\t// Current model.\n\t\tconst currentModel = this.editor.editing.mapper.toModelElement( mutationsCommonAncestor );\n\n\t\t// If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n\t\t// That means that we would need to diff model elements (see `if` below). Better return early instead of\n\t\t// trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n\t\t// This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n\t\t// because `<ul>` is not mapped (`<li>`s are).\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/718.\n\t\tif ( !currentModel ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get children from both ancestors.\n\t\tconst modelFromDomChildren = Array.from( modelFromCurrentDom.getChildren() );\n\t\tconst currentModelChildren = Array.from( currentModel.getChildren() );\n\n\t\t// Remove the last `<softBreak>` from the end of `modelFromDomChildren` if there is no `<softBreak>` in current model.\n\t\t// If the described scenario happened, it means that this is a bogus `<br />` added by a browser.\n\t\tconst lastDomChild = modelFromDomChildren[ modelFromDomChildren.length - 1 ];\n\t\tconst lastCurrentChild = currentModelChildren[ currentModelChildren.length - 1 ];\n\n\t\tif ( lastDomChild && lastDomChild.is( 'softBreak' ) && lastCurrentChild && !lastCurrentChild.is( 'softBreak' ) ) {\n\t\t\tmodelFromDomChildren.pop();\n\t\t}\n\n\t\tconst schema = this.editor.model.schema;\n\n\t\t// Skip situations when common ancestor has any container elements.\n\t\tif ( !isSafeForTextMutation( modelFromDomChildren, schema ) || !isSafeForTextMutation( currentModelChildren, schema ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space. See comment in `_handleTextMutation`.\n\t\t// Replace non-texts with any character. This is potentially dangerous but passes in manual tests. The thing is\n\t\t// that we need to take care of proper indexes so we cannot simply remove non-text elements from the content.\n\t\t// By inserting a character we keep all the real texts on their indexes.\n\t\tconst newText = modelFromDomChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\t\tconst oldText = currentModelChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\t\tconst removeRange = this.editor.model.createRange(\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt ),\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt + deletions )\n\t\t);\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextMutation( mutation, viewSelection ) {\n\t\tif ( mutation.type != 'text' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t// We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n\t\t// for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n\t\t// Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n\t\t// However then it will be handled outside of mutations, like enter key is.\n\t\t// The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n\t\t// take `newText` and compare it to (cleaned up) view.\n\t\t// It could also be done in mutation observer too, however if any outside plugin would like to\n\t\t// introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\t\tconst newText = mutation.newText.replace( /\\u00A0/g, ' ' );\n\t\t// To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\t\tconst oldText = mutation.oldText.replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\t// Get the position in view and model where the changes will happen.\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, firstChangeAt );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst removeRange = this.editor.model.createRange( modelPos, modelPos.getShiftedBy( deletions ) );\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextNodeInsertion( mutation ) {\n\t\tif ( mutation.type != 'children' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst change = getSingleTextNodeChange( mutation );\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, change.index );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst insertedText = change.values[ 0 ].data;\n\n\t\tthis.editor.execute( 'input', {\n\t\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t\t// See comment in `_handleTextMutation`.\n\t\t\t// In this case we don't need to do this before `diff` because we diff whole nodes.\n\t\t\t// Just change &nbsp; in case there are some.\n\t\t\ttext: insertedText.replace( /\\u00A0/g, ' ' ),\n\t\t\trange: this.editor.model.createRange( modelPos )\n\t\t} );\n\t}\n}\n\n// Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\nfunction getMutationsContainer( mutations ) {\n\tconst lca = mutations\n\t\t.map( mutation => mutation.node )\n\t\t.reduce( ( commonAncestor, node ) => {\n\t\t\treturn commonAncestor.getCommonAncestor( node, { includeSelf: true } );\n\t\t} );\n\n\tif ( !lca ) {\n\t\treturn;\n\t}\n\n\t// We need to look for container and root elements only, so check all LCA's\n\t// ancestors (starting from itself).\n\treturn lca.getAncestors( { includeSelf: true, parentFirst: true } )\n\t\t.find( element => element.is( 'containerElement' ) || element.is( 'rootElement' ) );\n}\n\n// Returns true if provided array contains content that won't be problematic during diffing and text mutation handling.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isSafeForTextMutation( children, schema ) {\n\treturn children.every( child => schema.isInline( child ) );\n}\n\n// Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @returns {{insertions: number, deletions: number, firstChangeAt: *}}\nfunction calculateChanges( diffResult ) {\n\t// Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n\tlet firstChangeAt = null;\n\t// Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\tlet lastChangeAt = null;\n\n\t// Get `firstChangeAt` and `lastChangeAt`.\n\tfor ( let i = 0; i < diffResult.length; i++ ) {\n\t\tconst change = diffResult[ i ];\n\n\t\tif ( change != 'equal' ) {\n\t\t\tfirstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n\t\t\tlastChangeAt = i;\n\t\t}\n\t}\n\n\t// How many characters, starting from `firstChangeAt`, should be removed.\n\tlet deletions = 0;\n\t// How many characters, starting from `firstChangeAt`, should be inserted.\n\tlet insertions = 0;\n\n\tfor ( let i = firstChangeAt; i <= lastChangeAt; i++ ) {\n\t\t// If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n\t\tif ( diffResult[ i ] != 'insert' ) {\n\t\t\tdeletions++;\n\t\t}\n\n\t\t// If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\t\tif ( diffResult[ i ] != 'delete' ) {\n\t\t\tinsertions++;\n\t\t}\n\t}\n\n\treturn { insertions, deletions, firstChangeAt };\n}\n"]}]}