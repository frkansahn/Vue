{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\conversion\\mapper.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\conversion\\mapper.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js"],"names":["ModelPosition","ModelRange","ViewPosition","ViewRange","ViewText","EmitterMixin","mix","Mapper","_modelToViewMapping","WeakMap","_viewToModelMapping","_viewToModelLengthCallbacks","Map","_markerNameToElements","_elementToMarkerNames","_unboundMarkerNames","Set","on","evt","data","viewPosition","viewContainer","get","modelPosition","parent","_findPositionIn","offset","priority","viewBlock","findMappedViewAncestor","modelParent","modelOffset","_toModelOffset","_createAt","modelElement","viewElement","set","toModelElement","delete","has","markerName","add","toViewElement","element","name","elements","names","nameToElements","size","elementToNames","markerNames","Array","from","clear","viewRange","toModelPosition","start","end","modelRange","toViewPosition","mapper","fire","options","isPhantom","boundElements","is","getElementsWithSameId","clone","viewElementName","lengthCallback","viewParent","viewOffset","offsetToParentStart","index","offsetInParent","i","getModelLength","getChild","viewNode","callback","length","len","getChildren","child","expectedOffset","lastLength","_moveViewPositionToTextNode","nodeBefore","nodeAfter"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/mapper\n */\n\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\n\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Maps elements, positions and markers between {@link module:engine/view/document~Document the view} and\n * {@link module:engine/model/model the model}.\n *\n * The instance of the Mapper used for the editing pipeline is available in\n * {@link module:engine/controller/editingcontroller~EditingController#mapper `editor.editing.mapper`}.\n *\n * Mapper uses bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map complex model to/from view relations, you may provide custom callbacks for\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper {\n\t/**\n\t * Creates an instance of the mapper.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Model element to view element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._modelToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View element to model element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._viewToModelMapping = new WeakMap();\n\n\t\t/**\n\t\t * A map containing callbacks between view element names and functions evaluating length of view elements\n\t\t * in model.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._viewToModelLengthCallbacks = new Map();\n\n\t\t/**\n\t\t * Model marker name to view elements mapping.\n\t\t *\n\t\t * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n\t\t * One marker (name) can be mapped to multiple elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._markerNameToElements = new Map();\n\n\t\t/**\n\t\t * View element to model marker names mapping.\n\t\t *\n\t\t * This is reverse to {@link ~Mapper#_markerNameToElements} map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._elementToMarkerNames = new Map();\n\n\t\t/**\n\t\t * Stores marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t\t * has been removed, moved or renamed).\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/markercollection~Marker>}\n\t\t */\n\t\tthis._unboundMarkerNames = new Set();\n\n\t\t// Default mapper algorithm for mapping model position to view position.\n\t\tthis.on( 'modelToViewPosition', ( evt, data ) => {\n\t\t\tif ( data.viewPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewContainer = this._modelToViewMapping.get( data.modelPosition.parent );\n\n\t\t\tdata.viewPosition = this._findPositionIn( viewContainer, data.modelPosition.offset );\n\t\t}, { priority: 'low' } );\n\n\t\t// Default mapper algorithm for mapping view position to model position.\n\t\tthis.on( 'viewToModelPosition', ( evt, data ) => {\n\t\t\tif ( data.modelPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewBlock = this.findMappedViewAncestor( data.viewPosition );\n\t\t\tconst modelParent = this._viewToModelMapping.get( viewBlock );\n\t\t\tconst modelOffset = this._toModelOffset( data.viewPosition.parent, data.viewPosition.offset, viewBlock );\n\n\t\t\tdata.modelPosition = ModelPosition._createAt( modelParent, modelOffset );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n\t * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n\t * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n\t * The information that elements are bound is also used to translate positions.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t */\n\tbindElements( modelElement, viewElement ) {\n\t\tthis._modelToViewMapping.set( modelElement, viewElement );\n\t\tthis._viewToModelMapping.set( viewElement, modelElement );\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/view/element~Element view element} from the map.\n\t *\n\t * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n\t * will be removed only if model element is still bound to passed `viewElement`.\n\t *\n\t * This behavior lets for re-binding model element to another view element without fear of losing the new binding\n\t * when the previously bound view element is unbound.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element to unbind.\n\t */\n\tunbindViewElement( viewElement ) {\n\t\tconst modelElement = this.toModelElement( viewElement );\n\n\t\tthis._viewToModelMapping.delete( viewElement );\n\n\t\tif ( this._elementToMarkerNames.has( viewElement ) ) {\n\t\t\tfor ( const markerName of this._elementToMarkerNames.get( viewElement ) ) {\n\t\t\t\tthis._unboundMarkerNames.add( markerName );\n\t\t\t}\n\t\t}\n\n\t\tif ( this._modelToViewMapping.get( modelElement ) == viewElement ) {\n\t\t\tthis._modelToViewMapping.delete( modelElement );\n\t\t}\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/model/element~Element model element} from the map.\n\t *\n\t * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\n\t * will be removed only if view element is still bound to passed `modelElement`.\n\t *\n\t * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n\t * when the previously bound model element is unbound.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element to unbind.\n\t */\n\tunbindModelElement( modelElement ) {\n\t\tconst viewElement = this.toViewElement( modelElement );\n\n\t\tthis._modelToViewMapping.delete( modelElement );\n\n\t\tif ( this._viewToModelMapping.get( viewElement ) == modelElement ) {\n\t\t\tthis._viewToModelMapping.delete( viewElement );\n\t\t}\n\t}\n\n\t/**\n\t * Binds given marker name with given {@link module:engine/view/element~Element view element}. The element\n\t * will be added to the current set of elements bound with given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to bind.\n\t * @param {String} name Marker name.\n\t */\n\tbindElementToMarker( element, name ) {\n\t\tconst elements = this._markerNameToElements.get( name ) || new Set();\n\t\telements.add( element );\n\n\t\tconst names = this._elementToMarkerNames.get( element ) || new Set();\n\t\tnames.add( name );\n\n\t\tthis._markerNameToElements.set( name, elements );\n\t\tthis._elementToMarkerNames.set( element, names );\n\t}\n\n\t/**\n\t * Unbinds an element from given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to unbind.\n\t * @param {String} name Marker name.\n\t */\n\tunbindElementFromMarkerName( element, name ) {\n\t\tconst nameToElements = this._markerNameToElements.get( name );\n\n\t\tif ( nameToElements ) {\n\t\t\tnameToElements.delete( element );\n\n\t\t\tif ( nameToElements.size == 0 ) {\n\t\t\t\tthis._markerNameToElements.delete( name );\n\t\t\t}\n\t\t}\n\n\t\tconst elementToNames = this._elementToMarkerNames.get( element );\n\n\t\tif ( elementToNames ) {\n\t\t\telementToNames.delete( name );\n\n\t\t\tif ( elementToNames.size == 0 ) {\n\t\t\t\tthis._elementToMarkerNames.delete( element );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tflushUnboundMarkerNames() {\n\t\tconst markerNames = Array.from( this._unboundMarkerNames );\n\n\t\tthis._unboundMarkerNames.clear();\n\n\t\treturn markerNames;\n\t}\n\n\t/**\n\t * Removes all model to view and view to model bindings.\n\t */\n\tclearBindings() {\n\t\tthis._modelToViewMapping = new WeakMap();\n\t\tthis._viewToModelMapping = new WeakMap();\n\t\tthis._markerNameToElements = new Map();\n\t\tthis._elementToMarkerNames = new Map();\n\t\tthis._unboundMarkerNames = new Set();\n\t}\n\n\t/**\n\t * Gets the corresponding model element.\n\t *\n\t * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\n\t */\n\ttoModelElement( viewElement ) {\n\t\treturn this._viewToModelMapping.get( viewElement );\n\t}\n\n\t/**\n\t * Gets the corresponding view element.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\n\t */\n\ttoViewElement( modelElement ) {\n\t\treturn this._modelToViewMapping.get( modelElement );\n\t}\n\n\t/**\n\t * Gets the corresponding model range.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {module:engine/model/range~Range} Corresponding model range.\n\t */\n\ttoModelRange( viewRange ) {\n\t\treturn new ModelRange( this.toModelPosition( viewRange.start ), this.toModelPosition( viewRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding view range.\n\t *\n\t * @param {module:engine/model/range~Range} modelRange Model range.\n\t * @returns {module:engine/view/range~Range} Corresponding view range.\n\t */\n\ttoViewRange( modelRange ) {\n\t\treturn new ViewRange( this.toViewPosition( modelRange.start ), this.toViewPosition( modelRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding model position.\n\t *\n\t * @fires viewToModelPosition\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {module:engine/model/position~Position} Corresponding model position.\n\t */\n\ttoModelPosition( viewPosition ) {\n\t\tconst data = {\n\t\t\tviewPosition,\n\t\t\tmapper: this\n\t\t};\n\n\t\tthis.fire( 'viewToModelPosition', data );\n\n\t\treturn data.modelPosition;\n\t}\n\n\t/**\n\t * Gets the corresponding view position.\n\t *\n\t * @fires modelToViewPosition\n\t * @param {module:engine/model/position~Position} modelPosition Model position.\n\t * @param {Object} [options] Additional options for position mapping process.\n\t * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\n\t * in model tree which no longer exists. For example, it could be an end of a removed model range.\n\t * @returns {module:engine/view/position~Position} Corresponding view position.\n\t */\n\ttoViewPosition( modelPosition, options = { isPhantom: false } ) {\n\t\tconst data = {\n\t\t\tmodelPosition,\n\t\t\tmapper: this,\n\t\t\tisPhantom: options.isPhantom\n\t\t};\n\n\t\tthis.fire( 'modelToViewPosition', data );\n\n\t\treturn data.viewPosition;\n\t}\n\n\t/**\n\t * Gets all view elements bound to the given marker name.\n\t *\n\t * @param {String} name Marker name.\n\t * @returns {Set.<module:engine/view/element~Element>|null} View elements bound with given marker name or `null`\n\t * if no elements are bound to given marker name.\n\t */\n\tmarkerNameToElements( name ) {\n\t\tconst boundElements = this._markerNameToElements.get( name );\n\n\t\tif ( !boundElements ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = new Set();\n\n\t\tfor ( const element of boundElements ) {\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tfor ( const clone of element.getElementsWithSameId() ) {\n\t\t\t\t\telements.add( clone );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telements.add( element );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Registers a callback that evaluates the length in the model of a view element with given name.\n\t *\n\t * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n\t * a number representing the length of view element in model.\n\t *\n\t *\t\t// List item in view may contain nested list, which have other list items. In model though,\n\t *\t\t// the lists are represented by flat structure. Because of those differences, length of list view element\n\t *\t\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n\t *\n\t *\t\tfunction getViewListItemLength( element ) {\n\t *\t\t\tlet length = 1;\n\t *\n\t *\t\t\tfor ( let child of element.getChildren() ) {\n\t *\t\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t *\t\t\t\t\tfor ( let item of child.getChildren() ) {\n\t *\t\t\t\t\t\tlength += getViewListItemLength( item );\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn length;\n\t *\t\t}\n\t *\n\t *\t\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t *\n\t * @param {String} viewElementName Name of view element for which callback is registered.\n\t * @param {Function} lengthCallback Function return a length of view element instance in model.\n\t */\n\tregisterViewToModelLength( viewElementName, lengthCallback ) {\n\t\tthis._viewToModelLengthCallbacks.set( viewElementName, lengthCallback );\n\t}\n\n\t/**\n\t * For given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to\n\t * the model.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition Position for which mapped ancestor should be found.\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tfindMappedViewAncestor( viewPosition ) {\n\t\tlet parent = viewPosition.parent;\n\n\t\twhile ( !this._viewToModelMapping.has( parent ) ) {\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Calculates model offset based on the view position and the block element.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n\t *\n\t * Is a sum of:\n\t *\n\t *\t\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Position parent.\n\t * @param {Number} viewOffset Position offset.\n\t * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\n\t * @returns {Number} Offset in the model.\n\t */\n\t_toModelOffset( viewParent, viewOffset, viewBlock ) {\n\t\tif ( viewBlock != viewParent ) {\n\t\t\t// See example.\n\t\t\tconst offsetToParentStart = this._toModelOffset( viewParent.parent, viewParent.index, viewBlock );\n\t\t\tconst offsetInParent = this._toModelOffset( viewParent, viewOffset, viewParent );\n\n\t\t\treturn offsetToParentStart + offsetInParent;\n\t\t}\n\n\t\t// viewBlock == viewParent, so we need to calculate the offset in the parent element.\n\n\t\t// If the position is a text it is simple (\"ba|r\" -> 2).\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn viewOffset;\n\t\t}\n\n\t\t// If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n\t\tlet modelOffset = 0;\n\n\t\tfor ( let i = 0; i < viewOffset; i++ ) {\n\t\t\tmodelOffset += this.getModelLength( viewParent.getChild( i ) );\n\t\t}\n\n\t\treturn modelOffset;\n\t}\n\n\t/**\n\t * Gets the length of the view element in the model.\n\t *\n\t * The length is calculated as follows:\n\t * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\n\t * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\n\t * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\n\t * {@link module:engine/view/text~Text#data data},\n\t * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n\t * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n\t * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\n\t *\n\t * Examples:\n\t *\n\t *\t\tfoo                          -> 3 // Text length is equal to it's data length.\n\t *\t\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n\t *\t\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n\t *\t\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n\t *\n\t * @param {module:engine/view/element~Element} viewNode View node.\n\t * @returns {Number} Length of the node in the tree model.\n\t */\n\tgetModelLength( viewNode ) {\n\t\tif ( this._viewToModelLengthCallbacks.get( viewNode.name ) ) {\n\t\t\tconst callback = this._viewToModelLengthCallbacks.get( viewNode.name );\n\n\t\t\treturn callback( viewNode );\n\t\t} else if ( this._viewToModelMapping.has( viewNode ) ) {\n\t\t\treturn 1;\n\t\t} else if ( viewNode.is( 'text' ) ) {\n\t\t\treturn viewNode.data.length;\n\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tlet len = 0;\n\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tlen += this.getModelLength( child );\n\t\t\t}\n\n\t\t\treturn len;\n\t\t}\n\t}\n\n\t/**\n\t * Finds the position in the view node (or its children) with the expected model offset.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\n\t *\n\t *\t\t_findPositionIn( p, 4 ):\n\t *\t\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n\t *\t\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n\t *\t\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n\t *\n\t *\t\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\n\t *\t\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n\t *\t\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n\t *\n\t *\t\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\n\t *\t\tWe are in the text node so we can simple find the offset.\n\t *\t\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\n\t * @param {Number} expectedOffset Expected offset.\n\t * @returns {module:engine/view/position~Position} Found position.\n\t */\n\t_findPositionIn( viewParent, expectedOffset ) {\n\t\t// Last scanned view node.\n\t\tlet viewNode;\n\t\t// Length of the last scanned view node.\n\t\tlet lastLength = 0;\n\n\t\tlet modelOffset = 0;\n\t\tlet viewOffset = 0;\n\n\t\t// In the text node it is simple: offset in the model equals offset in the text.\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn new ViewPosition( viewParent, expectedOffset );\n\t\t}\n\n\t\t// In other cases we add lengths of child nodes to find the proper offset.\n\n\t\t// If it is smaller we add the length.\n\t\twhile ( modelOffset < expectedOffset ) {\n\t\t\tviewNode = viewParent.getChild( viewOffset );\n\t\t\tlastLength = this.getModelLength( viewNode );\n\t\t\tmodelOffset += lastLength;\n\t\t\tviewOffset++;\n\t\t}\n\n\t\t// If it equals we found the position.\n\t\tif ( modelOffset == expectedOffset ) {\n\t\t\treturn this._moveViewPositionToTextNode( new ViewPosition( viewParent, viewOffset ) );\n\t\t}\n\t\t// If it is higher we need to enter last child.\n\t\telse {\n\t\t\t// ( modelOffset - lastLength ) is the offset to the child we enter,\n\t\t\t// so we subtract it from the expected offset to fine the offset in the child.\n\t\t\treturn this._findPositionIn( viewNode, expectedOffset - ( modelOffset - lastLength ) );\n\t\t}\n\t}\n\n\t/**\n\t * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\n\t * if it was next to it.\n\t *\n\t *\t\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n\t *\t\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n\t *\t\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\n\t * @returns {module:engine/view/position~Position} Position in text node if possible.\n\t */\n\t_moveViewPositionToTextNode( viewPosition ) {\n\t\t// If the position is just after text node, put it at the end of that text node.\n\t\t// If the position is just before text node, put it at the beginning of that text node.\n\t\tconst nodeBefore = viewPosition.nodeBefore;\n\t\tconst nodeAfter = viewPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeBefore, nodeBefore.data.length );\n\t\t} else if ( nodeAfter instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeAfter, 0 );\n\t\t}\n\n\t\t// Otherwise, just return the given position.\n\t\treturn viewPosition;\n\t}\n\n\t/**\n\t * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\n\t * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\n\t * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\n\t * value in `data` object that is passed as one of parameters to the event callback.\n\t *\n\t * \t\t// Assume that \"captionedImage\" model element is converted to <img> and following <span> elements in view,\n\t * \t\t// and the model element is bound to <img> element. Force mapping model positions inside \"captionedImage\" to that\n\t * \t\t// <span> element.\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = modelPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.name == 'captionedImage' ) {\n\t *\t\t\t\tconst viewImg = data.mapper.toViewElement( positionParent );\n\t *\t\t\t\tconst viewCaption = viewImg.nextSibling; // The <span> element.\n\t *\n\t *\t\t\t\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\n\t *\n\t *\t\t\t\t// Stop the event if other callbacks should not modify calculated value.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** keep in mind that sometimes a \"phantom\" model position is being converted. \"Phantom\" model position is\n\t * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\n\t * (it would point to a correct place in view when converted). One example of such situation is when a range is\n\t * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\n\t * handle such situation, check `data.isPhantom` flag:\n\t *\n\t * \t\t// Assume that there is \"customElement\" model element and whenever position is before it, we want to move it\n\t * \t\t// to the inside of the view element bound to \"customElement\".\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tif ( data.isPhantom ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\t// Below line might crash for phantom position that does not exist in model.\n\t *\t\t\tconst sibling = data.modelPosition.nodeBefore;\n\t *\n\t *\t\t\t// Check if this is the element we are interested in.\n\t *\t\t\tif ( !sibling.is( 'customElement' ) ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst viewElement = data.mapper.toViewElement( sibling );\n\t *\n\t *\t\t\tdata.viewPosition = new ViewPosition( sibling, 0 );\n\t *\n\t *\t\t\tevt.stop();\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event modelToViewPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n\n\t/**\n\t * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\n\t *\n\t * \t\t// See example in `modelToViewPosition` event description.\n\t * \t\t// This custom mapping will map positions from <span> element next to <img> to the \"captionedImage\" element.\n\t *\t\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = viewPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.hasClass( 'image-caption' ) ) {\n\t *\t\t\t\tconst viewImg = positionParent.previousSibling;\n\t *\t\t\t\tconst modelImg = data.mapper.toModelElement( viewImg );\n\t *\n\t *\t\t\t\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event viewToModelPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n}\n\nmix( Mapper, EmitterMixin );\n"]}]}