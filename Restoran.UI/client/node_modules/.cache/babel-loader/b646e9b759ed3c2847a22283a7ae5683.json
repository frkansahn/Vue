{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-editor-decoupled\\src\\decouplededitor.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-editor-decoupled\\src\\decouplededitor.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor.js"],"names":["Editor","DataApiMixin","HtmlDataProcessor","DecoupledEditorUI","DecoupledEditorUIView","getDataFromElement","setDataInElement","mix","isElement","CKEditorError","secureSourceElement","DecoupledEditor","sourceElementOrData","config","sourceElement","data","processor","viewDocument","model","document","createRoot","shouldToolbarGroupWhenFull","get","view","locale","editing","editableElement","ui","getData","destroy","then","Promise","resolve","isHTMLElement","tagName","editor","initPlugins","init","initialData","getInitialData","fire"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitor\n */\n\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport DecoupledEditorUI from './decouplededitorui';\nimport DecoupledEditorUIView from './decouplededitoruiview';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport secureSourceElement from '@ckeditor/ckeditor5-core/src/editor/utils/securesourceelement';\n\n/**\n * The {@glink builds/guides/overview#document-editor decoupled editor} implementation.\n * It provides an inline editable and a toolbar. However, unlike other editors,\n * it does not render these components anywhere in the DOM unless configured.\n *\n * This type of an editor is dedicated to integrations which require a customized UI with an open\n * structure, allowing developers to specify the exact location of the interface.\n *\n * See the document editor {@glink examples/builds/document-editor demo} to learn about possible use cases\n * for the decoupled editor.\n *\n * In order to create a decoupled editor instance, use the static\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method.\n *\n * # Decoupled editor and document editor build\n *\n * The decoupled editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-decoupled`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-decoupled) package)\n * but it is also available in the {@glink builds/guides/overview#document-editor document editor build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows for easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class DecoupledEditor extends Editor {\n\t/**\n\t * Creates an instance of the decoupled editor.\n\t *\n\t * **Note:** Do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * (on which the editor will be initialized) or initial data for the editor. For more information see\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( sourceElementOrData, config ) {\n\t\tsuper( config );\n\n\t\tif ( isElement( sourceElementOrData ) ) {\n\t\t\tthis.sourceElement = sourceElementOrData;\n\t\t\tsecureSourceElement( this );\n\t\t}\n\n\t\tthis.data.processor = new HtmlDataProcessor( this.data.viewDocument );\n\n\t\tthis.model.document.createRoot();\n\n\t\tconst shouldToolbarGroupWhenFull = !this.config.get( 'toolbar.shouldNotGroupWhenFull' );\n\t\tconst view = new DecoupledEditorUIView( this.locale, this.editing.view, {\n\t\t\teditableElement: this.sourceElement,\n\t\t\tshouldToolbarGroupWhenFull\n\t\t} );\n\n\t\tthis.ui = new DecoupledEditorUI( this, view );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note**: The decoupled editor does not remove the toolbar and editable when destroyed. You can\n\t * do that yourself in the destruction chain:\n\t *\n\t *\t\teditor.destroy()\n\t *\t\t\t.then( () => {\n\t *\t\t\t\t// Remove the toolbar from DOM.\n\t *\t\t\t\teditor.ui.view.toolbar.element.remove();\n\t *\n\t *\t\t\t\t// Remove the editable from DOM.\n\t *\t\t\t\teditor.ui.view.editable.element.remove();\n\t *\n\t *\t\t\t\tconsole.log( 'Editor was destroyed' );\n\t *\t\t\t} );\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\t// Cache the data, then destroy.\n\t\t// It's safe to assume that the model->view conversion will not work after super.destroy().\n\t\tconst data = this.getData();\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy()\n\t\t\t.then( () => {\n\t\t\t\tif ( this.sourceElement ) {\n\t\t\t\t\tsetDataInElement( this.sourceElement, data );\n\t\t\t\t}\n\t\t\t} );\n\t}\n\n\t/**\n\t * Creates a new decoupled editor instance.\n\t *\n\t * Remember that `DecoupledEditor` does not append the toolbar element to your web page so you have to do it manually after the editor\n\t * has been initialized.\n\t *\n\t * There are two ways how the editor can be initialized.\n\t *\n\t * # Using an existing DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t *\t\tDecoupledEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Append the toolbar to the <body> element.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * The element's content will be used as the editor data and the element will become the editable element.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, you will have to manually append both the toolbar element and the editable element to your web page.\n\t *\n\t *\t\tDecoupledEditor\n\t *\t\t\t.create( '<p>Hello world!</p>' )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Append the toolbar to the <body> element.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t *\n\t *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.getEditableElement() );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Using an existing DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t *\t\tDecoupledEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Append the toolbar to the <body> element.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * # Using the editor from source\n\t *\n\t * The code samples listed in the previous sections of this documentation assume that you are using an\n\t * {@glink builds/guides/overview editor build} (for example – `@ckeditor/ckeditor5-build-decoupled`).\n\t *\n\t * If you want to use the decoupled editor from source (`@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor`),\n\t * you need to define the list of\n\t * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n\t * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n\t *\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.\n\t * Moreover, the editor data will be set back to the original element once the editor is destroyed.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available via\n\t * {@link module:editor-decoupled/decouplededitorui~DecoupledEditorUI#getEditableElement `editor.ui.getEditableElement()`}.\n\t *\n\t * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */\n\tstatic create( sourceElementOrData, config = {} ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst isHTMLElement = isElement( sourceElementOrData );\n\n\t\t\tif ( isHTMLElement && sourceElementOrData.tagName === 'TEXTAREA' ) {\n\t\t\t\t// Documented in core/editor/editor.js\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'editor-wrong-element: This type of editor cannot be initialized inside <textarea> element.', null );\n\t\t\t}\n\n\t\t\tconst editor = new this( sourceElementOrData, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor.ui.init();\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\tif ( !isHTMLElement && config.initialData ) {\n\t\t\t\t\t\t\t// Documented in core/editor/editorconfig.jdoc.\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'editor-create-initial-data: ' +\n\t\t\t\t\t\t\t\t'The config.initialData option cannot be used together with initial data passed in Editor.create().',\n\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst initialData = config.initialData || getInitialData( sourceElementOrData );\n\n\t\t\t\t\t\treturn editor.data.init( initialData );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( DecoupledEditor, DataApiMixin );\n\nfunction getInitialData( sourceElementOrData ) {\n\treturn isElement( sourceElementOrData ) ? getDataFromElement( sourceElementOrData ) : sourceElementOrData;\n}\n"]}]}