{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\conversion\\downcastdispatcher.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\conversion\\downcastdispatcher.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIwLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcgogKi8KaW1wb3J0IENvbnN1bWFibGUgZnJvbSAnLi9tb2RlbGNvbnN1bWFibGUnOwppbXBvcnQgUmFuZ2UgZnJvbSAnLi4vbW9kZWwvcmFuZ2UnOwppbXBvcnQgRW1pdHRlck1peGluIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2VtaXR0ZXJtaXhpbic7CmltcG9ydCBtaXggZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvbWl4JzsKaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnbG9kYXNoLWVzJzsKLyoqCiAqIGBEb3duY2FzdERpc3BhdGNoZXJgIGlzIGEgY2VudHJhbCBwb2ludCBvZiBkb3duY2FzdGluZyAoY29udmVyc2lvbiBmcm9tIG1vZGVsIHRvIHZpZXcpLCB3aGljaCBpcyBhIHByb2Nlc3Mgb2YgcmVhY3RpbmcgdG8gY2hhbmdlcwogKiBpbiB0aGUgbW9kZWwgYW5kIGZpcmluZyBhIHNldCBvZiBldmVudHMuIENhbGxiYWNrcyBsaXN0ZW5pbmcgdG8gdGhvc2UgZXZlbnRzIGFyZSBjYWxsZWQgY29udmVydGVycy4gVGhvc2UKICogY29udmVydGVycyByb2xlIGlzIHRvIGNvbnZlcnQgdGhlIG1vZGVsIGNoYW5nZXMgdG8gY2hhbmdlcyBpbiB2aWV3IChmb3IgZXhhbXBsZSwgYWRkaW5nIHZpZXcgbm9kZXMgb3IKICogY2hhbmdpbmcgYXR0cmlidXRlcyBvbiB2aWV3IGVsZW1lbnRzKS4KICoKICogRHVyaW5nIGNvbnZlcnNpb24gcHJvY2VzcywgYERvd25jYXN0RGlzcGF0Y2hlcmAgZmlyZXMgZXZlbnRzLCBiYXNpbmcgb24gc3RhdGUgb2YgdGhlIG1vZGVsIGFuZCBwcmVwYXJlcwogKiBkYXRhIGZvciB0aG9zZSBldmVudHMuIEl0IGlzIGltcG9ydGFudCB0byB1bmRlcnN0YW5kIHRoYXQgdGhvc2UgZXZlbnRzIGFyZSBjb25uZWN0ZWQgd2l0aCBjaGFuZ2VzIGRvbmUgb24gbW9kZWwsCiAqIGZvciBleGFtcGxlOiAibm9kZSBoYXMgYmVlbiBpbnNlcnRlZCIgb3IgImF0dHJpYnV0ZSBoYXMgY2hhbmdlZCIuIFRoaXMgaXMgaW4gYSBjb250cmFyeSB0byB1cGNhc3RpbmcgKHZpZXcgdG8gbW9kZWwgY29udmVyc2lvbiksCiAqIHdoZXJlIHdlIGNvbnZlcnQgdmlldyBzdGF0ZSAodmlldyBub2RlcykgdG8gYSBtb2RlbCB0cmVlLgogKgogKiBUaGUgZXZlbnRzIGFyZSBwcmVwYXJlZCBiYXNpbmcgb24gYSBkaWZmIGNyZWF0ZWQgYnkge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZGlmZmVyfkRpZmZlciBEaWZmZXJ9LCB3aGljaCBidWZmZXJzIHRoZW0KICogYW5kIHRoZW4gcGFzc2VzIHRvIGBEb3duY2FzdERpc3BhdGNoZXJgIGFzIGEgZGlmZiBiZXR3ZWVuIG9sZCBtb2RlbCBzdGF0ZSBhbmQgbmV3IG1vZGVsIHN0YXRlLgogKgogKiBOb3RlLCB0aGF0IGJlY2F1c2UgY2hhbmdlcyBhcmUgY29udmVydGVkIHRoZXJlIGlzIGEgbmVlZCB0byBoYXZlIGEgbWFwcGluZyBiZXR3ZWVuIG1vZGVsIHN0cnVjdHVyZSBhbmQgdmlldyBzdHJ1Y3R1cmUuCiAqIFRvIG1hcCBwb3NpdGlvbnMgYW5kIGVsZW1lbnRzIGR1cmluZyBkb3duY2FzdCAobW9kZWwgdG8gdmlldyBjb252ZXJzaW9uKSB1c2Uge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tYXBwZXJ+TWFwcGVyfS4KICoKICogYERvd25jYXN0RGlzcGF0Y2hlcmAgZmlyZXMgZm9sbG93aW5nIGV2ZW50cyBmb3IgbW9kZWwgdHJlZSBjaGFuZ2VzOgogKgogKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0RGlzcGF0Y2hlciNldmVudDppbnNlcnQgaW5zZXJ0fQogKiBpZiBhIHJhbmdlIG9mIG5vZGVzIGhhcyBiZWVuIGluc2VydGVkIHRvIHRoZSBtb2RlbCB0cmVlLAogKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0RGlzcGF0Y2hlciNldmVudDpyZW1vdmUgcmVtb3ZlfQogKiBpZiBhIHJhbmdlIG9mIG5vZGVzIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgbW9kZWwgdHJlZSwKICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6YXR0cmlidXRlIGF0dHJpYnV0ZX0KICogaWYgYXR0cmlidXRlIGhhcyBiZWVuIGFkZGVkLCBjaGFuZ2VkIG9yIHJlbW92ZWQgZnJvbSBhIG1vZGVsIG5vZGUuCiAqCiAqIEZvciB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6aW5zZXJ0IGluc2VydH0KICogYW5kIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0RGlzcGF0Y2hlciNldmVudDphdHRyaWJ1dGUgYXR0cmlidXRlfSwKICogYERvd25jYXN0RGlzcGF0Y2hlcmAgZ2VuZXJhdGVzIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbW9kZWxjb25zdW1hYmxlfk1vZGVsQ29uc3VtYWJsZSBjb25zdW1hYmxlc30uCiAqIFRoZXNlIGFyZSB1c2VkIHRvIGhhdmUgYSBjb250cm9sIG92ZXIgd2hpY2ggY2hhbmdlcyBoYXMgYmVlbiBhbHJlYWR5IGNvbnN1bWVkLiBJdCBpcyB1c2VmdWwgd2hlbiBzb21lIGNvbnZlcnRlcnMKICogb3ZlcndyaXRlIG90aGVyIG9yIGNvbnZlcnRzIG11bHRpcGxlIGNoYW5nZXMgKGZvciBleGFtcGxlIGNvbnZlcnRzIGluc2VydGlvbiBvZiBhbiBlbGVtZW50IGFuZCBhbHNvIGNvbnZlcnRzIHRoYXQKICogZWxlbWVudCdzIGF0dHJpYnV0ZXMgZHVyaW5nIGluc2VydGlvbikuCiAqCiAqIEFkZGl0aW9uYWxseSwgYERvd25jYXN0RGlzcGF0Y2hlcmAgZmlyZXMgZXZlbnRzIGZvciB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9tYXJrZXJjb2xsZWN0aW9ufk1hcmtlciBtYXJrZXJ9IGNoYW5nZXM6CiAqCiAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3REaXNwYXRjaGVyI2V2ZW50OmFkZE1hcmtlcn0gaWYgYSBtYXJrZXIgaGFzIGJlZW4gYWRkZWQsCiAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3REaXNwYXRjaGVyI2V2ZW50OnJlbW92ZU1hcmtlcn0gaWYgYSBtYXJrZXIgaGFzIGJlZW4gcmVtb3ZlZC4KICoKICogTm90ZSwgdGhhdCBjaGFuZ2luZyBhIG1hcmtlciBpcyBkb25lIHRocm91Z2ggcmVtb3ZpbmcgdGhlIG1hcmtlciBmcm9tIHRoZSBvbGQgcmFuZ2UsIGFuZCBhZGRpbmcgb24gdGhlIG5ldyByYW5nZSwKICogc28gYm90aCB0aG9zZSBldmVudHMgYXJlIGZpcmVkLgogKgogKiBGaW5hbGx5LCBgRG93bmNhc3REaXNwYXRjaGVyYCBhbHNvIGhhbmRsZXMgZmlyaW5nIGV2ZW50cyBmb3Ige0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uIG1vZGVsIHNlbGVjdGlvbn0KICogY29udmVyc2lvbjoKICoKICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIjZXZlbnQ6c2VsZWN0aW9ufQogKiB3aGljaCBjb252ZXJ0cyBzZWxlY3Rpb24gZnJvbSBtb2RlbCB0byB2aWV3LAogKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0RGlzcGF0Y2hlciNldmVudDphdHRyaWJ1dGV9CiAqIHdoaWNoIGlzIGZpcmVkIGZvciBldmVyeSBzZWxlY3Rpb24gYXR0cmlidXRlLAogKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0RGlzcGF0Y2hlciNldmVudDphZGRNYXJrZXJ9CiAqIHdoaWNoIGlzIGZpcmVkIGZvciBldmVyeSBtYXJrZXIgd2hpY2ggY29udGFpbnMgc2VsZWN0aW9uLgogKgogKiBVbmxpa2UgbW9kZWwgdHJlZSBhbmQgbWFya2VycywgZXZlbnRzIGZvciBzZWxlY3Rpb24gYXJlIG5vdCBmaXJlZCBmb3IgY2hhbmdlcyBidXQgZm9yIHNlbGVjdGlvbiBzdGF0ZS4KICoKICogV2hlbiBwcm92aWRpbmcgY3VzdG9tIGxpc3RlbmVycyBmb3IgYERvd25jYXN0RGlzcGF0Y2hlcmAgcmVtZW1iZXIgdG8gY2hlY2sgd2hldGhlciBnaXZlbiBjaGFuZ2UgaGFzIG5vdCBiZWVuCiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbW9kZWxjb25zdW1hYmxlfk1vZGVsQ29uc3VtYWJsZSNjb25zdW1lIGNvbnN1bWVkfSB5ZXQuCiAqCiAqIFdoZW4gcHJvdmlkaW5nIGN1c3RvbSBsaXN0ZW5lcnMgZm9yIGBEb3duY2FzdERpc3BhdGNoZXJgIGtlZXAgaW4gbWluZCB0aGF0IGFueSBjYWxsYmFjayB0aGF0IGhhZAogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGUjY29uc3VtZSBjb25zdW1lZH0gYSB2YWx1ZSBmcm9tIGEgY29uc3VtYWJsZSBhbmQKICogY29udmVydGVkIHRoZSBjaGFuZ2Ugc2hvdWxkIGFsc28gc3RvcCB0aGUgZXZlbnQgKGZvciBlZmZpY2llbmN5IHB1cnBvc2VzKS4KICoKICogV2hlbiBwcm92aWRpbmcgY3VzdG9tIGxpc3RlbmVycyBmb3IgYERvd25jYXN0RGlzcGF0Y2hlcmAgcmVtZW1iZXIgdG8gdXNlIHByb3ZpZGVkCiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXIgdmlldyBkb3duY2FzdCB3cml0ZXJ9IHRvIGFwcGx5IGNoYW5nZXMgdG8gdGhlIHZpZXcgZG9jdW1lbnQuCiAqCiAqIEV4YW1wbGUgb2YgYSBjdXN0b20gY29udmVydGVyIGZvciBgRG93bmNhc3REaXNwYXRjaGVyYDoKICoKICoJCS8vIFdlIHdpbGwgY29udmVydCBpbnNlcnRpbmcgInBhcmFncmFwaCIgbW9kZWwgZWxlbWVudCBpbnRvIHRoZSBtb2RlbC4KICoJCWRvd25jYXN0RGlzcGF0Y2hlci5vbiggJ2luc2VydDpwYXJhZ3JhcGgnLCAoIGV2dCwgZGF0YSwgY29udmVyc2lvbkFwaSApID0+IHsKICoJCQkvLyBSZW1lbWJlciB0byBjaGVjayB3aGV0aGVyIHRoZSBjaGFuZ2UgaGFzIG5vdCBiZWVuIGNvbnN1bWVkIHlldCBhbmQgY29uc3VtZSBpdC4KICoJCQlpZiAoIGNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS5jb25zdW1lKCBkYXRhLml0ZW0sICdpbnNlcnQnICkgKSB7CiAqCQkJCXJldHVybjsKICoJCQl9CiAqCiAqCQkJLy8gVHJhbnNsYXRlIHBvc2l0aW9uIGluIG1vZGVsIHRvIHBvc2l0aW9uIGluIHZpZXcuCiAqCQkJY29uc3Qgdmlld1Bvc2l0aW9uID0gY29udmVyc2lvbkFwaS5tYXBwZXIudG9WaWV3UG9zaXRpb24oIGRhdGEucmFuZ2Uuc3RhcnQgKTsKICoKICoJCQkvLyBDcmVhdGUgPHA+IGVsZW1lbnQgdGhhdCB3aWxsIGJlIGluc2VydGVkIGluIHZpZXcgYXQgYHZpZXdQb3NpdGlvbmAuCiAqCQkJY29uc3Qgdmlld0VsZW1lbnQgPSBjb252ZXJzaW9uQXBpLndyaXRlci5jcmVhdGVDb250YWluZXJFbGVtZW50KCAncCcgKTsKICoKICoJCQkvLyBCaW5kIHRoZSBuZXdseSBjcmVhdGVkIHZpZXcgZWxlbWVudCB0byBtb2RlbCBlbGVtZW50IHNvIHBvc2l0aW9ucyB3aWxsIG1hcCBhY2NvcmRpbmdseSBpbiBmdXR1cmUuCiAqCQkJY29udmVyc2lvbkFwaS5tYXBwZXIuYmluZEVsZW1lbnRzKCBkYXRhLml0ZW0sIHZpZXdFbGVtZW50ICk7CiAqCiAqCQkJLy8gQWRkIHRoZSBuZXdseSBjcmVhdGVkIHZpZXcgZWxlbWVudCB0byB0aGUgdmlldy4KICoJCQljb252ZXJzaW9uQXBpLndyaXRlci5pbnNlcnQoIHZpZXdQb3NpdGlvbiwgdmlld0VsZW1lbnQgKTsKICoKICoJCQkvLyBSZW1lbWJlciB0byBzdG9wIHRoZSBldmVudCBwcm9wYWdhdGlvbi4KICoJCQlldnQuc3RvcCgpOwogKgkJfSApOwogKi8KCnZhciBEb3duY2FzdERpc3BhdGNoZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICAvKioKICAgKiBDcmVhdGVzIGEgYERvd25jYXN0RGlzcGF0Y2hlcmAgaW5zdGFuY2UuCiAgICoKICAgKiBAc2VlIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3RDb252ZXJzaW9uQXBpCiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnZlcnNpb25BcGkgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIGZvciBpbnRlcmZhY2UgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byBldmVudHMgZmlyZWQKICAgKiBieSBgRG93bmNhc3REaXNwYXRjaGVyYC4KICAgKi8KICBmdW5jdGlvbiBEb3duY2FzdERpc3BhdGNoZXIoY29udmVyc2lvbkFwaSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvd25jYXN0RGlzcGF0Y2hlcik7CgogICAgLyoqCiAgICAgKiBJbnRlcmZhY2UgcGFzc2VkIGJ5IGRpc3BhdGNoZXIgdG8gdGhlIGV2ZW50cyBjYWxsYmFja3MuCiAgICAgKgogICAgICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdENvbnZlcnNpb25BcGl9CiAgICAgKi8KICAgIHRoaXMuY29udmVyc2lvbkFwaSA9IGV4dGVuZCh7CiAgICAgIGRpc3BhdGNoZXI6IHRoaXMKICAgIH0sIGNvbnZlcnNpb25BcGkpOwogIH0KICAvKioKICAgKiBUYWtlcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kaWZmZXJ+RGlmZmVyIG1vZGVsIGRpZmZlcn0gb2JqZWN0IHdpdGggYnVmZmVyZWQgY2hhbmdlcyBhbmQgZmlyZXMgY29udmVyc2lvbiBiYXNpbmcgb24gaXQuCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvZGlmZmVyfkRpZmZlcn0gZGlmZmVyIERpZmZlciBvYmplY3Qgd2l0aCBidWZmZXJlZCBjaGFuZ2VzLgogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9tYXJrZXJjb2xsZWN0aW9ufk1hcmtlckNvbGxlY3Rpb259IG1hcmtlcnMgTWFya2VycyBjb25uZWN0ZWQgd2l0aCBjb252ZXJ0ZWQgbW9kZWwuCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlciBWaWV3IHdyaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIG1vZGlmeSB2aWV3IGRvY3VtZW50LgogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKERvd25jYXN0RGlzcGF0Y2hlciwgW3sKICAgIGtleTogImNvbnZlcnRDaGFuZ2VzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0Q2hhbmdlcyhkaWZmZXIsIG1hcmtlcnMsIHdyaXRlcikgewogICAgICAvLyBCZWZvcmUgdGhlIHZpZXcgaXMgdXBkYXRlZCwgcmVtb3ZlIG1hcmtlcnMgd2hpY2ggaGF2ZSBjaGFuZ2VkLgogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGRpZmZlci5nZXRNYXJrZXJzVG9SZW1vdmUoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHsKICAgICAgICAgIHZhciBjaGFuZ2UgPSBfc3RlcC52YWx1ZTsKICAgICAgICAgIHRoaXMuY29udmVydE1hcmtlclJlbW92ZShjaGFuZ2UubmFtZSwgY2hhbmdlLnJhbmdlLCB3cml0ZXIpOwogICAgICAgIH0gLy8gQ29udmVydCBjaGFuZ2VzIHRoYXQgaGFwcGVuZWQgb24gbW9kZWwgdHJlZS4KCiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0cnkgewogICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IGRpZmZlci5nZXRDaGFuZ2VzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHsKICAgICAgICAgIHZhciBlbnRyeSA9IF9zdGVwMi52YWx1ZTsKCiAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PSAnaW5zZXJ0JykgewogICAgICAgICAgICB0aGlzLmNvbnZlcnRJbnNlcnQoUmFuZ2UuX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KGVudHJ5LnBvc2l0aW9uLCBlbnRyeS5sZW5ndGgpLCB3cml0ZXIpOwogICAgICAgICAgfSBlbHNlIGlmIChlbnRyeS50eXBlID09ICdyZW1vdmUnKSB7CiAgICAgICAgICAgIHRoaXMuY29udmVydFJlbW92ZShlbnRyeS5wb3NpdGlvbiwgZW50cnkubGVuZ3RoLCBlbnRyeS5uYW1lLCB3cml0ZXIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gZW50cnkudHlwZSA9PSAnYXR0cmlidXRlJy4KICAgICAgICAgICAgdGhpcy5jb252ZXJ0QXR0cmlidXRlKGVudHJ5LnJhbmdlLCBlbnRyeS5hdHRyaWJ1dGVLZXksIGVudHJ5LmF0dHJpYnV0ZU9sZFZhbHVlLCBlbnRyeS5hdHRyaWJ1dGVOZXdWYWx1ZSwgd3JpdGVyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSB0aGlzLmNvbnZlcnNpb25BcGkubWFwcGVyLmZsdXNoVW5ib3VuZE1hcmtlck5hbWVzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHsKICAgICAgICAgIHZhciBtYXJrZXJOYW1lID0gX3N0ZXAzLnZhbHVlOwogICAgICAgICAgdmFyIG1hcmtlclJhbmdlID0gbWFya2Vycy5nZXQobWFya2VyTmFtZSkuZ2V0UmFuZ2UoKTsKICAgICAgICAgIHRoaXMuY29udmVydE1hcmtlclJlbW92ZShtYXJrZXJOYW1lLCBtYXJrZXJSYW5nZSwgd3JpdGVyKTsKICAgICAgICAgIHRoaXMuY29udmVydE1hcmtlckFkZChtYXJrZXJOYW1lLCBtYXJrZXJSYW5nZSwgd3JpdGVyKTsKICAgICAgICB9IC8vIEFmdGVyIHRoZSB2aWV3IGlzIHVwZGF0ZWQsIGNvbnZlcnQgbWFya2VycyB3aGljaCBoYXZlIGNoYW5nZWQuCgogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlOwogICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0cnkgewogICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHsKICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTsKICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gZGlmZmVyLmdldE1hcmtlcnNUb0FkZCgpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7CiAgICAgICAgICB2YXIgX2NoYW5nZSA9IF9zdGVwNC52YWx1ZTsKICAgICAgICAgIHRoaXMuY29udmVydE1hcmtlckFkZChfY2hhbmdlLm5hbWUsIF9jaGFuZ2UucmFuZ2UsIHdyaXRlcik7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjQgPSB0cnVlOwogICAgICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0cnkgewogICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHsKICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBTdGFydHMgY29udmVyc2lvbiBvZiBhIHJhbmdlIGluc2VydGlvbi4KICAgICAqCiAgICAgKiBGb3IgZWFjaCBub2RlIGluIHRoZSByYW5nZSwge0BsaW5rICNldmVudDppbnNlcnQgaW5zZXJ0IGV2ZW50IGlzIGZpcmVkfS4gRm9yIGVhY2ggYXR0cmlidXRlIG9uIGVhY2ggbm9kZSwKICAgICAqIHtAbGluayAjZXZlbnQ6YXR0cmlidXRlIGF0dHJpYnV0ZSBldmVudCBpcyBmaXJlZH0uCiAgICAgKgogICAgICogQGZpcmVzIGluc2VydAogICAgICogQGZpcmVzIGF0dHJpYnV0ZQogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSByYW5nZSBJbnNlcnRlZCByYW5nZS4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSB3cml0ZXIgVmlldyB3cml0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBtb2RpZnkgdmlldyBkb2N1bWVudC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0SW5zZXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0SW5zZXJ0KHJhbmdlLCB3cml0ZXIpIHsKICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLndyaXRlciA9IHdyaXRlcjsgLy8gQ3JlYXRlIGEgbGlzdCBvZiB0aGluZ3MgdGhhdCBjYW4gYmUgY29uc3VtZWQsIGNvbnNpc3Rpbmcgb2Ygbm9kZXMgYW5kIHRoZWlyIGF0dHJpYnV0ZXMuCgogICAgICB0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZSA9IHRoaXMuX2NyZWF0ZUluc2VydENvbnN1bWFibGUocmFuZ2UpOyAvLyBGaXJlIGEgc2VwYXJhdGUgaW5zZXJ0IGV2ZW50IGZvciBlYWNoIG5vZGUgYW5kIHRleHQgZnJhZ21lbnQgY29udGFpbmVkIGluIHRoZSByYW5nZS4KCiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjUgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yNSA9IHVuZGVmaW5lZDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IHJhbmdlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDUudmFsdWU7CiAgICAgICAgICB2YXIgaXRlbSA9IHZhbHVlLml0ZW07CgogICAgICAgICAgdmFyIGl0ZW1SYW5nZSA9IFJhbmdlLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdCh2YWx1ZS5wcmV2aW91c1Bvc2l0aW9uLCB2YWx1ZS5sZW5ndGgpOwoKICAgICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgICBpdGVtOiBpdGVtLAogICAgICAgICAgICByYW5nZTogaXRlbVJhbmdlCiAgICAgICAgICB9OwoKICAgICAgICAgIHRoaXMuX3Rlc3RBbmRGaXJlKCdpbnNlcnQnLCBkYXRhKTsgLy8gRmlyZSBhIHNlcGFyYXRlIGFkZEF0dHJpYnV0ZSBldmVudCBmb3IgZWFjaCBhdHRyaWJ1dGUgdGhhdCB3YXMgc2V0IG9uIGluc2VydGVkIGl0ZW1zLgogICAgICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSBtb3N0IGF0dHJpYnV0ZXMgY29udmVydGVycyB3aWxsIGxpc3RlbiBvbmx5IHRvIGFkZC9jaGFuZ2UvcmVtb3ZlQXR0cmlidXRlIGV2ZW50cy4KICAgICAgICAgIC8vIElmIHdlIHdvdWxkIG5vdCBhZGQgdGhpcyBwYXJ0LCBhdHRyaWJ1dGVzIG9uIGluc2VydGVkIG5vZGVzIHdvdWxkIG5vdCBiZSBjb252ZXJ0ZWQuCgoKICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWU7CiAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gZmFsc2U7CiAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I2ID0gdW5kZWZpbmVkOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjYgPSBpdGVtLmdldEF0dHJpYnV0ZUtleXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IChfc3RlcDYgPSBfaXRlcmF0b3I2Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gdHJ1ZSkgewogICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDYudmFsdWU7CiAgICAgICAgICAgICAgZGF0YS5hdHRyaWJ1dGVLZXkgPSBrZXk7CiAgICAgICAgICAgICAgZGF0YS5hdHRyaWJ1dGVPbGRWYWx1ZSA9IG51bGw7CiAgICAgICAgICAgICAgZGF0YS5hdHRyaWJ1dGVOZXdWYWx1ZSA9IGl0ZW0uZ2V0QXR0cmlidXRlKGtleSk7CgogICAgICAgICAgICAgIHRoaXMuX3Rlc3RBbmRGaXJlKCJhdHRyaWJ1dGU6Ii5jb25jYXQoa2V5KSwgZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjYgPSB0cnVlOwogICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjYgPSBlcnI7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgJiYgX2l0ZXJhdG9yNi5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yNi5yZXR1cm4oKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNikgewogICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I2OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I1ID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvcjUgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgJiYgX2l0ZXJhdG9yNS5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3I1LnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I1KSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpOwogICAgfQogICAgLyoqCiAgICAgKiBGaXJlcyBjb252ZXJzaW9uIG9mIGEgc2luZ2xlIG5vZGUgcmVtb3ZhbC4gRmlyZXMge0BsaW5rICNldmVudDpyZW1vdmUgcmVtb3ZlIGV2ZW50fSB3aXRoIHByb3ZpZGVkIGRhdGEuCiAgICAgKgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufSBwb3NpdGlvbiBQb3NpdGlvbiBmcm9tIHdoaWNoIG5vZGUgd2FzIHJlbW92ZWQuCiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIE9mZnNldCBzaXplIG9mIHJlbW92ZWQgbm9kZS4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgcmVtb3ZlZCBub2RlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlciBWaWV3IHdyaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIG1vZGlmeSB2aWV3IGRvY3VtZW50LgogICAgICovCgogIH0sIHsKICAgIGtleTogImNvbnZlcnRSZW1vdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRSZW1vdmUocG9zaXRpb24sIGxlbmd0aCwgbmFtZSwgd3JpdGVyKSB7CiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS53cml0ZXIgPSB3cml0ZXI7CiAgICAgIHRoaXMuZmlyZSgncmVtb3ZlOicgKyBuYW1lLCB7CiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLAogICAgICAgIGxlbmd0aDogbGVuZ3RoCiAgICAgIH0sIHRoaXMuY29udmVyc2lvbkFwaSk7CgogICAgICB0aGlzLl9jbGVhckNvbnZlcnNpb25BcGkoKTsKICAgIH0KICAgIC8qKgogICAgICogU3RhcnRzIGNvbnZlcnNpb24gb2YgYXR0cmlidXRlIGNoYW5nZSBvbiBnaXZlbiBgcmFuZ2VgLgogICAgICoKICAgICAqIEZvciBlYWNoIG5vZGUgaW4gdGhlIGdpdmVuIGByYW5nZWAsIHtAbGluayAjZXZlbnQ6YXR0cmlidXRlIGF0dHJpYnV0ZSBldmVudH0gaXMgZmlyZWQgd2l0aCB0aGUgcGFzc2VkIGRhdGEuCiAgICAgKgogICAgICogQGZpcmVzIGF0dHJpYnV0ZQogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSByYW5nZSBDaGFuZ2VkIHJhbmdlLgogICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBLZXkgb2YgdGhlIGF0dHJpYnV0ZSB0aGF0IGhhcyBjaGFuZ2VkLgogICAgICogQHBhcmFtIHsqfSBvbGRWYWx1ZSBBdHRyaWJ1dGUgdmFsdWUgYmVmb3JlIHRoZSBjaGFuZ2Ugb3IgYG51bGxgIGlmIHRoZSBhdHRyaWJ1dGUgaGFzIG5vdCBiZWVuIHNldCBiZWZvcmUuCiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbHVlIE5ldyBhdHRyaWJ1dGUgdmFsdWUgb3IgYG51bGxgIGlmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSB3cml0ZXIgVmlldyB3cml0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBtb2RpZnkgdmlldyBkb2N1bWVudC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0QXR0cmlidXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0QXR0cmlidXRlKHJhbmdlLCBrZXksIG9sZFZhbHVlLCBuZXdWYWx1ZSwgd3JpdGVyKSB7CiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS53cml0ZXIgPSB3cml0ZXI7IC8vIENyZWF0ZSBhIGxpc3Qgd2l0aCBhdHRyaWJ1dGVzIHRvIGNvbnN1bWUuCgogICAgICB0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZSA9IHRoaXMuX2NyZWF0ZUNvbnN1bWFibGVGb3JSYW5nZShyYW5nZSwgImF0dHJpYnV0ZToiLmNvbmNhdChrZXkpKTsgLy8gQ3JlYXRlIGEgc2VwYXJhdGUgYXR0cmlidXRlIGV2ZW50IGZvciBlYWNoIG5vZGUgaW4gdGhlIHJhbmdlLgoKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ID0gdHJ1ZTsKICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNyA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I3ID0gdW5kZWZpbmVkOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I3ID0gcmFuZ2VbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDc7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSAoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IHRydWUpIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IF9zdGVwNy52YWx1ZTsKICAgICAgICAgIHZhciBpdGVtID0gdmFsdWUuaXRlbTsKCiAgICAgICAgICB2YXIgaXRlbVJhbmdlID0gUmFuZ2UuX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KHZhbHVlLnByZXZpb3VzUG9zaXRpb24sIHZhbHVlLmxlbmd0aCk7CgogICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgIGl0ZW06IGl0ZW0sCiAgICAgICAgICAgIHJhbmdlOiBpdGVtUmFuZ2UsCiAgICAgICAgICAgIGF0dHJpYnV0ZUtleToga2V5LAogICAgICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogb2xkVmFsdWUsCiAgICAgICAgICAgIGF0dHJpYnV0ZU5ld1ZhbHVlOiBuZXdWYWx1ZQogICAgICAgICAgfTsKCiAgICAgICAgICB0aGlzLl90ZXN0QW5kRmlyZSgiYXR0cmlidXRlOiIuY29uY2F0KGtleSksIGRhdGEpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I3ID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvcjcgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgJiYgX2l0ZXJhdG9yNy5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3I3LnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I3KSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpOwogICAgfQogICAgLyoqCiAgICAgKiBTdGFydHMgbW9kZWwgc2VsZWN0aW9uIGNvbnZlcnNpb24uCiAgICAgKgogICAgICogRmlyZXMgZXZlbnRzIGZvciBnaXZlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9zZWxlY3Rpb25+U2VsZWN0aW9uIHNlbGVjdGlvbn0gdG8gc3RhcnQgc2VsZWN0aW9uIGNvbnZlcnNpb24uCiAgICAgKgogICAgICogQGZpcmVzIHNlbGVjdGlvbgogICAgICogQGZpcmVzIGFkZE1hcmtlcgogICAgICogQGZpcmVzIGF0dHJpYnV0ZQogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb259IHNlbGVjdGlvbiBTZWxlY3Rpb24gdG8gY29udmVydC4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9tYXJrZXJjb2xsZWN0aW9ufk1hcmtlckNvbGxlY3Rpb259IG1hcmtlcnMgTWFya2VycyBjb25uZWN0ZWQgd2l0aCBjb252ZXJ0ZWQgbW9kZWwuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0gd3JpdGVyIFZpZXcgd3JpdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gbW9kaWZ5IHZpZXcgZG9jdW1lbnQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY29udmVydFNlbGVjdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFNlbGVjdGlvbihzZWxlY3Rpb24sIG1hcmtlcnMsIHdyaXRlcikgewogICAgICB2YXIgbWFya2Vyc0F0U2VsZWN0aW9uID0gQXJyYXkuZnJvbShtYXJrZXJzLmdldE1hcmtlcnNBdFBvc2l0aW9uKHNlbGVjdGlvbi5nZXRGaXJzdFBvc2l0aW9uKCkpKTsKICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLndyaXRlciA9IHdyaXRlcjsKICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUgPSB0aGlzLl9jcmVhdGVTZWxlY3Rpb25Db25zdW1hYmxlKHNlbGVjdGlvbiwgbWFya2Vyc0F0U2VsZWN0aW9uKTsKICAgICAgdGhpcy5maXJlKCdzZWxlY3Rpb24nLCB7CiAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24KICAgICAgfSwgdGhpcy5jb252ZXJzaW9uQXBpKTsKCiAgICAgIGlmICghc2VsZWN0aW9uLmlzQ29sbGFwc2VkKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBmb3IgKHZhciBfaSA9IDAsIF9tYXJrZXJzQXRTZWxlY3Rpb24gPSBtYXJrZXJzQXRTZWxlY3Rpb247IF9pIDwgX21hcmtlcnNBdFNlbGVjdGlvbi5sZW5ndGg7IF9pKyspIHsKICAgICAgICB2YXIgbWFya2VyID0gX21hcmtlcnNBdFNlbGVjdGlvbltfaV07CiAgICAgICAgdmFyIG1hcmtlclJhbmdlID0gbWFya2VyLmdldFJhbmdlKCk7CgogICAgICAgIGlmICghc2hvdWxkTWFya2VyQ2hhbmdlQmVDb252ZXJ0ZWQoc2VsZWN0aW9uLmdldEZpcnN0UG9zaXRpb24oKSwgbWFya2VyLCB0aGlzLmNvbnZlcnNpb25BcGkubWFwcGVyKSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgIGl0ZW06IHNlbGVjdGlvbiwKICAgICAgICAgIG1hcmtlck5hbWU6IG1hcmtlci5uYW1lLAogICAgICAgICAgbWFya2VyUmFuZ2U6IG1hcmtlclJhbmdlCiAgICAgICAgfTsKCiAgICAgICAgaWYgKHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlLnRlc3Qoc2VsZWN0aW9uLCAnYWRkTWFya2VyOicgKyBtYXJrZXIubmFtZSkpIHsKICAgICAgICAgIHRoaXMuZmlyZSgnYWRkTWFya2VyOicgKyBtYXJrZXIubmFtZSwgZGF0YSwgdGhpcy5jb252ZXJzaW9uQXBpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOCA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjggPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yOCA9IHVuZGVmaW5lZDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yOCA9IHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVLZXlzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDg7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSAoX3N0ZXA4ID0gX2l0ZXJhdG9yOC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOCA9IHRydWUpIHsKICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDgudmFsdWU7CiAgICAgICAgICB2YXIgX2RhdGEgPSB7CiAgICAgICAgICAgIGl0ZW06IHNlbGVjdGlvbiwKICAgICAgICAgICAgcmFuZ2U6IHNlbGVjdGlvbi5nZXRGaXJzdFJhbmdlKCksCiAgICAgICAgICAgIGF0dHJpYnV0ZUtleToga2V5LAogICAgICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogbnVsbCwKICAgICAgICAgICAgYXR0cmlidXRlTmV3VmFsdWU6IHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGUoa2V5KQogICAgICAgICAgfTsgLy8gRG8gbm90IGZpcmUgZXZlbnQgaWYgdGhlIGF0dHJpYnV0ZSBoYXMgYmVlbiBjb25zdW1lZC4KCiAgICAgICAgICBpZiAodGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUudGVzdChzZWxlY3Rpb24sICdhdHRyaWJ1dGU6JyArIF9kYXRhLmF0dHJpYnV0ZUtleSkpIHsKICAgICAgICAgICAgdGhpcy5maXJlKCdhdHRyaWJ1dGU6JyArIF9kYXRhLmF0dHJpYnV0ZUtleSArICc6JHRleHQnLCBfZGF0YSwgdGhpcy5jb252ZXJzaW9uQXBpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yOCA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3I4ID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb244ICYmIF9pdGVyYXRvcjgucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yOC5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yOCkgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB0aGlzLl9jbGVhckNvbnZlcnNpb25BcGkoKTsKICAgIH0KICAgIC8qKgogICAgICogQ29udmVydHMgYWRkZWQgbWFya2VyLiBGaXJlcyB7QGxpbmsgI2V2ZW50OmFkZE1hcmtlciBhZGRNYXJrZXJ9IGV2ZW50IGZvciBlYWNoIGl0ZW0KICAgICAqIGluIG1hcmtlcidzIHJhbmdlLiBJZiByYW5nZSBpcyBjb2xsYXBzZWQgc2luZ2xlIGV2ZW50IGlzIGRpc3BhdGNoZWQuIFNlZSBldmVudCBkZXNjcmlwdGlvbiBmb3IgbW9yZSBkZXRhaWxzLgogICAgICoKICAgICAqIEBmaXJlcyBhZGRNYXJrZXIKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrZXJOYW1lIE1hcmtlciBuYW1lLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBtYXJrZXJSYW5nZSBNYXJrZXIgcmFuZ2UuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0gd3JpdGVyIFZpZXcgd3JpdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gbW9kaWZ5IHZpZXcgZG9jdW1lbnQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY29udmVydE1hcmtlckFkZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydE1hcmtlckFkZChtYXJrZXJOYW1lLCBtYXJrZXJSYW5nZSwgd3JpdGVyKSB7CiAgICAgIC8vIERvIG5vdCBjb252ZXJ0IGlmIHJhbmdlIGlzIGluIGdyYXZleWFyZCBvciBub3QgaW4gdGhlIGRvY3VtZW50IChlLmcuIGluIERvY3VtZW50RnJhZ21lbnQpLgogICAgICBpZiAoIW1hcmtlclJhbmdlLnJvb3QuZG9jdW1lbnQgfHwgbWFya2VyUmFuZ2Uucm9vdC5yb290TmFtZSA9PSAnJGdyYXZleWFyZCcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS53cml0ZXIgPSB3cml0ZXI7IC8vIEluIG1hcmtlcnMnIGNhc2UsIGV2ZW50IG5hbWUgPT0gY29uc3VtYWJsZSBuYW1lLgoKICAgICAgdmFyIGV2ZW50TmFtZSA9ICdhZGRNYXJrZXI6JyArIG1hcmtlck5hbWU7IC8vCiAgICAgIC8vIEZpcnN0LCBmaXJlIGFuIGV2ZW50IGZvciB0aGUgd2hvbGUgbWFya2VyLgogICAgICAvLwoKICAgICAgdmFyIGNvbnN1bWFibGUgPSBuZXcgQ29uc3VtYWJsZSgpOwogICAgICBjb25zdW1hYmxlLmFkZChtYXJrZXJSYW5nZSwgZXZlbnROYW1lKTsKICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUgPSBjb25zdW1hYmxlOwogICAgICB0aGlzLmZpcmUoZXZlbnROYW1lLCB7CiAgICAgICAgbWFya2VyTmFtZTogbWFya2VyTmFtZSwKICAgICAgICBtYXJrZXJSYW5nZTogbWFya2VyUmFuZ2UKICAgICAgfSwgdGhpcy5jb252ZXJzaW9uQXBpKTsgLy8KICAgICAgLy8gRG8gbm90IGZpcmUgZXZlbnRzIGZvciBlYWNoIGl0ZW0gaW5zaWRlIHRoZSByYW5nZSBpZiB0aGUgcmFuZ2UgZ290IGNvbnN1bWVkLgogICAgICAvLwoKICAgICAgaWYgKCFjb25zdW1hYmxlLnRlc3QobWFya2VyUmFuZ2UsIGV2ZW50TmFtZSkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8KICAgICAgLy8gVGhlbiwgZmlyZSBhbiBldmVudCBmb3IgZWFjaCBpdGVtIGluc2lkZSB0aGUgbWFya2VyIHJhbmdlLgogICAgICAvLwoKCiAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gdGhpcy5fY3JlYXRlQ29uc3VtYWJsZUZvclJhbmdlKG1hcmtlclJhbmdlLCBldmVudE5hbWUpOwogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I5ID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjkgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjkgPSBtYXJrZXJSYW5nZS5nZXRJdGVtcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA5OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245ID0gKF9zdGVwOSA9IF9pdGVyYXRvcjkubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgPSB0cnVlKSB7CiAgICAgICAgICB2YXIgaXRlbSA9IF9zdGVwOS52YWx1ZTsKCiAgICAgICAgICAvLyBEbyBub3QgZmlyZSBldmVudCBmb3IgYWxyZWFkeSBjb25zdW1lZCBpdGVtcy4KICAgICAgICAgIGlmICghdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUudGVzdChpdGVtLCBldmVudE5hbWUpKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgICBpdGVtOiBpdGVtLAogICAgICAgICAgICByYW5nZTogUmFuZ2UuX2NyZWF0ZU9uKGl0ZW0pLAogICAgICAgICAgICBtYXJrZXJOYW1lOiBtYXJrZXJOYW1lLAogICAgICAgICAgICBtYXJrZXJSYW5nZTogbWFya2VyUmFuZ2UKICAgICAgICAgIH07CiAgICAgICAgICB0aGlzLmZpcmUoZXZlbnROYW1lLCBkYXRhLCB0aGlzLmNvbnZlcnNpb25BcGkpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I5ID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvcjkgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgJiYgX2l0ZXJhdG9yOS5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3I5LnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I5KSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpOwogICAgfQogICAgLyoqCiAgICAgKiBGaXJlcyBjb252ZXJzaW9uIG9mIG1hcmtlciByZW1vdmFsLiBGaXJlcyB7QGxpbmsgI2V2ZW50OnJlbW92ZU1hcmtlciByZW1vdmVNYXJrZXJ9IGV2ZW50IHdpdGggcHJvdmlkZWQgZGF0YS4KICAgICAqCiAgICAgKiBAZmlyZXMgcmVtb3ZlTWFya2VyCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWFya2VyTmFtZSBNYXJrZXIgbmFtZS4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gbWFya2VyUmFuZ2UgTWFya2VyIHJhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlciBWaWV3IHdyaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIG1vZGlmeSB2aWV3IGRvY3VtZW50LgogICAgICovCgogIH0sIHsKICAgIGtleTogImNvbnZlcnRNYXJrZXJSZW1vdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRNYXJrZXJSZW1vdmUobWFya2VyTmFtZSwgbWFya2VyUmFuZ2UsIHdyaXRlcikgewogICAgICAvLyBEbyBub3QgY29udmVydCBpZiByYW5nZSBpcyBpbiBncmF2ZXlhcmQgb3Igbm90IGluIHRoZSBkb2N1bWVudCAoZS5nLiBpbiBEb2N1bWVudEZyYWdtZW50KS4KICAgICAgaWYgKCFtYXJrZXJSYW5nZS5yb290LmRvY3VtZW50IHx8IG1hcmtlclJhbmdlLnJvb3Qucm9vdE5hbWUgPT0gJyRncmF2ZXlhcmQnKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gd3JpdGVyOwogICAgICB0aGlzLmZpcmUoJ3JlbW92ZU1hcmtlcjonICsgbWFya2VyTmFtZSwgewogICAgICAgIG1hcmtlck5hbWU6IG1hcmtlck5hbWUsCiAgICAgICAgbWFya2VyUmFuZ2U6IG1hcmtlclJhbmdlCiAgICAgIH0sIHRoaXMuY29udmVyc2lvbkFwaSk7CgogICAgICB0aGlzLl9jbGVhckNvbnZlcnNpb25BcGkoKTsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGV9IHdpdGggdmFsdWVzIHRvIGNvbnN1bWUgZnJvbSBnaXZlbiByYW5nZSwKICAgICAqIGFzc3VtaW5nIHRoYXQgdGhlIHJhbmdlIGhhcyBqdXN0IGJlZW4gaW5zZXJ0ZWQgdG8gdGhlIG1vZGVsLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2V9IHJhbmdlIEluc2VydGVkIHJhbmdlLgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tb2RlbGNvbnN1bWFibGV+TW9kZWxDb25zdW1hYmxlfSBWYWx1ZXMgdG8gY29uc3VtZS4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfY3JlYXRlSW5zZXJ0Q29uc3VtYWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUluc2VydENvbnN1bWFibGUocmFuZ2UpIHsKICAgICAgdmFyIGNvbnN1bWFibGUgPSBuZXcgQ29uc3VtYWJsZSgpOwogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEwID0gdHJ1ZTsKICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTAgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTAgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjEwID0gcmFuZ2VbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDEwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IChfc3RlcDEwID0gX2l0ZXJhdG9yMTAubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEwID0gdHJ1ZSkgewogICAgICAgICAgdmFyIHZhbHVlID0gX3N0ZXAxMC52YWx1ZTsKICAgICAgICAgIHZhciBpdGVtID0gdmFsdWUuaXRlbTsKICAgICAgICAgIGNvbnN1bWFibGUuYWRkKGl0ZW0sICdpbnNlcnQnKTsKICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgPSB0cnVlOwogICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTEgPSBmYWxzZTsKICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjExID0gdW5kZWZpbmVkOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjExID0gaXRlbS5nZXRBdHRyaWJ1dGVLZXlzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDExOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMSA9IChfc3RlcDExID0gX2l0ZXJhdG9yMTEubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjExID0gdHJ1ZSkgewogICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDExLnZhbHVlOwogICAgICAgICAgICAgIGNvbnN1bWFibGUuYWRkKGl0ZW0sICdhdHRyaWJ1dGU6JyArIGtleSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjExID0gdHJ1ZTsKICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IxMSA9IGVycjsKICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgJiYgX2l0ZXJhdG9yMTEucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjExLnJldHVybigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMSkgewogICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTAgPSB0cnVlOwogICAgICAgIF9pdGVyYXRvckVycm9yMTAgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEwICYmIF9pdGVyYXRvcjEwLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjEwLnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMCkgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjEwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGNvbnN1bWFibGU7CiAgICB9CiAgICAvKioKICAgICAqIENyZWF0ZXMge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tb2RlbGNvbnN1bWFibGV+TW9kZWxDb25zdW1hYmxlfSB3aXRoIHZhbHVlcyB0byBjb25zdW1lIGZvciBnaXZlbiByYW5nZS4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSByYW5nZSBBZmZlY3RlZCByYW5nZS4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIENvbnN1bWFibGUgdHlwZS4KICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbW9kZWxjb25zdW1hYmxlfk1vZGVsQ29uc3VtYWJsZX0gVmFsdWVzIHRvIGNvbnN1bWUuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2NyZWF0ZUNvbnN1bWFibGVGb3JSYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUNvbnN1bWFibGVGb3JSYW5nZShyYW5nZSwgdHlwZSkgewogICAgICB2YXIgY29uc3VtYWJsZSA9IG5ldyBDb25zdW1hYmxlKCk7CiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IxMiA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IxMiA9IHVuZGVmaW5lZDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMTIgPSByYW5nZS5nZXRJdGVtcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSAoX3N0ZXAxMiA9IF9pdGVyYXRvcjEyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMiA9IHRydWUpIHsKICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAxMi52YWx1ZTsKICAgICAgICAgIGNvbnN1bWFibGUuYWRkKGl0ZW0sIHR5cGUpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxMiA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3IxMiA9IGVycjsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0cnkgewogICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgJiYgX2l0ZXJhdG9yMTIucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yMTIucmV0dXJuKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjEyKSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gY29uc3VtYWJsZTsKICAgIH0KICAgIC8qKgogICAgICogQ3JlYXRlcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGV9IHdpdGggc2VsZWN0aW9uIGNvbnN1bWFibGUgdmFsdWVzLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbn0gc2VsZWN0aW9uIFNlbGVjdGlvbiB0byBjcmVhdGUgY29uc3VtYWJsZSBmcm9tLgogICAgICogQHBhcmFtIHtJdGVyYWJsZS48bW9kdWxlOmVuZ2luZS9tb2RlbC9tYXJrZXJjb2xsZWN0aW9ufk1hcmtlcj59IG1hcmtlcnMgTWFya2VycyB3aGljaCBjb250YWlucyBzZWxlY3Rpb24uCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL21vZGVsY29uc3VtYWJsZX5Nb2RlbENvbnN1bWFibGV9IFZhbHVlcyB0byBjb25zdW1lLgogICAgICovCgogIH0sIHsKICAgIGtleTogIl9jcmVhdGVTZWxlY3Rpb25Db25zdW1hYmxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlU2VsZWN0aW9uQ29uc3VtYWJsZShzZWxlY3Rpb24sIG1hcmtlcnMpIHsKICAgICAgdmFyIGNvbnN1bWFibGUgPSBuZXcgQ29uc3VtYWJsZSgpOwogICAgICBjb25zdW1hYmxlLmFkZChzZWxlY3Rpb24sICdzZWxlY3Rpb24nKTsKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMyA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjEzID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjEzID0gdW5kZWZpbmVkOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxMyA9IG1hcmtlcnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDEzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMyA9IChfc3RlcDEzID0gX2l0ZXJhdG9yMTMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEzID0gdHJ1ZSkgewogICAgICAgICAgdmFyIG1hcmtlciA9IF9zdGVwMTMudmFsdWU7CiAgICAgICAgICBjb25zdW1hYmxlLmFkZChzZWxlY3Rpb24sICdhZGRNYXJrZXI6JyArIG1hcmtlci5uYW1lKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTMgPSB0cnVlOwogICAgICAgIF9pdGVyYXRvckVycm9yMTMgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEzICYmIF9pdGVyYXRvcjEzLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjEzLnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMykgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjEzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNCA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjE0ID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjE0ID0gdW5kZWZpbmVkOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxNCA9IHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVLZXlzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDE0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNCA9IChfc3RlcDE0ID0gX2l0ZXJhdG9yMTQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE0ID0gdHJ1ZSkgewogICAgICAgICAgdmFyIGtleSA9IF9zdGVwMTQudmFsdWU7CiAgICAgICAgICBjb25zdW1hYmxlLmFkZChzZWxlY3Rpb24sICdhdHRyaWJ1dGU6JyArIGtleSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjE0ID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvcjE0ID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNCAmJiBfaXRlcmF0b3IxNC5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3IxNC5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMTQpIHsKICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxNDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBjb25zdW1hYmxlOwogICAgfQogICAgLyoqCiAgICAgKiBUZXN0cyBwYXNzZWQgYGNvbnN1bWFibGVgIHRvIGNoZWNrIHdoZXRoZXIgZ2l2ZW4gZXZlbnQgY2FuIGJlIGZpcmVkIGFuZCBpZiBzbywgZmlyZXMgaXQuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBmaXJlcyBpbnNlcnQKICAgICAqIEBmaXJlcyBhdHRyaWJ1dGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIEV2ZW50IHR5cGUuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBFdmVudCBkYXRhLgogICAgICovCgogIH0sIHsKICAgIGtleTogIl90ZXN0QW5kRmlyZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3Rlc3RBbmRGaXJlKHR5cGUsIGRhdGEpIHsKICAgICAgaWYgKCF0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS50ZXN0KGRhdGEuaXRlbSwgdHlwZSkpIHsKICAgICAgICAvLyBEbyBub3QgZmlyZSBldmVudCBpZiB0aGUgaXRlbSB3YXMgY29uc3VtZWQuCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgbmFtZSA9IGRhdGEuaXRlbS5uYW1lIHx8ICckdGV4dCc7CiAgICAgIHRoaXMuZmlyZSh0eXBlICsgJzonICsgbmFtZSwgZGF0YSwgdGhpcy5jb252ZXJzaW9uQXBpKTsKICAgIH0KICAgIC8qKgogICAgICogQ2xlYXJzIGNvbnZlcnNpb24gQVBJIG9iamVjdC4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICovCgogIH0sIHsKICAgIGtleTogIl9jbGVhckNvbnZlcnNpb25BcGkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jbGVhckNvbnZlcnNpb25BcGkoKSB7CiAgICAgIGRlbGV0ZSB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyOwogICAgICBkZWxldGUgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGU7CiAgICB9CiAgICAvKioKICAgICAqIEZpcmVkIGZvciBpbnNlcnRlZCBub2Rlcy4KICAgICAqCiAgICAgKiBgaW5zZXJ0YCBpcyBhIG5hbWVzcGFjZSBmb3IgYSBjbGFzcyBvZiBldmVudHMuIE5hbWVzIG9mIGFjdHVhbGx5IGNhbGxlZCBldmVudHMgZm9sbG93IHRoaXMgcGF0dGVybjoKICAgICAqIGBpbnNlcnQ6bmFtZWAuIGBuYW1lYCBpcyBlaXRoZXIgYCckdGV4dCdgLCB3aGVuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3RleHR+VGV4dCBhIHRleHQgbm9kZX0gaGFzIGJlZW4gaW5zZXJ0ZWQsCiAgICAgKiBvciB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQjbmFtZSBuYW1lfSBvZiBpbnNlcnRlZCBlbGVtZW50LgogICAgICoKICAgICAqIFRoaXMgd2F5IGxpc3RlbmVycyBjYW4gZWl0aGVyIGxpc3RlbiB0byBhIGdlbmVyYWwgYGluc2VydGAgZXZlbnQgb3Igc3BlY2lmaWMgZXZlbnQgKGZvciBleGFtcGxlIGBpbnNlcnQ6cGFyYWdyYXBoYCkuCiAgICAgKgogICAgICogQGV2ZW50IGluc2VydAogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbX0gZGF0YS5pdGVtIEluc2VydGVkIGl0ZW0uCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcmFuZ2V+UmFuZ2V9IGRhdGEucmFuZ2UgUmFuZ2Ugc3Bhbm5pbmcgb3ZlciBpbnNlcnRlZCBpdGVtLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaX0gY29udmVyc2lvbkFwaSBDb252ZXJzaW9uIGludGVyZmFjZQogICAgICogdG8gYmUgdXNlZCBieSBjYWxsYmFjaywgcGFzc2VkIGluIGBEb3duY2FzdERpc3BhdGNoZXJgIGNvbnN0cnVjdG9yLgogICAgICovCgogICAgLyoqCiAgICAgKiBGaXJlZCBmb3IgcmVtb3ZlZCBub2Rlcy4KICAgICAqCiAgICAgKiBgcmVtb3ZlYCBpcyBhIG5hbWVzcGFjZSBmb3IgYSBjbGFzcyBvZiBldmVudHMuIE5hbWVzIG9mIGFjdHVhbGx5IGNhbGxlZCBldmVudHMgZm9sbG93IHRoaXMgcGF0dGVybjoKICAgICAqIGByZW1vdmU6bmFtZWAuIGBuYW1lYCBpcyBlaXRoZXIgYCckdGV4dCdgLCB3aGVuIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3RleHR+VGV4dCBhIHRleHQgbm9kZX0gaGFzIGJlZW4gcmVtb3ZlZCwKICAgICAqIG9yIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQjbmFtZSBuYW1lfSBvZiByZW1vdmVkIGVsZW1lbnQuCiAgICAgKgogICAgICogVGhpcyB3YXkgbGlzdGVuZXJzIGNhbiBlaXRoZXIgbGlzdGVuIHRvIGEgZ2VuZXJhbCBgcmVtb3ZlYCBldmVudCBvciBzcGVjaWZpYyBldmVudCAoZm9yIGV4YW1wbGUgYHJlbW92ZTpwYXJhZ3JhcGhgKS4KICAgICAqCiAgICAgKiBAZXZlbnQgcmVtb3ZlCiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFuZ2UuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb259IGRhdGEucG9zaXRpb24gUG9zaXRpb24gZnJvbSB3aGljaCB0aGUgbm9kZSBoYXMgYmVlbiByZW1vdmVkLgogICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEubGVuZ3RoIE9mZnNldCBzaXplIG9mIHRoZSByZW1vdmVkIG5vZGUuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3RDb252ZXJzaW9uQXBpfSBjb252ZXJzaW9uQXBpIENvbnZlcnNpb24gaW50ZXJmYWNlCiAgICAgKiB0byBiZSB1c2VkIGJ5IGNhbGxiYWNrLCBwYXNzZWQgaW4gYERvd25jYXN0RGlzcGF0Y2hlcmAgY29uc3RydWN0b3IuCiAgICAgKi8KCiAgICAvKioKICAgICAqIEZpcmVkIGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6CiAgICAgKgogICAgICogKiB3aGVuIGFuIGF0dHJpYnV0ZSBoYXMgYmVlbiBhZGRlZCwgY2hhbmdlZCwgb3IgcmVtb3ZlZCBmcm9tIGEgbm9kZSwKICAgICAqICogd2hlbiBhIG5vZGUgd2l0aCBhbiBhdHRyaWJ1dGUgaXMgaW5zZXJ0ZWQsCiAgICAgKiAqIHdoZW4gY29sbGFwc2VkIG1vZGVsIHNlbGVjdGlvbiBhdHRyaWJ1dGUgaXMgY29udmVydGVkLgogICAgICoKICAgICAqIGBhdHRyaWJ1dGVgIGlzIGEgbmFtZXNwYWNlIGZvciBhIGNsYXNzIG9mIGV2ZW50cy4gTmFtZXMgb2YgYWN0dWFsbHkgY2FsbGVkIGV2ZW50cyBmb2xsb3cgdGhpcyBwYXR0ZXJuOgogICAgICogYGF0dHJpYnV0ZTphdHRyaWJ1dGVLZXk6bmFtZWAuIGBhdHRyaWJ1dGVLZXlgIGlzIHRoZSBrZXkgb2YgYWRkZWQvY2hhbmdlZC9yZW1vdmVkIGF0dHJpYnV0ZS4KICAgICAqIGBuYW1lYCBpcyBlaXRoZXIgYCckdGV4dCdgIGlmIGNoYW5nZSB3YXMgb24ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvdGV4dH5UZXh0IGEgdGV4dCBub2RlfSwKICAgICAqIG9yIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9lbGVtZW50fkVsZW1lbnQjbmFtZSBuYW1lfSBvZiBlbGVtZW50IHdoaWNoIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZC4KICAgICAqCiAgICAgKiBUaGlzIHdheSBsaXN0ZW5lcnMgY2FuIGVpdGhlciBsaXN0ZW4gdG8gYSBnZW5lcmFsIGBhdHRyaWJ1dGU6Ym9sZGAgZXZlbnQgb3Igc3BlY2lmaWMgZXZlbnQgKGZvciBleGFtcGxlIGBhdHRyaWJ1dGU6c3JjOmltYWdlYCkuCiAgICAgKgogICAgICogQGV2ZW50IGF0dHJpYnV0ZQogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbXxtb2R1bGU6ZW5naW5lL21vZGVsL2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9ufSBkYXRhLml0ZW0gQ2hhbmdlZCBpdGVtCiAgICAgKiBvciBjb252ZXJ0ZWQgc2VsZWN0aW9uLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBkYXRhLnJhbmdlIFJhbmdlIHNwYW5uaW5nIG92ZXIgY2hhbmdlZCBpdGVtIG9yIHNlbGVjdGlvbiByYW5nZS4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmF0dHJpYnV0ZUtleSBBdHRyaWJ1dGUga2V5LgogICAgICogQHBhcmFtIHsqfSBkYXRhLmF0dHJpYnV0ZU9sZFZhbHVlIEF0dHJpYnV0ZSB2YWx1ZSBiZWZvcmUgdGhlIGNoYW5nZS4gVGhpcyBpcyBgbnVsbGAgd2hlbiBzZWxlY3Rpb24gYXR0cmlidXRlIGlzIGNvbnZlcnRlZC4KICAgICAqIEBwYXJhbSB7Kn0gZGF0YS5hdHRyaWJ1dGVOZXdWYWx1ZSBOZXcgYXR0cmlidXRlIHZhbHVlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaX0gY29udmVyc2lvbkFwaSBDb252ZXJzaW9uIGludGVyZmFjZQogICAgICogdG8gYmUgdXNlZCBieSBjYWxsYmFjaywgcGFzc2VkIGluIGBEb3duY2FzdERpc3BhdGNoZXJgIGNvbnN0cnVjdG9yLgogICAgICovCgogICAgLyoqCiAgICAgKiBGaXJlZCBmb3Ige0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvc2VsZWN0aW9uflNlbGVjdGlvbiBzZWxlY3Rpb259IGNoYW5nZXMuCiAgICAgKgogICAgICogQGV2ZW50IHNlbGVjdGlvbgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb259IHNlbGVjdGlvbiBTZWxlY3Rpb24gdGhhdCBpcyBjb252ZXJ0ZWQuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3RDb252ZXJzaW9uQXBpfSBjb252ZXJzaW9uQXBpIENvbnZlcnNpb24gaW50ZXJmYWNlCiAgICAgKiB0byBiZSB1c2VkIGJ5IGNhbGxiYWNrLCBwYXNzZWQgaW4gYERvd25jYXN0RGlzcGF0Y2hlcmAgY29uc3RydWN0b3IuCiAgICAgKi8KCiAgICAvKioKICAgICAqIEZpcmVkIHdoZW4gYSBuZXcgbWFya2VyIGlzIGFkZGVkIHRvIHRoZSBtb2RlbC4gQWxzbyBmaXJlZCB3aGVuIGNvbGxhcHNlZCBtb2RlbCBzZWxlY3Rpb24gdGhhdCBpcyBpbnNpZGUgbWFya2VyIGlzIGNvbnZlcnRlZC4KICAgICAqCiAgICAgKiBgYWRkTWFya2VyYCBpcyBhIG5hbWVzcGFjZSBmb3IgYSBjbGFzcyBvZiBldmVudHMuIE5hbWVzIG9mIGFjdHVhbGx5IGNhbGxlZCBldmVudHMgZm9sbG93IHRoaXMgcGF0dGVybjoKICAgICAqIGBhZGRNYXJrZXI6bWFya2VyTmFtZWAuIEJ5IHNwZWNpZnlpbmcgY2VydGFpbiBtYXJrZXIgbmFtZXMsIHlvdSBjYW4gbWFrZSB0aGUgZXZlbnRzIGV2ZW4gbW9yZSBncmFkdWFsLiBGb3IgZXhhbXBsZSwKICAgICAqIGlmIG1hcmtlcnMgYXJlIG5hbWVkIGBmb286YWJjYCwgYGZvbzpiYXJgLCB0aGVuIGl0IGlzIHBvc3NpYmxlIHRvIGxpc3RlbiB0byBgYWRkTWFya2VyOmZvb2Agb3IgYGFkZE1hcmtlcjpmb286YWJjYCBhbmQKICAgICAqIGBhZGRNYXJrZXI6Zm9vOmJhcmAgZXZlbnRzLgogICAgICoKICAgICAqIElmIHRoZSBtYXJrZXIgcmFuZ2UgaXMgbm90IGNvbGxhcHNlZDoKICAgICAqCiAgICAgKiAqIHRoZSBldmVudCBpcyBmaXJlZCBmb3IgZWFjaCBpdGVtIGluIHRoZSBtYXJrZXIgcmFuZ2Ugb25lIGJ5IG9uZSwKICAgICAqICogYGNvbnZlcnNpb25BcGkuY29uc3VtYWJsZWAgaW5jbHVkZXMgZWFjaCBpdGVtIG9mIHRoZSBtYXJrZXIgcmFuZ2UgYW5kIHRoZSBjb25zdW1hYmxlIHZhbHVlIGlzIHNhbWUgYXMgZXZlbnQgbmFtZS4KICAgICAqCiAgICAgKiBJZiB0aGUgbWFya2VyIHJhbmdlIGlzIGNvbGxhcHNlZDoKICAgICAqCiAgICAgKiAqIHRoZXJlIGlzIG9ubHkgb25lIGV2ZW50LAogICAgICogKiBgY29udmVyc2lvbkFwaS5jb25zdW1hYmxlYCBpbmNsdWRlcyBtYXJrZXIgcmFuZ2Ugd2l0aCBldmVudCBuYW1lLgogICAgICoKICAgICAqIElmIHNlbGVjdGlvbiBpbnNpZGUgYSBtYXJrZXIgaXMgY29udmVydGVkOgogICAgICoKICAgICAqICogdGhlcmUgaXMgb25seSBvbmUgZXZlbnQsCiAgICAgKiAqIGBjb252ZXJzaW9uQXBpLmNvbnN1bWFibGVgIGluY2x1ZGVzIHNlbGVjdGlvbiBpbnN0YW5jZSB3aXRoIGV2ZW50IG5hbWUuCiAgICAgKgogICAgICogQGV2ZW50IGFkZE1hcmtlcgogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2l0ZW1+SXRlbXxtb2R1bGU6ZW5naW5lL21vZGVsL3NlbGVjdGlvbn5TZWxlY3Rpb259IGRhdGEuaXRlbSBJdGVtIGluc2lkZSB0aGUgbmV3IG1hcmtlciBvcgogICAgICogdGhlIHNlbGVjdGlvbiB0aGF0IGlzIGJlaW5nIGNvbnZlcnRlZC4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gW2RhdGEucmFuZ2VdIFJhbmdlIHNwYW5uaW5nIG92ZXIgY29udmVydGVkIGl0ZW0uIEF2YWlsYWJsZSBvbmx5IGluIG1hcmtlciBjb252ZXJzaW9uLCBpZgogICAgICogdGhlIG1hcmtlciByYW5nZSB3YXMgbm90IGNvbGxhcHNlZC4KICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9yYW5nZX5SYW5nZX0gZGF0YS5tYXJrZXJSYW5nZSBNYXJrZXIgcmFuZ2UuCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5tYXJrZXJOYW1lIE1hcmtlciBuYW1lLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0Q29udmVyc2lvbkFwaX0gY29udmVyc2lvbkFwaSBDb252ZXJzaW9uIGludGVyZmFjZQogICAgICogdG8gYmUgdXNlZCBieSBjYWxsYmFjaywgcGFzc2VkIGluIGBEb3duY2FzdERpc3BhdGNoZXJgIGNvbnN0cnVjdG9yLgogICAgICovCgogICAgLyoqCiAgICAgKiBGaXJlZCB3aGVuIG1hcmtlciBpcyByZW1vdmVkIGZyb20gdGhlIG1vZGVsLgogICAgICoKICAgICAqIGByZW1vdmVNYXJrZXJgIGlzIGEgbmFtZXNwYWNlIGZvciBhIGNsYXNzIG9mIGV2ZW50cy4gTmFtZXMgb2YgYWN0dWFsbHkgY2FsbGVkIGV2ZW50cyBmb2xsb3cgdGhpcyBwYXR0ZXJuOgogICAgICogYHJlbW92ZU1hcmtlcjptYXJrZXJOYW1lYC4gQnkgc3BlY2lmeWluZyBjZXJ0YWluIG1hcmtlciBuYW1lcywgeW91IGNhbiBtYWtlIHRoZSBldmVudHMgZXZlbiBtb3JlIGdyYWR1YWwuIEZvciBleGFtcGxlLAogICAgICogaWYgbWFya2VycyBhcmUgbmFtZWQgYGZvbzphYmNgLCBgZm9vOmJhcmAsIHRoZW4gaXQgaXMgcG9zc2libGUgdG8gbGlzdGVuIHRvIGByZW1vdmVNYXJrZXI6Zm9vYCBvciBgcmVtb3ZlTWFya2VyOmZvbzphYmNgIGFuZAogICAgICogYHJlbW92ZU1hcmtlcjpmb286YmFyYCBldmVudHMuCiAgICAgKgogICAgICogQGV2ZW50IHJlbW92ZU1hcmtlcgogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhbmdlLgogICAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3JhbmdlflJhbmdlfSBkYXRhLm1hcmtlclJhbmdlIE1hcmtlciByYW5nZS4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLm1hcmtlck5hbWUgTWFya2VyIG5hbWUuCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3RDb252ZXJzaW9uQXBpfSBjb252ZXJzaW9uQXBpIENvbnZlcnNpb24gaW50ZXJmYWNlCiAgICAgKiB0byBiZSB1c2VkIGJ5IGNhbGxiYWNrLCBwYXNzZWQgaW4gYERvd25jYXN0RGlzcGF0Y2hlcmAgY29uc3RydWN0b3IuCiAgICAgKi8KCiAgfV0pOwoKICByZXR1cm4gRG93bmNhc3REaXNwYXRjaGVyOwp9KCk7CgpleHBvcnQgeyBEb3duY2FzdERpc3BhdGNoZXIgYXMgZGVmYXVsdCB9OwptaXgoRG93bmNhc3REaXNwYXRjaGVyLCBFbWl0dGVyTWl4aW4pOyAvLyBIZWxwZXIgZnVuY3Rpb24sIGNoZWNrcyB3aGV0aGVyIGNoYW5nZSBvZiBgbWFya2VyYCBhdCBgbW9kZWxQb3NpdGlvbmAgc2hvdWxkIGJlIGNvbnZlcnRlZC4gTWFya2VyIGNoYW5nZXMgYXJlIG5vdAovLyBjb252ZXJ0ZWQgaWYgdGhleSBoYXBwZW4gaW5zaWRlIGFuIGVsZW1lbnQgd2l0aCBjdXN0b20gY29udmVyc2lvbiBtZXRob2QuCi8vCi8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9wb3NpdGlvbn5Qb3NpdGlvbn0gbW9kZWxQb3NpdGlvbgovLyBAcGFyYW0ge21vZHVsZTplbmdpbmUvbW9kZWwvbWFya2VyY29sbGVjdGlvbn5NYXJrZXJ9IG1hcmtlcgovLyBAcGFyYW0ge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tYXBwZXJ+TWFwcGVyfSBtYXBwZXIKLy8gQHJldHVybnMge0Jvb2xlYW59CgpmdW5jdGlvbiBzaG91bGRNYXJrZXJDaGFuZ2VCZUNvbnZlcnRlZChtb2RlbFBvc2l0aW9uLCBtYXJrZXIsIG1hcHBlcikgewogIHZhciByYW5nZSA9IG1hcmtlci5nZXRSYW5nZSgpOwogIHZhciBhbmNlc3RvcnMgPSBBcnJheS5mcm9tKG1vZGVsUG9zaXRpb24uZ2V0QW5jZXN0b3JzKCkpOwogIGFuY2VzdG9ycy5zaGlmdCgpOyAvLyBSZW1vdmUgcm9vdCBlbGVtZW50LiBJdCBjYW5ub3QgYmUgcGFzc2VkIHRvIGBtb2RlbC5SYW5nZSNjb250YWluc0l0ZW1gLgoKICBhbmNlc3RvcnMucmV2ZXJzZSgpOwogIHZhciBoYXNDdXN0b21IYW5kbGluZyA9IGFuY2VzdG9ycy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICBpZiAocmFuZ2UuY29udGFpbnNJdGVtKGVsZW1lbnQpKSB7CiAgICAgIHZhciB2aWV3RWxlbWVudCA9IG1hcHBlci50b1ZpZXdFbGVtZW50KGVsZW1lbnQpOwogICAgICByZXR1cm4gISF2aWV3RWxlbWVudC5nZXRDdXN0b21Qcm9wZXJ0eSgnYWRkSGlnaGxpZ2h0Jyk7CiAgICB9CiAgfSk7CiAgcmV0dXJuICFoYXNDdXN0b21IYW5kbGluZzsKfQovKioKICogQ29udmVyc2lvbiBpbnRlcmZhY2UgdGhhdCBpcyByZWdpc3RlcmVkIGZvciBnaXZlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXJ9CiAqIGFuZCBpcyBwYXNzZWQgYXMgb25lIG9mIHBhcmFtZXRlcnMgd2hlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdERpc3BhdGNoZXIgZGlzcGF0Y2hlcn0KICogZmlyZXMgaXQncyBldmVudHMuCiAqCiAqIEBpbnRlcmZhY2UgbW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0ZGlzcGF0Y2hlcn5Eb3duY2FzdENvbnZlcnNpb25BcGkKICovCgovKioKICogVGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RkaXNwYXRjaGVyfkRvd25jYXN0RGlzcGF0Y2hlcn0gaW5zdGFuY2UuCiAqCiAqIEBtZW1iZXIge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9kb3duY2FzdGRpc3BhdGNoZXJ+RG93bmNhc3REaXNwYXRjaGVyfSAjZGlzcGF0Y2hlcgogKi8KCi8qKgogKiBTdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBwYXJ0cyBvZiBwcm9jZXNzZWQgbW9kZWwgaXRlbSBhcmUgc3RpbGwgd2FpdGluZyB0byBiZSBoYW5kbGVkLiBBZnRlciBhIHBpZWNlIG9mIG1vZGVsIGl0ZW0KICogd2FzIGNvbnZlcnRlZCwgYXBwcm9wcmlhdGUgY29uc3VtYWJsZSB2YWx1ZSBzaG91bGQgYmUge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tb2RlbGNvbnN1bWFibGV+TW9kZWxDb25zdW1hYmxlI2NvbnN1bWUgY29uc3VtZWR9LgogKgogKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbW9kZWxjb25zdW1hYmxlfk1vZGVsQ29uc3VtYWJsZX0gI2NvbnN1bWFibGUKICovCgovKioKICogVGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vbWFwcGVyfk1hcHBlcn0gaW5zdGFuY2UuCiAqCiAqIEBtZW1iZXIge21vZHVsZTplbmdpbmUvY29udmVyc2lvbi9tYXBwZXJ+TWFwcGVyfSAjbWFwcGVyCiAqLwoKLyoqCiAqIFRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSBpbnN0YW5jZSB1c2VkIHRvIG1hbmlwdWxhdGUgZGF0YSBkdXJpbmcgY29udmVyc2lvbi4KICoKICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSAjd3JpdGVyCiAqLw=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js"],"names":["Consumable","Range","EmitterMixin","mix","extend","DowncastDispatcher","conversionApi","dispatcher","differ","markers","writer","getMarkersToRemove","change","convertMarkerRemove","name","range","getChanges","entry","type","convertInsert","_createFromPositionAndShift","position","length","convertRemove","convertAttribute","attributeKey","attributeOldValue","attributeNewValue","mapper","flushUnboundMarkerNames","markerName","markerRange","get","getRange","convertMarkerAdd","getMarkersToAdd","consumable","_createInsertConsumable","value","item","itemRange","previousPosition","data","_testAndFire","getAttributeKeys","key","getAttribute","_clearConversionApi","fire","oldValue","newValue","_createConsumableForRange","selection","markersAtSelection","Array","from","getMarkersAtPosition","getFirstPosition","_createSelectionConsumable","isCollapsed","marker","shouldMarkerChangeBeConverted","test","getFirstRange","root","document","rootName","eventName","add","getItems","_createOn","modelPosition","ancestors","getAncestors","shift","reverse","hasCustomHandling","some","element","containsItem","viewElement","toViewElement","getCustomProperty"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\n\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { extend } from 'lodash-es';\n\n/**\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\n * data for those events. It is important to understand that those events are connected with changes done on model,\n * for example: \"node has been inserted\" or \"attribute has changed\". This is in a contrary to upcasting (view to model conversion),\n * where we convert view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\n *\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\n *\n * `DowncastDispatcher` fires following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * if a range of nodes has been inserted to the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\n * if a range of nodes has been removed from the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\n * if attribute has been added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\n * element's attributes during insertion).\n *\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\n *\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\n * so both those events are fired.\n *\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * which converts selection from model to view,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * which is fired for every selection attribute,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * which is fired for every marker which contains selection.\n *\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\n *\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * Example of a custom converter for `DowncastDispatcher`:\n *\n *\t\t// We will convert inserting \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate position in model to position in view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create <p> element that will be inserted in view at `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to model element so positions will map accordingly in future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class DowncastDispatcher {\n\t/**\n\t * Creates a `DowncastDispatcher` instance.\n\t *\n\t * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n\t * @param {Object} conversionApi Additional properties for interface that will be passed to events fired\n\t * by `DowncastDispatcher`.\n\t */\n\tconstructor( conversionApi ) {\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastConversionApi}\n\t\t */\n\t\tthis.conversionApi = extend( { dispatcher: this }, conversionApi );\n\t}\n\n\t/**\n\t * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n\t *\n\t * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertChanges( differ, markers, writer ) {\n\t\t// Before the view is updated, remove markers which have changed.\n\t\tfor ( const change of differ.getMarkersToRemove() ) {\n\t\t\tthis.convertMarkerRemove( change.name, change.range, writer );\n\t\t}\n\n\t\t// Convert changes that happened on model tree.\n\t\tfor ( const entry of differ.getChanges() ) {\n\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\tthis.convertInsert( Range._createFromPositionAndShift( entry.position, entry.length ), writer );\n\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\n\t\t\t} else {\n\t\t\t\t// entry.type == 'attribute'.\n\t\t\t\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const markerName of this.conversionApi.mapper.flushUnboundMarkerNames() ) {\n\t\t\tconst markerRange = markers.get( markerName ).getRange();\n\n\t\t\tthis.convertMarkerRemove( markerName, markerRange, writer );\n\t\t\tthis.convertMarkerAdd( markerName, markerRange, writer );\n\t\t}\n\n\t\t// After the view is updated, convert markers which have changed.\n\t\tfor ( const change of differ.getMarkersToAdd() ) {\n\t\t\tthis.convertMarkerAdd( change.name, change.range, writer );\n\t\t}\n\t}\n\n\t/**\n\t * Starts conversion of a range insertion.\n\t *\n\t * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\n\t * {@link #event:attribute attribute event is fired}.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertInsert( range, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( range );\n\n\t\t// Fire a separate insert event for each node and text fragment contained in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange\n\t\t\t};\n\n\t\t\tthis._testAndFire( 'insert', data );\n\n\t\t\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\n\t\t\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\n\t\t\t// If we would not add this part, attributes on inserted nodes would not be converted.\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tdata.attributeKey = key;\n\t\t\t\tdata.attributeOldValue = null;\n\t\t\t\tdata.attributeNewValue = item.getAttribute( key );\n\n\t\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n\t *\n\t * @param {module:engine/model/position~Position} position Position from which node was removed.\n\t * @param {Number} length Offset size of removed node.\n\t * @param {String} name Name of removed node.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertRemove( position, length, name, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts conversion of attribute change on given `range`.\n\t *\n\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n\t *\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Changed range.\n\t * @param {String} key Key of the attribute that has changed.\n\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertAttribute( range, key, oldValue, newValue, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list with attributes to consume.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\n\n\t\t// Create a separate attribute event for each node in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\tattributeNewValue: newValue\n\t\t\t};\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts model selection conversion.\n\t *\n\t * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\n\t *\n\t * @fires selection\n\t * @fires addMarker\n\t * @fires attribute\n\t * @param {module:engine/model/selection~Selection} selection Selection to convert.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertSelection( selection, markers, writer ) {\n\t\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\n\n\t\tthis.conversionApi.writer = writer;\n\t\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\n\n\t\tthis.fire( 'selection', { selection }, this.conversionApi );\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const marker of markersAtSelection ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\tmarkerName: marker.name,\n\t\t\t\tmarkerRange\n\t\t\t};\n\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\n\t\t\t\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\trange: selection.getFirstRange(),\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: selection.getAttribute( key )\n\t\t\t};\n\n\t\t\t// Do not fire event if the attribute has been consumed.\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\n\t\t\t\tthis.fire( 'attribute:' + data.attributeKey + ':$text', data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\n\t * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\n\t *\n\t * @fires addMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerAdd( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// In markers' case, event name == consumable name.\n\t\tconst eventName = 'addMarker:' + markerName;\n\n\t\t//\n\t\t// First, fire an event for the whole marker.\n\t\t//\n\t\tconst consumable = new Consumable();\n\t\tconsumable.add( markerRange, eventName );\n\n\t\tthis.conversionApi.consumable = consumable;\n\n\t\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\n\n\t\t//\n\t\t// Do not fire events for each item inside the range if the range got consumed.\n\t\t//\n\t\tif ( !consumable.test( markerRange, eventName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Then, fire an event for each item inside the marker range.\n\t\t//\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\n\n\t\tfor ( const item of markerRange.getItems() ) {\n\t\t\t// Do not fire event for already consumed items.\n\t\t\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = { item, range: Range._createOn( item ), markerName, markerRange };\n\n\t\t\tthis.fire( eventName, data, this.conversionApi );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\n\t *\n\t * @fires removeMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerRemove( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\n\t * assuming that the range has just been inserted to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createInsertConsumable( range ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\n\t\t\tconsumable.add( item, 'insert' );\n\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tconsumable.add( item, 'attribute:' + key );\n\t\t\t}\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Affected range.\n\t * @param {String} type Consumable type.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createConsumableForRange( range, type ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tconsumable.add( item, type );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\n\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createSelectionConsumable( selection, markers ) {\n\t\tconst consumable = new Consumable();\n\n\t\tconsumable.add( selection, 'selection' );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tconsumable.add( selection, 'addMarker:' + marker.name );\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconsumable.add( selection, 'attribute:' + key );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {String} type Event type.\n\t * @param {Object} data Event data.\n\t */\n\t_testAndFire( type, data ) {\n\t\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\n\t\t\t// Do not fire event if the item was consumed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst name = data.item.name || '$text';\n\n\t\tthis.fire( type + ':' + name, data, this.conversionApi );\n\t}\n\n\t/**\n\t * Clears conversion API object.\n\t *\n\t * @private\n\t */\n\t_clearConversionApi() {\n\t\tdelete this.conversionApi.writer;\n\t\tdelete this.conversionApi.consumable;\n\t}\n\n\t/**\n\t * Fired for inserted nodes.\n\t *\n\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n\t * or {@link module:engine/model/element~Element#name name} of inserted element.\n\t *\n\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n\t *\n\t * @event insert\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item} data.item Inserted item.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for removed nodes.\n\t *\n\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n\t * or the {@link module:engine/model/element~Element#name name} of removed element.\n\t *\n\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n\t *\n\t * @event remove\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/position~Position} data.position Position from which the node has been removed.\n\t * @param {Number} data.length Offset size of the removed node.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired in the following cases:\n\t *\n\t * * when an attribute has been added, changed, or removed from a node,\n\t * * when a node with an attribute is inserted,\n\t * * when collapsed model selection attribute is converted.\n\t *\n\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n\t *\n\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n\t *\n\t * @event attribute\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n\t * or converted selection.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n\t * @param {String} data.attributeKey Attribute key.\n\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n\t * @param {*} data.attributeNewValue New attribute value.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\n\t *\n\t * @event selection\n\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\n\t *\n\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n\t * `addMarker:foo:bar` events.\n\t *\n\t * If the marker range is not collapsed:\n\t *\n\t * * the event is fired for each item in the marker range one by one,\n\t * * `conversionApi.consumable` includes each item of the marker range and the consumable value is same as event name.\n\t *\n\t * If the marker range is collapsed:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes marker range with event name.\n\t *\n\t * If selection inside a marker is converted:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes selection instance with event name.\n\t *\n\t * @event addMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n\t * the selection that is being converted.\n\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n\t * the marker range was not collapsed.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when marker is removed from the model.\n\t *\n\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n\t * `removeMarker:foo:bar` events.\n\t *\n\t * @event removeMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n}\n\nmix( DowncastDispatcher, EmitterMixin );\n\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\n\tconst range = marker.getRange();\n\tconst ancestors = Array.from( modelPosition.getAncestors() );\n\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\tancestors.reverse();\n\n\tconst hasCustomHandling = ancestors.some( element => {\n\t\tif ( range.containsItem( element ) ) {\n\t\t\tconst viewElement = mapper.toViewElement( element );\n\n\t\t\treturn !!viewElement.getCustomProperty( 'addHighlight' );\n\t\t}\n\t} );\n\n\treturn !hasCustomHandling;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/downcastdispatcher~DowncastConversionApi\n */\n\n/**\n * The {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} instance.\n *\n * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #dispatcher\n */\n\n/**\n * Stores information about what parts of processed model item are still waiting to be handled. After a piece of model item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/modelconsumable~ModelConsumable} #consumable\n */\n\n/**\n * The {@link module:engine/conversion/mapper~Mapper} instance.\n *\n * @member {module:engine/conversion/mapper~Mapper} #mapper\n */\n\n/**\n * The {@link module:engine/view/downcastwriter~DowncastWriter} instance used to manipulate data during conversion.\n *\n * @member {module:engine/view/downcastwriter~DowncastWriter} #writer\n */\n"]}]}