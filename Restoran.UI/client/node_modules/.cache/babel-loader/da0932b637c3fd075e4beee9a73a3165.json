{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-clipboard\\src\\clipboard.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-clipboard\\src\\clipboard.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js"],"names":["Plugin","ClipboardObserver","plainTextToHtml","normalizeClipboardHtml","viewToPlainText","HtmlDataProcessor","Clipboard","editor","modelDocument","model","document","view","editing","viewDocument","_htmlDataProcessor","addObserver","listenTo","evt","isReadOnly","stop","priority","data","dataTransfer","content","getData","toView","fire","scrollToTheSelection","isEmpty","dataController","modelFragment","toModel","childCount","insertContent","onCopyCut","preventDefault","getSelectedContent","selection","method","name","setData","toData","deleteContent"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Data processor used to convert pasted HTML to a view structure.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n\t\t */\n\t\tthis._htmlDataProcessor = new HtmlDataProcessor( viewDocument );\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this._htmlDataProcessor.toView( content );\n\n\t\t\tthis.fire( 'inputTransformation', { content, dataTransfer } );\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n\t\t\t\t// we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.insertContent( modelFragment );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions needs access to a raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n"]}]}