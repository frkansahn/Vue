{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\documentselection.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\documentselection.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgovKioKICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjAsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kIG9yIGh0dHBzOi8vY2tlZGl0b3IuY29tL2xlZ2FsL2NrZWRpdG9yLW9zcy1saWNlbnNlCiAqLwoKLyoqCiAqIEBtb2R1bGUgZW5naW5lL3ZpZXcvZG9jdW1lbnRzZWxlY3Rpb24KICovCmltcG9ydCBTZWxlY3Rpb24gZnJvbSAnLi9zZWxlY3Rpb24nOwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7CmltcG9ydCBFbWl0dGVyTWl4aW4gZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvZW1pdHRlcm1peGluJzsKLyoqCiAqIENsYXNzIHJlcHJlc2VudGluZyB0aGUgZG9jdW1lbnQgc2VsZWN0aW9uIGluIHRoZSB2aWV3LgogKgogKiBJdHMgaW5zdGFuY2UgaXMgYXZhaWxhYmxlIGluIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnQjc2VsZWN0aW9uIGBEb2N1bWVudCNzZWxlY3Rpb25gfS4KICoKICogSXQgaXMgc2ltaWxhciB0byB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb259IGJ1dAogKiBpdCBoYXMgYSByZWFkLW9ubHkgQVBJIGFuZCBjYW4gYmUgbW9kaWZpZWQgb25seSBieSB0aGUgd3JpdGVyIGF2YWlsYWJsZSBpbgogKiB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy92aWV3flZpZXcjY2hhbmdlIGBWaWV3I2NoYW5nZSgpYH0gYmxvY2sKICogKHNvIHZpYSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyI3NldFNlbGVjdGlvbiBgRG93bmNhc3RXcml0ZXIjc2V0U2VsZWN0aW9uKClgfSkuCiAqLwoKdmFyIERvY3VtZW50U2VsZWN0aW9uID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlcyBuZXcgRG9jdW1lbnRTZWxlY3Rpb24gaW5zdGFuY2UuCiAgICoKICAgKiAJCS8vIENyZWF0ZXMgZW1wdHkgc2VsZWN0aW9uIHdpdGhvdXQgcmFuZ2VzLgogICAqCQljb25zdCBzZWxlY3Rpb24gPSBuZXcgRG9jdW1lbnRTZWxlY3Rpb24oKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIHNlbGVjdGlvbiBhdCB0aGUgZ2l2ZW4gcmFuZ2UuCiAgICoJCWNvbnN0IHJhbmdlID0gd3JpdGVyLmNyZWF0ZVJhbmdlKCBzdGFydCwgZW5kICk7CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IG5ldyBEb2N1bWVudFNlbGVjdGlvbiggcmFuZ2UgKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIHNlbGVjdGlvbiBhdCB0aGUgZ2l2ZW4gcmFuZ2VzCiAgICogCQljb25zdCByYW5nZXMgPSBbIHdyaXRlci5jcmVhdGVSYW5nZSggc3RhcnQxLCBlbmQyICksIHdyaXRlci5jcmVhdGVSYW5nZSggc3RhcnQyLCBlbmQyICkgXTsKICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gbmV3IERvY3VtZW50U2VsZWN0aW9uKCByYW5nZXMgKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIHNlbGVjdGlvbiBmcm9tIHRoZSBvdGhlciBzZWxlY3Rpb24uCiAgICoJCWNvbnN0IG90aGVyU2VsZWN0aW9uID0gd3JpdGVyLmNyZWF0ZVNlbGVjdGlvbigpOwogICAqCQljb25zdCBzZWxlY3Rpb24gPSBuZXcgRG9jdW1lbnRTZWxlY3Rpb24oIG90aGVyU2VsZWN0aW9uICk7CiAgICoKICAgKiAJCS8vIENyZWF0ZXMgc2VsZWN0aW9uIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi4KICAgKgkJY29uc3QgcG9zaXRpb24gPSB3cml0ZXIuY3JlYXRlUG9zaXRpb25BdCggcm9vdCwgb2Zmc2V0ICk7CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IG5ldyBEb2N1bWVudFNlbGVjdGlvbiggcG9zaXRpb24gKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIGNvbGxhcHNlZCBzZWxlY3Rpb24gYXQgdGhlIHBvc2l0aW9uIG9mIGdpdmVuIGl0ZW0gYW5kIG9mZnNldC4KICAgKgkJY29uc3QgcGFyYWdyYXBoID0gd3JpdGVyLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoICdwYXJhZ3JhcGgnICk7CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IG5ldyBEb2N1bWVudFNlbGVjdGlvbiggcGFyYWdyYXBoLCBvZmZzZXQgKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIGEgcmFuZ2UgaW5zaWRlIGFuIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50IGVsZW1lbnR9IHdoaWNoIHN0YXJ0cyBiZWZvcmUgdGhlCiAgICoJCS8vIGZpcnN0IGNoaWxkIG9mIHRoYXQgZWxlbWVudCBhbmQgZW5kcyBhZnRlciB0aGUgbGFzdCBjaGlsZCBvZiB0aGF0IGVsZW1lbnQuCiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IG5ldyBEb2N1bWVudFNlbGVjdGlvbiggcGFyYWdyYXBoLCAnaW4nICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBhIHJhbmdlIG9uIGFuIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvaXRlbX5JdGVtIGl0ZW19IHdoaWNoIHN0YXJ0cyBiZWZvcmUgdGhlIGl0ZW0gYW5kIGVuZHMKICAgKgkJLy8ganVzdCBhZnRlciB0aGUgaXRlbS4KICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gbmV3IERvY3VtZW50U2VsZWN0aW9uKCBwYXJhZ3JhcGgsICdvbicgKTsKICAgKgogICAqIGBTZWxlY3Rpb25gJ3MgY29uc3RydWN0b3IgYWxsb3cgcGFzc2luZyBhZGRpdGlvbmFsIG9wdGlvbnMgKGBiYWNrd2FyZGAsIGBmYWtlYCBhbmQgYGxhYmVsYCkgYXMgdGhlIGxhc3QgYXJndW1lbnQuCiAgICoKICAgKgkJLy8gQ3JlYXRlcyBiYWNrd2FyZCBzZWxlY3Rpb24uCiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IG5ldyBEb2N1bWVudFNlbGVjdGlvbiggcmFuZ2UsIHsgYmFja3dhcmQ6IHRydWUgfSApOwogICAqCiAgICogRmFrZSBzZWxlY3Rpb24gZG9lcyBub3QgcmVuZGVyIGFzIGJyb3dzZXIgbmF0aXZlIHNlbGVjdGlvbiBvdmVyIHNlbGVjdGVkIGVsZW1lbnRzIGFuZCBpcyBoaWRkZW4gdG8gdGhlIHVzZXIuCiAgICogVGhpcyB3YXksIG5vIG5hdGl2ZSBzZWxlY3Rpb24gVUkgYXJ0aWZhY3RzIGFyZSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIgYW5kIHNlbGVjdGlvbiBvdmVyIGVsZW1lbnRzIGNhbiBiZQogICAqIHJlcHJlc2VudGVkIGluIG90aGVyIHdheSwgZm9yIGV4YW1wbGUgYnkgYXBwbHlpbmcgcHJvcGVyIENTUyBjbGFzcy4KICAgKgogICAqIEFkZGl0aW9uYWxseSBmYWtlJ3Mgc2VsZWN0aW9uIGxhYmVsIGNhbiBiZSBwcm92aWRlZC4gSXQgd2lsbCBiZSB1c2VkIHRvIGRlc2NyaWJlIGZha2Ugc2VsZWN0aW9uIGluIERPTQogICAqIChhbmQgYmUgIHByb3Blcmx5IGhhbmRsZWQgYnkgc2NyZWVuIHJlYWRlcnMpLgogICAqCiAgICoJCS8vIENyZWF0ZXMgZmFrZSBzZWxlY3Rpb24gd2l0aCBsYWJlbC4KICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gbmV3IERvY3VtZW50U2VsZWN0aW9uKCByYW5nZSwgeyBmYWtlOiB0cnVlLCBsYWJlbDogJ2ZvbycgfSApOwogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvc2VsZWN0aW9uflNlbGVjdGFibGV9IFtzZWxlY3RhYmxlPW51bGxdCiAgICogQHBhcmFtIHtOdW1iZXJ8J2JlZm9yZSd8J2VuZCd8J2FmdGVyJ3wnb24nfCdpbid9IFtwbGFjZU9yT2Zmc2V0XSBPZmZzZXQgb3IgcGxhY2Ugd2hlbiBzZWxlY3RhYmxlIGlzIGFuIGBJdGVtYC4KICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdCiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5iYWNrd2FyZF0gU2V0cyB0aGlzIHNlbGVjdGlvbiBpbnN0YW5jZSB0byBiZSBiYWNrd2FyZC4KICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmZha2VdIFNldHMgdGhpcyBzZWxlY3Rpb24gaW5zdGFuY2UgdG8gYmUgbWFya2VkIGFzIGBmYWtlYC4KICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMubGFiZWxdIExhYmVsIGZvciB0aGUgZmFrZSBzZWxlY3Rpb24uCiAgICovCiAgZnVuY3Rpb24gRG9jdW1lbnRTZWxlY3Rpb24oKSB7CiAgICB2YXIgc2VsZWN0YWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDsKICAgIHZhciBwbGFjZU9yT2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb2N1bWVudFNlbGVjdGlvbik7CgogICAgLyoqCiAgICAgKiBTZWxlY3Rpb24gaXMgdXNlZCBpbnRlcm5hbGx5IChgRG9jdW1lbnRTZWxlY3Rpb25gIGlzIGEgcHJveHkgdG8gdGhhdCBzZWxlY3Rpb24pLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL3ZpZXcvc2VsZWN0aW9uflNlbGVjdGlvbn0KICAgICAqLwogICAgdGhpcy5fc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbigpOyAvLyBEZWxlZ2F0ZSBjaGFuZ2UgZXZlbnQgdG8gYmUgZmlyZWQgb24gRG9jdW1lbnRTZWxlY3Rpb24gaW5zdGFuY2UuCgogICAgdGhpcy5fc2VsZWN0aW9uLmRlbGVnYXRlKCdjaGFuZ2UnKS50byh0aGlzKTsgLy8gU2V0IHNlbGVjdGlvbiBkYXRhLgoKCiAgICB0aGlzLl9zZWxlY3Rpb24uc2V0VG8oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucyk7CiAgfQogIC8qKgogICAqIFJldHVybnMgdHJ1ZSBpZiBzZWxlY3Rpb24gaW5zdGFuY2UgaXMgbWFya2VkIGFzIGBmYWtlYC4KICAgKgogICAqIEBzZWUgI19zZXRUbwogICAqIEByZXR1cm5zIHtCb29sZWFufQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKERvY3VtZW50U2VsZWN0aW9uLCBbewogICAga2V5OiAiZ2V0UmFuZ2VzIiwKCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgdGhhdCBjb250YWlucyBjb3BpZXMgb2YgYWxsIHJhbmdlcyBhZGRlZCB0byB0aGUgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHtJdGVyYWJsZS48bW9kdWxlOmVuZ2luZS92aWV3L3JhbmdlflJhbmdlPn0KICAgICAqLwogICAgdmFsdWU6CiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBnZXRSYW5nZXMoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBnZXRSYW5nZXMkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5kZWxlZ2F0ZVlpZWxkKHRoaXMuX3NlbGVjdGlvbi5nZXRSYW5nZXMoKSwgInQwIiwgMSk7CgogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIGdldFJhbmdlcywgdGhpcyk7CiAgICB9KQogICAgLyoqCiAgICAgKiBSZXR1cm5zIGNvcHkgb2YgdGhlIGZpcnN0IHJhbmdlIGluIHRoZSBzZWxlY3Rpb24uIEZpcnN0IHJhbmdlIGlzIHRoZSBvbmUgd2hpY2gKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvcmFuZ2V+UmFuZ2Ujc3RhcnQgc3RhcnR9IHBvc2l0aW9uIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvcG9zaXRpb25+UG9zaXRpb24jaXNCZWZvcmUgaXMgYmVmb3JlfSBzdGFydAogICAgICogcG9zaXRpb24gb2YgYWxsIG90aGVyIHJhbmdlcyAobm90IHRvIGNvbmZ1c2Ugd2l0aCB0aGUgZmlyc3QgcmFuZ2UgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbikuCiAgICAgKiBSZXR1cm5zIGBudWxsYCBpZiBubyByYW5nZXMgYXJlIGFkZGVkIHRvIHNlbGVjdGlvbi4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L3JhbmdlflJhbmdlfG51bGx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Rmlyc3RSYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3RSYW5nZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRGaXJzdFJhbmdlKCk7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybnMgY29weSBvZiB0aGUgbGFzdCByYW5nZSBpbiB0aGUgc2VsZWN0aW9uLiBMYXN0IHJhbmdlIGlzIHRoZSBvbmUgd2hpY2gge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9yYW5nZX5SYW5nZSNlbmQgZW5kfQogICAgICogcG9zaXRpb24ge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9wb3NpdGlvbn5Qb3NpdGlvbiNpc0FmdGVyIGlzIGFmdGVyfSBlbmQgcG9zaXRpb24gb2YgYWxsIG90aGVyIHJhbmdlcyAobm90IHRvIGNvbmZ1c2UKICAgICAqIHdpdGggdGhlIGxhc3QgcmFuZ2UgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbikuIFJldHVybnMgYG51bGxgIGlmIG5vIHJhbmdlcyBhcmUgYWRkZWQgdG8gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvcmFuZ2V+UmFuZ2V8bnVsbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRMYXN0UmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhc3RSYW5nZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRMYXN0UmFuZ2UoKTsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBjb3B5IG9mIHRoZSBmaXJzdCBwb3NpdGlvbiBpbiB0aGUgc2VsZWN0aW9uLiBGaXJzdCBwb3NpdGlvbiBpcyB0aGUgcG9zaXRpb24gdGhhdAogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9wb3NpdGlvbn5Qb3NpdGlvbiNpc0JlZm9yZSBpcyBiZWZvcmV9IGFueSBvdGhlciBwb3NpdGlvbiBpbiB0aGUgc2VsZWN0aW9uIHJhbmdlcy4KICAgICAqIFJldHVybnMgYG51bGxgIGlmIG5vIHJhbmdlcyBhcmUgYWRkZWQgdG8gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvcG9zaXRpb25+UG9zaXRpb258bnVsbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRGaXJzdFBvc2l0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaXJzdFBvc2l0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldEZpcnN0UG9zaXRpb24oKTsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBjb3B5IG9mIHRoZSBsYXN0IHBvc2l0aW9uIGluIHRoZSBzZWxlY3Rpb24uIExhc3QgcG9zaXRpb24gaXMgdGhlIHBvc2l0aW9uIHRoYXQKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvcG9zaXRpb25+UG9zaXRpb24jaXNBZnRlciBpcyBhZnRlcn0gYW55IG90aGVyIHBvc2l0aW9uIGluIHRoZSBzZWxlY3Rpb24gcmFuZ2VzLgogICAgICogUmV0dXJucyBgbnVsbGAgaWYgbm8gcmFuZ2VzIGFyZSBhZGRlZCB0byBzZWxlY3Rpb24uCiAgICAgKgogICAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvdmlldy9wb3NpdGlvbn5Qb3NpdGlvbnxudWxsfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldExhc3RQb3NpdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFzdFBvc2l0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldExhc3RQb3NpdGlvbigpOwogICAgfQogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBzZWxlY3RlZCBlbGVtZW50LiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2VsZW1lbnR+RWxlbWVudCBFbGVtZW50fSBpcyBjb25zaWRlcmVkIGFzIHNlbGVjdGVkIGlmIHRoZXJlIGlzIG9ubHkKICAgICAqIG9uZSByYW5nZSBpbiB0aGUgc2VsZWN0aW9uLCBhbmQgdGhhdCByYW5nZSBjb250YWlucyBleGFjdGx5IG9uZSBlbGVtZW50LgogICAgICogUmV0dXJucyBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gc2VsZWN0ZWQgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L2VsZW1lbnR+RWxlbWVudHxudWxsfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFNlbGVjdGVkRWxlbWVudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0ZWRFbGVtZW50KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldFNlbGVjdGVkRWxlbWVudCgpOwogICAgfQogICAgLyoqCiAgICAgKiBDaGVja3Mgd2hldGhlciwgdGhpcyBzZWxlY3Rpb24gaXMgZXF1YWwgdG8gZ2l2ZW4gc2VsZWN0aW9uLiBTZWxlY3Rpb25zIGFyZSBlcXVhbCBpZiB0aGV5IGhhdmUgc2FtZSBkaXJlY3Rpb25zLAogICAgICogc2FtZSBudW1iZXIgb2YgcmFuZ2VzIGFuZCBhbGwgcmFuZ2VzIGZyb20gb25lIHNlbGVjdGlvbiBlcXVhbCB0byBhIHJhbmdlIGZyb20gb3RoZXIgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb258bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9ufSBvdGhlclNlbGVjdGlvbgogICAgICogU2VsZWN0aW9uIHRvIGNvbXBhcmUgd2l0aC4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgc2VsZWN0aW9ucyBhcmUgZXF1YWwsIGBmYWxzZWAgb3RoZXJ3aXNlLgogICAgICovCgogIH0sIHsKICAgIGtleTogImlzRXF1YWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwob3RoZXJTZWxlY3Rpb24pIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5pc0VxdWFsKG90aGVyU2VsZWN0aW9uKTsKICAgIH0KICAgIC8qKgogICAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyBzZWxlY3Rpb24gaXMgc2ltaWxhciB0byBnaXZlbiBzZWxlY3Rpb24uIFNlbGVjdGlvbnMgYXJlIHNpbWlsYXIgaWYgdGhleSBoYXZlIHNhbWUgZGlyZWN0aW9ucywgc2FtZQogICAgICogbnVtYmVyIG9mIHJhbmdlcywgYW5kIGFsbCB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3JhbmdlflJhbmdlI2dldFRyaW1tZWQgdHJpbW1lZH0gcmFuZ2VzIGZyb20gb25lIHNlbGVjdGlvbiBhcmUKICAgICAqIGVxdWFsIHRvIGFueSB0cmltbWVkIHJhbmdlIGZyb20gb3RoZXIgc2VsZWN0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb258bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50c2VsZWN0aW9ufkRvY3VtZW50U2VsZWN0aW9ufSBvdGhlclNlbGVjdGlvbgogICAgICogU2VsZWN0aW9uIHRvIGNvbXBhcmUgd2l0aC4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgc2VsZWN0aW9ucyBhcmUgc2ltaWxhciwgYGZhbHNlYCBvdGhlcndpc2UuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXNTaW1pbGFyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1NpbWlsYXIob3RoZXJTZWxlY3Rpb24pIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5pc1NpbWlsYXIob3RoZXJTZWxlY3Rpb24pOwogICAgfQogICAgLyoqCiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGlzIG9iamVjdCBpcyBvZiB0aGUgZ2l2ZW4gdHlwZS4KICAgICAqCiAgICAgKgkJZG9jU2VsZWN0aW9uLmlzKCAnc2VsZWN0aW9uJyApOyAvLyAtPiB0cnVlCiAgICAgKgkJZG9jU2VsZWN0aW9uLmlzKCAnZG9jdW1lbnRTZWxlY3Rpb24nICk7IC8vIC0+IHRydWUKICAgICAqCQlkb2NTZWxlY3Rpb24uaXMoICd2aWV3OnNlbGVjdGlvbicgKTsgLy8gLT4gdHJ1ZQogICAgICoJCWRvY1NlbGVjdGlvbi5pcyggJ3ZpZXc6ZG9jdW1lbnRTZWxlY3Rpb24nICk7IC8vIC0+IHRydWUKICAgICAqCiAgICAgKgkJZG9jU2VsZWN0aW9uLmlzKCAnbW9kZWw6ZG9jdW1lbnRTZWxlY3Rpb24nICk7IC8vIC0+IGZhbHNlCiAgICAgKgkJZG9jU2VsZWN0aW9uLmlzKCAnZWxlbWVudCcgKTsgLy8gLT4gZmFsc2UKICAgICAqCQlkb2NTZWxlY3Rpb24uaXMoICdub2RlJyApOyAvLyAtPiBmYWxzZQogICAgICoKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlI2lzIENoZWNrIHRoZSBlbnRpcmUgbGlzdCBvZiB2aWV3IG9iamVjdHN9IHdoaWNoIGltcGxlbWVudCB0aGUgYGlzKClgIG1ldGhvZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzKHR5cGUpIHsKICAgICAgcmV0dXJuIHR5cGUgPT0gJ3NlbGVjdGlvbicgfHwgdHlwZSA9PSAnZG9jdW1lbnRTZWxlY3Rpb24nIHx8IHR5cGUgPT0gJ3ZpZXc6c2VsZWN0aW9uJyB8fCB0eXBlID09ICd2aWV3OmRvY3VtZW50U2VsZWN0aW9uJzsKICAgIH0KICAgIC8qKgogICAgICogU2V0cyB0aGlzIHNlbGVjdGlvbidzIHJhbmdlcyBhbmQgZGlyZWN0aW9uIHRvIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24gYmFzZWQgb24gdGhlIGdpdmVuCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3RhYmxlIHNlbGVjdGFibGV9LgogICAgICoKICAgICAqCQkvLyBTZXRzIHNlbGVjdGlvbiB0byB0aGUgZ2l2ZW4gcmFuZ2UuCiAgICAgKgkJY29uc3QgcmFuZ2UgPSB3cml0ZXIuY3JlYXRlUmFuZ2UoIHN0YXJ0LCBlbmQgKTsKICAgICAqCQlkb2N1bWVudFNlbGVjdGlvbi5fc2V0VG8oIHJhbmdlICk7CiAgICAgKgogICAgICoJCS8vIFNldHMgc2VsZWN0aW9uIHRvIGdpdmVuIHJhbmdlcy4KICAgICAqIAkJY29uc3QgcmFuZ2VzID0gWyB3cml0ZXIuY3JlYXRlUmFuZ2UoIHN0YXJ0MSwgZW5kMiApLCB3cml0ZXIuY3JlYXRlUmFuZ2UoIHN0YXJ0MiwgZW5kMiApIF07CiAgICAgKgkJZG9jdW1lbnRTZWxlY3Rpb24uX3NldFRvKCByYW5nZSApOwogICAgICoKICAgICAqCQkvLyBTZXRzIHNlbGVjdGlvbiB0byB0aGUgb3RoZXIgc2VsZWN0aW9uLgogICAgICoJCWNvbnN0IG90aGVyU2VsZWN0aW9uID0gd3JpdGVyLmNyZWF0ZVNlbGVjdGlvbigpOwogICAgICoJCWRvY3VtZW50U2VsZWN0aW9uLl9zZXRUbyggb3RoZXJTZWxlY3Rpb24gKTsKICAgICAqCiAgICAgKiAJCS8vIFNldHMgY29sbGFwc2VkIHNlbGVjdGlvbiBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uCiAgICAgKgkJY29uc3QgcG9zaXRpb24gPSB3cml0ZXIuY3JlYXRlUG9zaXRpb25BdCggcm9vdCwgb2Zmc2V0ICk7CiAgICAgKgkJZG9jdW1lbnRTZWxlY3Rpb24uX3NldFRvKCBwb3NpdGlvbiApOwogICAgICoKICAgICAqIAkJLy8gU2V0cyBjb2xsYXBzZWQgc2VsZWN0aW9uIGF0IHRoZSBwb3NpdGlvbiBvZiBnaXZlbiBpdGVtIGFuZCBvZmZzZXQuCiAgICAgKgkJZG9jdW1lbnRTZWxlY3Rpb24uX3NldFRvKCBwYXJhZ3JhcGgsIG9mZnNldCApOwogICAgICoKICAgICAqIENyZWF0ZXMgYSByYW5nZSBpbnNpZGUgYW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnQgZWxlbWVudH0gd2hpY2ggc3RhcnRzIGJlZm9yZSB0aGUgZmlyc3QgY2hpbGQgb2YKICAgICAqIHRoYXQgZWxlbWVudCBhbmQgZW5kcyBhZnRlciB0aGUgbGFzdCBjaGlsZCBvZiB0aGF0IGVsZW1lbnQuCiAgICAgKgogICAgICoJCWRvY3VtZW50U2VsZWN0aW9uLl9zZXRUbyggcGFyYWdyYXBoLCAnaW4nICk7CiAgICAgKgogICAgICogQ3JlYXRlcyBhIHJhbmdlIG9uIGFuIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvaXRlbX5JdGVtIGl0ZW19IHdoaWNoIHN0YXJ0cyBiZWZvcmUgdGhlIGl0ZW0gYW5kIGVuZHMganVzdCBhZnRlciB0aGUgaXRlbS4KICAgICAqCiAgICAgKgkJZG9jdW1lbnRTZWxlY3Rpb24uX3NldFRvKCBwYXJhZ3JhcGgsICdvbicgKTsKICAgICAqCiAgICAgKiAJCS8vIENsZWFycyBzZWxlY3Rpb24uIFJlbW92ZXMgYWxsIHJhbmdlcy4KICAgICAqCQlkb2N1bWVudFNlbGVjdGlvbi5fc2V0VG8oIG51bGwgKTsKICAgICAqCiAgICAgKiBgU2VsZWN0aW9uI19zZXRUbygpYCBtZXRob2QgYWxsb3cgcGFzc2luZyBhZGRpdGlvbmFsIG9wdGlvbnMgKGBiYWNrd2FyZGAsIGBmYWtlYCBhbmQgYGxhYmVsYCkgYXMgdGhlIGxhc3QgYXJndW1lbnQuCiAgICAgKgogICAgICoJCS8vIFNldHMgc2VsZWN0aW9uIGFzIGJhY2t3YXJkLgogICAgICoJCWRvY3VtZW50U2VsZWN0aW9uLl9zZXRUbyggcmFuZ2UsIHsgYmFja3dhcmQ6IHRydWUgfSApOwogICAgICoKICAgICAqIEZha2Ugc2VsZWN0aW9uIGRvZXMgbm90IHJlbmRlciBhcyBicm93c2VyIG5hdGl2ZSBzZWxlY3Rpb24gb3ZlciBzZWxlY3RlZCBlbGVtZW50cyBhbmQgaXMgaGlkZGVuIHRvIHRoZSB1c2VyLgogICAgICogVGhpcyB3YXksIG5vIG5hdGl2ZSBzZWxlY3Rpb24gVUkgYXJ0aWZhY3RzIGFyZSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIgYW5kIHNlbGVjdGlvbiBvdmVyIGVsZW1lbnRzIGNhbiBiZQogICAgICogcmVwcmVzZW50ZWQgaW4gb3RoZXIgd2F5LCBmb3IgZXhhbXBsZSBieSBhcHBseWluZyBwcm9wZXIgQ1NTIGNsYXNzLgogICAgICoKICAgICAqIEFkZGl0aW9uYWxseSBmYWtlJ3Mgc2VsZWN0aW9uIGxhYmVsIGNhbiBiZSBwcm92aWRlZC4gSXQgd2lsbCBiZSB1c2VkIHRvIGRlcyBjcmliZSBmYWtlIHNlbGVjdGlvbiBpbiBET00KICAgICAqIChhbmQgYmUgIHByb3Blcmx5IGhhbmRsZWQgYnkgc2NyZWVuIHJlYWRlcnMpLgogICAgICoKICAgICAqCQkvLyBDcmVhdGVzIGZha2Ugc2VsZWN0aW9uIHdpdGggbGFiZWwuCiAgICAgKgkJZG9jdW1lbnRTZWxlY3Rpb24uX3NldFRvKCByYW5nZSwgeyBmYWtlOiB0cnVlLCBsYWJlbDogJ2ZvbycgfSApOwogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBmaXJlcyBjaGFuZ2UKICAgICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3RhYmxlfSBzZWxlY3RhYmxlCiAgICAgKiBAcGFyYW0ge051bWJlcnwnYmVmb3JlJ3wnZW5kJ3wnYWZ0ZXInfCdvbid8J2luJ30gW3BsYWNlT3JPZmZzZXRdIFNldHMgcGxhY2Ugb3Igb2Zmc2V0IG9mIHRoZSBzZWxlY3Rpb24uCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmJhY2t3YXJkXSBTZXRzIHRoaXMgc2VsZWN0aW9uIGluc3RhbmNlIHRvIGJlIGJhY2t3YXJkLgogICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5mYWtlXSBTZXRzIHRoaXMgc2VsZWN0aW9uIGluc3RhbmNlIHRvIGJlIG1hcmtlZCBhcyBgZmFrZWAuCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMubGFiZWxdIExhYmVsIGZvciB0aGUgZmFrZSBzZWxlY3Rpb24uCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3NldFRvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0VG8oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucykgewogICAgICB0aGlzLl9zZWxlY3Rpb24uc2V0VG8oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucyk7CiAgICB9CiAgICAvKioKICAgICAqIE1vdmVzIHtAbGluayAjZm9jdXN9IHRvIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uCiAgICAgKgogICAgICogVGhlIGxvY2F0aW9uIGNhbiBiZSBzcGVjaWZpZWQgaW4gdGhlIHNhbWUgZm9ybSBhcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3ZpZXd+VmlldyNjcmVhdGVQb3NpdGlvbkF0IHZpZXcuY3JlYXRlUG9zaXRpb25BdCgpfQogICAgICogcGFyYW1ldGVycy4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAZmlyZXMgY2hhbmdlCiAgICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9pdGVtfkl0ZW18bW9kdWxlOmVuZ2luZS92aWV3L3Bvc2l0aW9uflBvc2l0aW9ufSBpdGVtT3JQb3NpdGlvbgogICAgICogQHBhcmFtIHtOdW1iZXJ8J2VuZCd8J2JlZm9yZSd8J2FmdGVyJ30gW29mZnNldF0gT2Zmc2V0IG9yIG9uZSBvZiB0aGUgZmxhZ3MuIFVzZWQgb25seSB3aGVuCiAgICAgKiBmaXJzdCBwYXJhbWV0ZXIgaXMgYSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2l0ZW1+SXRlbSB2aWV3IGl0ZW19LgogICAgICovCgogIH0sIHsKICAgIGtleTogIl9zZXRGb2N1cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEZvY3VzKGl0ZW1PclBvc2l0aW9uLCBvZmZzZXQpIHsKICAgICAgdGhpcy5fc2VsZWN0aW9uLnNldEZvY3VzKGl0ZW1PclBvc2l0aW9uLCBvZmZzZXQpOwogICAgfQogICAgLyoqCiAgICAgKiBGaXJlZCB3aGVuZXZlciBzZWxlY3Rpb24gcmFuZ2VzIGFyZSBjaGFuZ2VkIHRocm91Z2gge0BsaW5rIH5Eb2N1bWVudFNlbGVjdGlvbiBTZWxlY3Rpb24gQVBJfS4KICAgICAqCiAgICAgKiBAZXZlbnQgY2hhbmdlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXNGYWtlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmlzRmFrZTsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBmYWtlIHNlbGVjdGlvbiBsYWJlbC4KICAgICAqCiAgICAgKiBAc2VlICNfc2V0VG8KICAgICAqIEByZXR1cm5zIHtTdHJpbmd9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmFrZVNlbGVjdGlvbkxhYmVsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmZha2VTZWxlY3Rpb25MYWJlbDsKICAgIH0KICAgIC8qKgogICAgICogU2VsZWN0aW9uIGFuY2hvci4gQW5jaG9yIG1heSBiZSBkZXNjcmliZWQgYXMgYSBwb3NpdGlvbiB3aGVyZSB0aGUgc2VsZWN0aW9uIHN0YXJ0cy4gVG9nZXRoZXIgd2l0aAogICAgICoge0BsaW5rICNmb2N1cyBmb2N1c30gdGhleSBkZWZpbmUgdGhlIGRpcmVjdGlvbiBvZiBzZWxlY3Rpb24sIHdoaWNoIGlzIGltcG9ydGFudAogICAgICogd2hlbiBleHBhbmRpbmcvc2hyaW5raW5nIHNlbGVjdGlvbi4gQW5jaG9yIGlzIGFsd2F5cyB0aGUgc3RhcnQgb3IgZW5kIG9mIHRoZSBtb3N0IHJlY2VudCBhZGRlZCByYW5nZS4KICAgICAqIEl0IG1heSBiZSBhIGJpdCB1bmludHVpdGl2ZSB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEBzZWUgI2ZvY3VzCiAgICAgKiBAdHlwZSB7bW9kdWxlOmVuZ2luZS92aWV3L3Bvc2l0aW9uflBvc2l0aW9ufQogICAgICovCgogIH0sIHsKICAgIGtleTogImFuY2hvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5hbmNob3I7CiAgICB9CiAgICAvKioKICAgICAqIFNlbGVjdGlvbiBmb2N1cy4gRm9jdXMgaXMgYSBwb3NpdGlvbiB3aGVyZSB0aGUgc2VsZWN0aW9uIGVuZHMuCiAgICAgKgogICAgICogQHNlZSAjYW5jaG9yCiAgICAgKiBAdHlwZSB7bW9kdWxlOmVuZ2luZS92aWV3L3Bvc2l0aW9uflBvc2l0aW9ufQogICAgICovCgogIH0sIHsKICAgIGtleTogImZvY3VzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmZvY3VzOwogICAgfQogICAgLyoqCiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuIFNlbGVjdGlvbiBpcyBjb2xsYXBzZWQgd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSByYW5nZSB3aGljaCBpcwogICAgICogY29sbGFwc2VkLgogICAgICoKICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICovCgogIH0sIHsKICAgIGtleTogImlzQ29sbGFwc2VkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmlzQ29sbGFwc2VkOwogICAgfQogICAgLyoqCiAgICAgKiBSZXR1cm5zIG51bWJlciBvZiByYW5nZXMgaW4gc2VsZWN0aW9uLgogICAgICoKICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmFuZ2VDb3VudCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5yYW5nZUNvdW50OwogICAgfQogICAgLyoqCiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUge0BsaW5rICNmb2N1c30gcHJlY2VkZXMge0BsaW5rICNhbmNob3J9LgogICAgICoKICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICovCgogIH0sIHsKICAgIGtleTogImlzQmFja3dhcmQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uaXNCYWNrd2FyZDsKICAgIH0KICAgIC8qKgogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lZGl0YWJsZWVsZW1lbnR+RWRpdGFibGVFbGVtZW50IEVkaXRhYmxlRWxlbWVudH0gaW5zdGFuY2UgdGhhdCBjb250YWlucyB0aGlzIHNlbGVjdGlvbiwgb3IgYG51bGxgCiAgICAgKiBpZiB0aGUgc2VsZWN0aW9uIGlzIG5vdCBpbnNpZGUgYW4gZWRpdGFibGUgZWxlbWVudC4KICAgICAqCiAgICAgKiBAdHlwZSB7bW9kdWxlOmVuZ2luZS92aWV3L2VkaXRhYmxlZWxlbWVudH5FZGl0YWJsZUVsZW1lbnR8bnVsbH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJlZGl0YWJsZUVsZW1lbnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZWRpdGFibGVFbGVtZW50OwogICAgfQogICAgLyoqCiAgICAgKiBVc2VkIGZvciB0aGUgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb24jaXNFcXVhbH0gbWV0aG9kLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfcmFuZ2VzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLl9yYW5nZXM7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRG9jdW1lbnRTZWxlY3Rpb247Cn0oKTsKCmV4cG9ydCB7IERvY3VtZW50U2VsZWN0aW9uIGFzIGRlZmF1bHQgfTsKbWl4KERvY3VtZW50U2VsZWN0aW9uLCBFbWl0dGVyTWl4aW4pOw=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js"],"names":["Selection","mix","EmitterMixin","DocumentSelection","selectable","placeOrOffset","options","_selection","delegate","to","setTo","getRanges","getFirstRange","getLastRange","getFirstPosition","getLastPosition","getSelectedElement","otherSelection","isEqual","isSimilar","type","itemOrPosition","offset","setFocus","isFake","fakeSelectionLabel","anchor","focus","isCollapsed","rangeCount","isBackward","editableElement","_ranges"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentselection\n */\n\nimport Selection from './selection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates new DocumentSelection instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = new DocumentSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = new DocumentSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tconst selection = new DocumentSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = new DocumentSelection( otherSelection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tconst selection = new DocumentSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = new DocumentSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = new DocumentSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = new DocumentSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Selection is used internally (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/selection~Selection}\n\t\t */\n\t\tthis._selection = new Selection();\n\n\t\t// Delegate change event to be fired on DocumentSelection instance.\n\t\tthis._selection.delegate( 'change' ).to( this );\n\n\t\t// Set selection data.\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #_setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._selection.isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #_setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._selection.fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\treturn this._selection.editableElement;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tyield* this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\treturn this._selection.isEqual( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\treturn this._selection.isSimilar( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocSelection.is( 'selection' ); // -> true\n\t *\t\tdocSelection.is( 'documentSelection' ); // -> true\n\t *\t\tdocSelection.is( 'view:selection' ); // -> true\n\t *\t\tdocSelection.is( 'view:documentSelection' ); // -> true\n\t *\n\t *\t\tdocSelection.is( 'model:documentSelection' ); // -> false\n\t *\t\tdocSelection.is( 'element' ); // -> false\n\t *\t\tdocSelection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'view:selection' ||\n\t\t\ttype == 'view:documentSelection';\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tdocumentSelection._setTo( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tdocumentSelection._setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tdocumentSelection._setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tdocumentSelection._setTo( null );\n\t *\n\t * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tdocumentSelection._setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tdocumentSelection._setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~DocumentSelection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( DocumentSelection, EmitterMixin );\n"]}]}