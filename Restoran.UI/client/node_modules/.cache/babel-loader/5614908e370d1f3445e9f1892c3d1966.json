{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\dataprocessor\\htmldataprocessor.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\dataprocessor\\htmldataprocessor.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSBlbmdpbmUvZGF0YXByb2Nlc3Nvci9odG1sZGF0YXByb2Nlc3NvcgogKi8KCi8qIGdsb2JhbHMgZG9jdW1lbnQsIERPTVBhcnNlciAqLwppbXBvcnQgQmFzaWNIdG1sV3JpdGVyIGZyb20gJy4vYmFzaWNodG1sd3JpdGVyJzsKaW1wb3J0IERvbUNvbnZlcnRlciBmcm9tICcuLi92aWV3L2RvbWNvbnZlcnRlcic7Ci8qKgogKiBUaGUgSFRNTCBkYXRhIHByb2Nlc3NvciBjbGFzcy4KICogVGhpcyBkYXRhIHByb2Nlc3NvciBpbXBsZW1lbnRhdGlvbiB1c2VzIEhUTUwgYXMgaW5wdXQgYW5kIG91dHB1dCBkYXRhLgogKgogKiBAaW1wbGVtZW50cyBtb2R1bGU6ZW5naW5lL2RhdGFwcm9jZXNzb3IvZGF0YXByb2Nlc3Nvcn5EYXRhUHJvY2Vzc29yCiAqLwoKdmFyIEh0bWxEYXRhUHJvY2Vzc29yID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgSFRNTCBkYXRhIHByb2Nlc3NvciBjbGFzcy4KICAgKgogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50fSBkb2N1bWVudCBUaGUgdmlldyBkb2N1bWVudCBpbnN0YW5jZS4KICAgKi8KICBmdW5jdGlvbiBIdG1sRGF0YVByb2Nlc3Nvcihkb2N1bWVudCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEh0bWxEYXRhUHJvY2Vzc29yKTsKCiAgICAvKioKICAgICAqIEEgRE9NIHBhcnNlciBpbnN0YW5jZSB1c2VkIHRvIHBhcnNlIGFuIEhUTUwgc3RyaW5nIHRvIGFuIEhUTUwgZG9jdW1lbnQuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIge0RPTVBhcnNlcn0KICAgICAqLwogICAgdGhpcy5fZG9tUGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogICAgLyoqCiAgICAgKiBBIERPTSBjb252ZXJ0ZXIgdXNlZCB0byBjb252ZXJ0IERPTSBlbGVtZW50cyB0byB2aWV3IGVsZW1lbnRzLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG9tY29udmVydGVyfkRvbUNvbnZlcnRlcn0KICAgICAqLwoKICAgIHRoaXMuX2RvbUNvbnZlcnRlciA9IG5ldyBEb21Db252ZXJ0ZXIoZG9jdW1lbnQsIHsKICAgICAgYmxvY2tGaWxsZXJNb2RlOiAnbmJzcCcKICAgIH0pOwogICAgLyoqCiAgICAgKiBBIGJhc2ljIEhUTUwgd3JpdGVyIGluc3RhbmNlIHVzZWQgdG8gY29udmVydCBET00gZWxlbWVudHMgdG8gYW4gSFRNTCBzdHJpbmcuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIge21vZHVsZTplbmdpbmUvZGF0YXByb2Nlc3Nvci9iYXNpY2h0bWx3cml0ZXJ+QmFzaWNIdG1sV3JpdGVyfQogICAgICovCgogICAgdGhpcy5faHRtbFdyaXRlciA9IG5ldyBCYXNpY0h0bWxXcml0ZXIoKTsKICB9CiAgLyoqCiAgICogQ29udmVydHMgYSBwcm92aWRlZCB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50ZnJhZ21lbnR+RG9jdW1lbnRGcmFnbWVudCBkb2N1bWVudCBmcmFnbWVudH0KICAgKiB0byBkYXRhIGZvcm1hdCAmbWRhc2g7IGluIHRoaXMgY2FzZSB0byBhbiBIVE1MIHN0cmluZy4KICAgKgogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50ZnJhZ21lbnR+RG9jdW1lbnRGcmFnbWVudH0gdmlld0ZyYWdtZW50CiAgICogQHJldHVybnMge1N0cmluZ30gSFRNTCBzdHJpbmcuCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoSHRtbERhdGFQcm9jZXNzb3IsIFt7CiAgICBrZXk6ICJ0b0RhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvRGF0YSh2aWV3RnJhZ21lbnQpIHsKICAgICAgLy8gQ29udmVydCB2aWV3IERvY3VtZW50RnJhZ21lbnQgdG8gRE9NIERvY3VtZW50RnJhZ21lbnQuCiAgICAgIHZhciBkb21GcmFnbWVudCA9IHRoaXMuX2RvbUNvbnZlcnRlci52aWV3VG9Eb20odmlld0ZyYWdtZW50LCBkb2N1bWVudCk7IC8vIENvbnZlcnQgRE9NIERvY3VtZW50RnJhZ21lbnQgdG8gSFRNTCBvdXRwdXQuCgoKICAgICAgcmV0dXJuIHRoaXMuX2h0bWxXcml0ZXIuZ2V0SHRtbChkb21GcmFnbWVudCk7CiAgICB9CiAgICAvKioKICAgICAqIENvbnZlcnRzIHRoZSBwcm92aWRlZCBIVE1MIHN0cmluZyB0byBhIHZpZXcgdHJlZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBBbiBIVE1MIHN0cmluZy4KICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudGZyYWdtZW50fkRvY3VtZW50RnJhZ21lbnR8bnVsbH0gQSBjb252ZXJ0ZWQgdmlldyBlbGVtZW50LgogICAgICovCgogIH0sIHsKICAgIGtleTogInRvVmlldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9WaWV3KGRhdGEpIHsKICAgICAgLy8gQ29udmVydCBpbnB1dCBIVE1MIGRhdGEgdG8gRE9NIERvY3VtZW50RnJhZ21lbnQuCiAgICAgIHZhciBkb21GcmFnbWVudCA9IHRoaXMuX3RvRG9tKGRhdGEpOyAvLyBDb252ZXJ0IERPTSBEb2N1bWVudEZyYWdtZW50IHRvIHZpZXcgRG9jdW1lbnRGcmFnbWVudC4KCgogICAgICByZXR1cm4gdGhpcy5fZG9tQ29udmVydGVyLmRvbVRvVmlldyhkb21GcmFnbWVudCk7CiAgICB9CiAgICAvKioKICAgICAqIENvbnZlcnRzIGFuIEhUTUwgc3RyaW5nIHRvIGl0cyBET00gcmVwcmVzZW50YXRpb24uIFJldHVybnMgYSBkb2N1bWVudCBmcmFnbWVudCBjb250YWluaW5nIG5vZGVzIHBhcnNlZCBmcm9tCiAgICAgKiB0aGUgcHJvdmlkZWQgZGF0YS4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEKICAgICAqIEByZXR1cm5zIHtEb2N1bWVudEZyYWdtZW50fQogICAgICovCgogIH0sIHsKICAgIGtleTogIl90b0RvbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3RvRG9tKGRhdGEpIHsKICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5fZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyhkYXRhLCAndGV4dC9odG1sJyk7CgogICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgIHZhciBub2RlcyA9IGRvY3VtZW50LmJvZHkuY2hpbGROb2RlczsKCiAgICAgIHdoaWxlIChub2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZXNbMF0pOwogICAgICB9CgogICAgICByZXR1cm4gZnJhZ21lbnQ7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSHRtbERhdGFQcm9jZXNzb3I7Cn0oKTsKCmV4cG9ydCB7IEh0bWxEYXRhUHJvY2Vzc29yIGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"],"names":["BasicHtmlWriter","DomConverter","HtmlDataProcessor","document","_domParser","DOMParser","_domConverter","blockFillerMode","_htmlWriter","viewFragment","domFragment","viewToDom","getHtml","data","_toDom","domToView","parseFromString","fragment","createDocumentFragment","nodes","body","childNodes","length","appendChild"],"mappings":";;;AAAA;;;;;AAKA;;;;AAIA;AAEA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;;;;;;;IAMqBC,iB;;;AACpB;;;;;AAKA,6BAAaC,QAAb,EAAwB;AAAA;;AACvB;;;;;;AAMA,SAAKC,UAAL,GAAkB,IAAIC,SAAJ,EAAlB;AAEA;;;;;;;AAMA,SAAKC,aAAL,GAAqB,IAAIL,YAAJ,CAAkBE,QAAlB,EAA4B;AAAEI,MAAAA,eAAe,EAAE;AAAnB,KAA5B,CAArB;AAEA;;;;;;;AAMA,SAAKC,WAAL,GAAmB,IAAIR,eAAJ,EAAnB;AACA;AAED;;;;;;;;;;;2BAOQS,Y,EAAe;AACtB;AACA,UAAMC,WAAW,GAAG,KAAKJ,aAAL,CAAmBK,SAAnB,CAA8BF,YAA9B,EAA4CN,QAA5C,CAApB,CAFsB,CAItB;;;AACA,aAAO,KAAKK,WAAL,CAAiBI,OAAjB,CAA0BF,WAA1B,CAAP;AACA;AAED;;;;;;;;;2BAMQG,I,EAAO;AACd;AACA,UAAMH,WAAW,GAAG,KAAKI,MAAL,CAAaD,IAAb,CAApB,CAFc,CAId;;;AACA,aAAO,KAAKP,aAAL,CAAmBS,SAAnB,CAA8BL,WAA9B,CAAP;AACA;AAED;;;;;;;;;;;2BAQQG,I,EAAO;AACd,UAAMV,QAAQ,GAAG,KAAKC,UAAL,CAAgBY,eAAhB,CAAiCH,IAAjC,EAAuC,WAAvC,CAAjB;;AACA,UAAMI,QAAQ,GAAGd,QAAQ,CAACe,sBAAT,EAAjB;AACA,UAAMC,KAAK,GAAGhB,QAAQ,CAACiB,IAAT,CAAcC,UAA5B;;AAEA,aAAQF,KAAK,CAACG,MAAN,GAAe,CAAvB,EAA2B;AAC1BL,QAAAA,QAAQ,CAACM,WAAT,CAAsBJ,KAAK,CAAE,CAAF,CAA3B;AACA;;AAED,aAAOF,QAAP;AACA;;;;;;SA/EmBf,iB","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t *\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( document, { blockFillerMode: 'nbsp' } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n"]}]}