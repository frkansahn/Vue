{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\matcher.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\matcher.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js"],"names":["Matcher","_patterns","add","pattern","item","RegExp","name","classes","push","element","singleElement","match","isElementMatching","results","length","matchName","attributes","matchAttributes","matchClasses","styles","matchStyles","test","patterns","hasAttribute","attribute","getAttribute","getClassNames","hasClass","hasStyle","style","getStyle"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/matcher\n */\n\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n\t/**\n\t * Creates new instance of Matcher.\n\t *\n\t * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\n\t * more information.\n\t */\n\tconstructor( ...pattern ) {\n\t\t/**\n\t\t * @private\n\t\t * @type {Array<String|RegExp|Object>}\n\t\t */\n\t\tthis._patterns = [];\n\n\t\tthis.add( ...pattern );\n\t}\n\n\t/**\n\t * Adds pattern or patterns to matcher instance.\n\t *\n\t *\t\t// String.\n\t *\t\tmatcher.add( 'div' );\n\t *\n\t *\t\t// Regular expression.\n\t *\t\tmatcher.add( /^\\w/ );\n\t *\n\t *\t\t// Single class.\n\t *\t\tmatcher.add( {\n\t *\t\t\tclasses: 'foobar'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n\t *\n\t * Multiple patterns can be added in one call:\n\t *\n\t * \t\tmatcher.add( 'div', { classes: 'foobar' } );\n\t *\n\t * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\n\t * is provided it will be used to match element's name. Pattern can be also provided in a form\n\t * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n\t * Function's return value will be stored under `match` key of the object returned from\n\t * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n\t * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\n\t * @param {Object} [pattern.attributes] Object with key-value pairs representing attributes to match. Each object key\n\t * represents attribute name. Value under that key can be either:\n\t * * `true` - then attribute is just required (can be empty),\n\t * * a string - then attribute has to be equal, or\n\t * * a regular expression - then attribute has to match the expression.\n\t * @param {String|RegExp|Array} [pattern.classes] Class name or array of class names to match. Each name can be\n\t * provided in a form of string or regular expression.\n\t * @param {Object} [pattern.styles] Object with key-value pairs representing styles to match. Each object key\n\t * represents style name. Value under that key can be either a string or a regular expression and it will be used\n\t * to match style value.\n\t */\n\tadd( ...pattern ) {\n\t\tfor ( let item of pattern ) {\n\t\t\t// String or RegExp pattern is used as element's name.\n\t\t\tif ( typeof item == 'string' || item instanceof RegExp ) {\n\t\t\t\titem = { name: item };\n\t\t\t}\n\n\t\t\t// Single class name/RegExp can be provided.\n\t\t\tif ( item.classes && ( typeof item.classes == 'string' || item.classes instanceof RegExp ) ) {\n\t\t\t\titem.classes = [ item.classes ];\n\t\t\t}\n\n\t\t\tthis._patterns.push( item );\n\t\t}\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns match information about first found\n\t * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n\t *\n\t * Example of returned object:\n\t *\n\t *\t\t{\n\t *\t\t\telement: <instance of found element>,\n\t *\t\t\tpattern: <pattern used to match found element>,\n\t *\t\t\tmatch: {\n\t *\t\t\t\tname: true,\n\t *\t\t\t\tattributes: [ 'title', 'href' ],\n\t *\t\t\t\tclasses: [ 'foo' ],\n\t *\t\t\t\tstyles: [ 'color', 'position' ]\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#matchAll\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Object|null} result\n\t * @returns {module:engine/view/element~Element} result.element Matched view element.\n\t * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\n\t * @returns {Object} result.match Object representing matched element parts.\n\t * @returns {Boolean} [result.match.name] True if name of the element was matched.\n\t * @returns {Array} [result.match.attributes] Array with matched attribute names.\n\t * @returns {Array} [result.match.classes] Array with matched class names.\n\t * @returns {Array} [result.match.styles] Array with matched style names.\n\t */\n\tmatch( ...element ) {\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns array of match information with all found\n\t * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#match\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\n\t * see {@link module:engine/view/matcher~Matcher#match match method} description.\n\t */\n\tmatchAll( ...element ) {\n\t\tconst results = [];\n\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\tresults.push( {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results.length > 0 ? results : null;\n\t}\n\n\t/**\n\t * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n\t * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n\t *\n\t * @returns {String|null} Element name trying to match.\n\t */\n\tgetElementName() {\n\t\tif ( this._patterns.length !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst pattern = this._patterns[ 0 ];\n\t\tconst name = pattern.name;\n\n\t\treturn ( typeof pattern != 'function' && name && !( name instanceof RegExp ) ) ? name : null;\n\t}\n}\n\n// Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n// If element cannot be matched to provided pattern - returns `null`.\n//\n// @param {module:engine/view/element~Element} element\n// @param {Object|String|RegExp|Function} pattern\n// @returns {Object|null} Returns object with match information or null if element is not matching.\nfunction isElementMatching( element, pattern ) {\n\t// If pattern is provided as function - return result of that function;\n\tif ( typeof pattern == 'function' ) {\n\t\treturn pattern( element );\n\t}\n\n\tconst match = {};\n\t// Check element's name.\n\tif ( pattern.name ) {\n\t\tmatch.name = matchName( pattern.name, element.name );\n\n\t\tif ( !match.name ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's attributes.\n\tif ( pattern.attributes ) {\n\t\tmatch.attributes = matchAttributes( pattern.attributes, element );\n\n\t\tif ( !match.attributes ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's classes.\n\tif ( pattern.classes ) {\n\t\tmatch.classes = matchClasses( pattern.classes, element );\n\n\t\tif ( !match.classes ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Check element's styles.\n\tif ( pattern.styles ) {\n\t\tmatch.styles = matchStyles( pattern.styles, element );\n\n\t\tif ( !match.styles ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if name can be matched by provided pattern.\n//\n// @param {String|RegExp} pattern\n// @param {String} name\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\nfunction matchName( pattern, name ) {\n\t// If pattern is provided as RegExp - test against this regexp.\n\tif ( pattern instanceof RegExp ) {\n\t\treturn pattern.test( name );\n\t}\n\n\treturn pattern === name;\n}\n\n// Checks if attributes of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\nfunction matchAttributes( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasAttribute( name ) ) {\n\t\t\tconst attribute = element.getAttribute( name );\n\n\t\t\tif ( pattern === true ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else if ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( attribute ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( attribute === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if classes of provided element can be matched against provided patterns.\n//\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\nfunction matchClasses( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const pattern of patterns ) {\n\t\tif ( pattern instanceof RegExp ) {\n\t\t\tconst classes = element.getClassNames();\n\n\t\t\tfor ( const name of classes ) {\n\t\t\t\tif ( pattern.test( name ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( match.length === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if ( element.hasClass( pattern ) ) {\n\t\t\tmatch.push( pattern );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if styles of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\n// used as style name. Value of each key can be a string or regular expression to match against style value.\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\nfunction matchStyles( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasStyle( name ) ) {\n\t\t\tconst style = element.getStyle( name );\n\n\t\t\tif ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( style ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( style === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n/**\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\n * if a view element fits in a group of view elements described by the pattern.\n *\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\n *\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\n *\n *\t\t// Match any element with name equal to 'div'.\n *\t\tconst pattern = 'div';\n *\n *\t\t// Match any element which name starts on 'p'.\n *\t\tconst pattern = /^p/;\n *\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\n *\n *\t\t// Match view element's name.\n *\t\tconst pattern = { name: /^p/ };\n *\n *\t\t// Match view element which has matching attributes.\n *\t\tconst pattern = {\n *\t\t\tattributes: {\n *\t\t\t\ttitle: 'foobar',\t// Attribute title should equal 'foobar'.\n *\t\t\t\tfoo: /^\\w+/,\t\t// Attribute foo should match /^\\w+/ regexp.\n *\t\t\t\tbar: true\t\t\t// Attribute bar should be set (can be empty).\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Match view element which has given class.\n *\t\tconst pattern = {\n *\t\t\tclasses: 'foobar'\n *\t\t};\n *\n *\t\t// Match view element class using regular expression.\n *\t\tconst pattern = {\n *\t\t\tclasses: /foo.../\n *\t\t};\n *\n *\t\t// Multiple classes to match.\n *\t\tconst pattern = {\n *\t\t\tclasses: [ 'baz', 'bar', /foo.../ ]\n *\t\t};\n *\n *\t\t// Match view element which has given styles.\n *\t\tconst pattern = {\n *\t\t\tstyles: {\n *\t\t\t\tposition: 'absolute',\n *\t\t\t\tcolor: /^\\w*blue$/\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Pattern with multiple properties.\n *\t\tconst pattern = {\n *\t\t\tname: 'span',\n *\t\t\tstyles: {\n *\t\t\t\t'font-weight': 'bold'\n *\t\t\t},\n *\t\t\tclasses: 'highlighted'\n *\t\t};\n *\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\n * returned by {@link ~Matcher#match} call.\n *\n *\t\t// Match an empty <div> element.\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'div' && element.childCount > 0 ) {\n *\t\t\t\t// Return which part of the element was matched.\n *\t\t\t\treturn { name: true };\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n *\t\t// Match a <p> element with big font (\"heading-like\" element).\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'p' ) {\n *\t\t\t\tconst fontSize = element.getStyle( 'font-size' );\n *\t\t\t\tconst size = fontSize.match( /(\\d+)/px );\n *\n *\t\t\t\tif ( size && Number( size[ 1 ] ) > 26 ) {\n *\t\t\t\t\treturn { name: true, attribute: [ 'font-size' ] };\n *\t\t\t\t}\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\n *\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\n *\n * @property {String|RegExp} [name] View element name to match.\n * @property {String|RegExp|Array.<String|RegExp>} [classes] View element's class name(s) to match.\n * @property {Object} [styles] Object with key-value pairs representing styles to match.\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\n * @property {Object} [attributes] Object with key-value pairs representing attributes to match.\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\n */\n"]}]}