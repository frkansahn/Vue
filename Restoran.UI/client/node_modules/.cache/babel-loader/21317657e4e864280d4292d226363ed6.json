{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\selection.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\selection.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js"],"names":["Position","Node","Range","EmitterMixin","CKEditorError","mix","isIterable","Selection","selectable","placeOrOffset","options","_lastRangeBackward","_ranges","_attrs","Map","setTo","otherSelection","rangeCount","anchor","isEqual","focus","thisRange","found","otherRange","range","start","end","first","isBefore","last","isAfter","getFirstRange","clone","lastRange","getLastRange","_setRanges","getRanges","isBackward","backward","_createIn","_createOn","undefined","_createAt","newRanges","isLastBackward","Array","from","anyNewRange","some","newRange","every","oldRange","length","_removeAllRanges","_pushRange","fire","directChange","itemOrPosition","offset","newFocus","compareWith","_popRange","key","get","entries","keys","has","hasAttribute","delete","attributeKeys","value","getAttribute","set","getContainedElement","type","visited","WeakSet","startBlock","getParentBlock","isTopBlockInRange","getWalker","block","item","isUnvisitedTopBlock","endBlock","isTouching","element","root","limitStartPosition","limitEndPosition","getFirstPosition","getLastPosition","_checkRange","push","i","isIntersecting","addedRange","intersectingRange","pop","isCollapsed","isUnvisitedBlock","add","document","model","schema","isBlock","parent","position","ancestors","getAncestors","parentFirst","includeSelf","hasParentLimit","find","isLimit","forEach","parentBlock","findAncestorBlock","isParentInRange","containsRange","node"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Selection {\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tconstructor( selectable, placeOrOffset, options ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, placeOrOffset, options );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n\t * by dragging the mouse, the anchor is where the user pressed the mouse button (the beggining of the selection).\n\t *\n\t * Anchor and {@link #focus} define the direction of the selection, which is important\n\t * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n\t *\n\t * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n\t * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n\t * by dragging the mouse, the focus is where the mouse cursor is.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n\t * and it is collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of ranges in the selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n\t * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable object that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield new Range( range.start, range.end );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? new Range( first.start, first.end ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? new Range( last.start, last.end ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? first.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else if ( placeOrOffset !== undefined ) {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\t[ this, selectable ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set the selection to the given place.\n\t\t\t *\n\t\t\t * Invalid parameters were specified when setting the selection. Common issues:\n\t\t\t *\n\t\t\t * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n\t\t\t * a real {@link module:engine/model/text~Text}.\n\t\t\t * * View nodes were passed instead of model nodes.\n\t\t\t * * `null`/`undefined` was passed.\n\t\t\t *\n\t\t\t * @error model-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setTo-not-selectable: Cannot set the selection to the given place.',\n\t\t\t\t[ this, selectable ]\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\t/**\n\t\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n\t\t\t\t *\n\t\t\t\t * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n\t\t\t\t * Common mistakes leading to this error are:\n\t\t\t\t *\n\t\t\t\t * * using DOM `Range` object,\n\t\t\t\t * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-set-ranges-not-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-set-ranges-not-range: ' +\n\t\t\t\t\t'Selection range set to an object that is not an instance of model.Range.',\n\t\t\t\t\t[ this, newRanges ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\t[ this, itemOrPosition ]\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change:range} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.getFirstRange().getContainedElement();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'model:selection';\n\t}\n\n\t/**\n\t * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n\t * but will not return blocks nested in other blocks.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<blockQuote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</blockQuote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * If the selection is inside a block all the inner blocks (A & B) are returned:\n\t *\n\t * \t\t<block>\n\t *\t\t\t<blockA>[a</blockA>\n\t * \t\t\t<blockB>b]</blockB>\n\t * \t\t</block>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\t// Get start block of range in case of a collapsed range.\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock && isTopBlockInRange( startBlock, range ) ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tconst block = value.item;\n\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedTopBlock( block, visited, range ) ) {\n\t\t\t\t\tyield block;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position._createAt( endBlock, 0 ) ) && isTopBlockInRange( endBlock, range ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position._createAt( element, 0 );\n\t\tconst limitEndPosition = Position._createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range in the selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.',\n\t\t\t\t\t[ this, range ],\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * Fired when selection range(s) changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n\t * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed because the structure of the model has been changed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t */\n\n\t/**\n\t * Fired when selection attribute changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n\t * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed in the model and its attributes were refreshed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlock( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.root.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Checks if the given element is a $block was not previously visited and is a top block in a range.\nfunction isUnvisitedTopBlock( element, visited, range ) {\n\treturn isUnvisitedBlock( element, visited ) && isTopBlockInRange( element, range );\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// It will search until first ancestor that is a limit element.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst element = position.parent;\n\tconst schema = element.root.document.model.schema;\n\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\n\tlet hasParentLimit = false;\n\n\tconst block = ancestors.find( element => {\n\t\t// Stop searching after first parent node that is limit element.\n\t\tif ( hasParentLimit ) {\n\t\t\treturn false;\n\t\t}\n\n\t\thasParentLimit = schema.isLimit( element );\n\n\t\treturn !hasParentLimit && isUnvisitedBlock( element, visited );\n\t} );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n\n// Checks if the blocks is not nested in other block inside a range.\n//\n// @param {module:engine/model/elmenent~Element} block Block to check.\n// @param {module:engine/model/range~Range} range Range to check.\nfunction isTopBlockInRange( block, range ) {\n\tconst parentBlock = findAncestorBlock( block );\n\n\tif ( !parentBlock ) {\n\t\treturn true;\n\t}\n\n\t// Add loose flag to check as parentRange can be equal to range.\n\tconst isParentInRange = range.containsRange( Range._createOn( parentBlock ), true );\n\n\treturn !isParentInRange;\n}\n\n// Returns first ancestor block of a node.\n//\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/node~Node|undefined}\nfunction findAncestorBlock( node ) {\n\tconst schema = node.root.document.model.schema;\n\n\tlet parent = node.parent;\n\n\twhile ( parent ) {\n\t\tif ( schema.isBlock( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/model/selection~Selection#setTo}\n *\n * @typedef {\n *     module:engine/model/selection~Selection|\n *     module:engine/model/documentselection~DocumentSelection|\n *     module:engine/model/position~Position|\n *     module:engine/model/range~Range|\n *     module:engine/model/node~Node|\n *     Iterable.<module:engine/model/range~Range>|\n *     null\n * } module:engine/model/selection~Selectable\n */\n"]}]}