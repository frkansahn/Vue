{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\plugin.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\plugin.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwoKLyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIwLCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGNvcmUvcGx1Z2luCiAqLwppbXBvcnQgT2JzZXJ2YWJsZU1peGluIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL29ic2VydmFibGVtaXhpbic7CmltcG9ydCBtaXggZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvbWl4JzsKLyoqCiAqIFRoZSBiYXNlIGNsYXNzIGZvciBDS0VkaXRvciBwbHVnaW4gY2xhc3Nlcy4KICoKICogQGltcGxlbWVudHMgbW9kdWxlOmNvcmUvcGx1Z2luflBsdWdpbkludGVyZmFjZQogKiBAbWl4ZXMgbW9kdWxlOnV0aWxzL29ic2VydmFibGVtaXhpbn5PYnNlcnZhYmxlTWl4aW4KICovCgp2YXIgUGx1Z2luID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQGluaGVyaXREb2MKICAgKi8KICBmdW5jdGlvbiBQbHVnaW4oZWRpdG9yKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1Z2luKTsKCiAgICAvKioKICAgICAqIFRoZSBlZGl0b3IgaW5zdGFuY2UuCiAgICAgKgogICAgICogTm90ZSB0aGF0IG1vc3QgZWRpdG9ycyBpbXBsZW1lbnQgdGhlIHtAbGluayBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yd2l0aHVpfkVkaXRvcldpdGhVSX0gaW50ZXJmYWNlIGluIGFkZGl0aW9uCiAgICAgKiB0byB0aGUgYmFzZSB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3J9IGludGVyZmFjZS4gSG93ZXZlciwgZWRpdG9ycyB3aXRoIGFuIGV4dGVybmFsIFVJCiAgICAgKiAoaS5lLiBCb290c3RyYXAtYmFzZWQpIG9yIGEgaGVhZGxlc3MgZWRpdG9yIG1heSBub3QgaW1wbGVtZW50IHRoZSB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcndpdGh1aX5FZGl0b3JXaXRoVUl9CiAgICAgKiBpbnRlcmZhY2UuCiAgICAgKgogICAgICogQmVjYXVzZSBvZiBhYm92ZSwgdG8gbWFrZSBwbHVnaW5zIG1vcmUgdW5pdmVyc2FsLCBpdCBpcyByZWNvbW1lbmRlZCB0byBzcGxpdCBmZWF0dXJlcyBpbnRvOgogICAgICogIC0gVGhlICJlZGl0aW5nIiBwYXJ0IHRoYXQgb25seSB1c2VzIHRoZSB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3J9IGludGVyZmFjZS4KICAgICAqICAtIFRoZSAiVUkiIHBhcnQgdGhhdCB1c2VzIGJvdGggdGhlIHtAbGluayBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcn0gaW50ZXJmYWNlIGFuZAogICAgICogIHRoZSB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcndpdGh1aX5FZGl0b3JXaXRoVUl9IGludGVyZmFjZS4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge21vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yfSAjZWRpdG9yCiAgICAgKi8KICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yOwogICAgLyoqCiAgICAgKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciBhIHBsdWdpbiBpcyBlbmFibGVkIG9yIGRpc2FibGVkLgogICAgICogQSBkaXNhYmxlZCBwbHVnaW4gd2lsbCBub3QgdHJhbnNmb3JtIHRleHQuCiAgICAgKgogICAgICogUGx1Z2luIGNhbiBiZSBzaW1wbHkgZGlzYWJsZWQgbGlrZSB0aGF0OgogICAgICoKICAgICAqCQkvLyBEaXNhYmxlIHRoZSBwbHVnaW4gc28gdGhhdCBubyB0b29sYmFycyBhcmUgdmlzaWJsZS4KICAgICAqCQllZGl0b3IucGx1Z2lucy5nZXQoICdUZXh0VHJhbnNmb3JtYXRpb24nICkuaXNFbmFibGVkID0gZmFsc2U7CiAgICAgKgogICAgICogWW91IGNhbiBhbHNvIHVzZSB7QGxpbmsgI2ZvcmNlRGlzYWJsZWR9IG1ldGhvZC4KICAgICAqCiAgICAgKiBAb2JzZXJ2YWJsZQogICAgICogQHJlYWRvbmx5CiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSAjaXNFbmFibGVkCiAgICAgKi8KCiAgICB0aGlzLnNldCgnaXNFbmFibGVkJywgdHJ1ZSk7CiAgICAvKioKICAgICAqIEhvbGRzIGlkZW50aWZpZXJzIGZvciB7QGxpbmsgI2ZvcmNlRGlzYWJsZWR9IG1lY2hhbmlzbS4KICAgICAqCiAgICAgKiBAdHlwZSB7U2V0LjxTdHJpbmc+fQogICAgICogQHByaXZhdGUKICAgICAqLwoKICAgIHRoaXMuX2Rpc2FibGVTdGFjayA9IG5ldyBTZXQoKTsKICB9CiAgLyoqCiAgICogRGlzYWJsZXMgdGhlIHBsdWdpbi4KICAgKgogICAqIFBsdWdpbiBtYXkgYmUgZGlzYWJsZWQgYnkgbXVsdGlwbGUgZmVhdHVyZXMgb3IgYWxnb3JpdGhtcyAoYXQgb25jZSkuIFdoZW4gZGlzYWJsaW5nIGEgcGx1Z2luLCB1bmlxdWUgaWQgc2hvdWxkIGJlIHBhc3NlZAogICAqIChlLmcuIGZlYXR1cmUgbmFtZSkuIFRoZSBzYW1lIGlkZW50aWZpZXIgc2hvdWxkIGJlIHVzZWQgd2hlbiB7QGxpbmsgI2NsZWFyRm9yY2VEaXNhYmxlZCBlbmFibGluZyBiYWNrfSB0aGUgcGx1Z2luLgogICAqIFRoZSBwbHVnaW4gYmVjb21lcyBlbmFibGVkIG9ubHkgYWZ0ZXIgYWxsIGZlYXR1cmVzIHtAbGluayAjY2xlYXJGb3JjZURpc2FibGVkIGVuYWJsZWQgaXQgYmFja30uCiAgICoKICAgKiBEaXNhYmxpbmcgYW5kIGVuYWJsaW5nIGEgcGx1Z2luOgogICAqCiAgICoJCXBsdWdpbi5pc0VuYWJsZWQ7IC8vIC0+IHRydWUKICAgKgkJcGx1Z2luLmZvcmNlRGlzYWJsZWQoICdNeUZlYXR1cmUnICk7CiAgICoJCXBsdWdpbi5pc0VuYWJsZWQ7IC8vIC0+IGZhbHNlCiAgICoJCXBsdWdpbi5jbGVhckZvcmNlRGlzYWJsZWQoICdNeUZlYXR1cmUnICk7CiAgICoJCXBsdWdpbi5pc0VuYWJsZWQ7IC8vIC0+IHRydWUKICAgKgogICAqIFBsdWdpbiBkaXNhYmxlZCBieSBtdWx0aXBsZSBmZWF0dXJlczoKICAgKgogICAqCQlwbHVnaW4uZm9yY2VEaXNhYmxlZCggJ015RmVhdHVyZScgKTsKICAgKgkJcGx1Z2luLmZvcmNlRGlzYWJsZWQoICdPdGhlckZlYXR1cmUnICk7CiAgICoJCXBsdWdpbi5jbGVhckZvcmNlRGlzYWJsZWQoICdNeUZlYXR1cmUnICk7CiAgICoJCXBsdWdpbi5pc0VuYWJsZWQ7IC8vIC0+IGZhbHNlCiAgICoJCXBsdWdpbi5jbGVhckZvcmNlRGlzYWJsZWQoICdPdGhlckZlYXR1cmUnICk7CiAgICoJCXBsdWdpbi5pc0VuYWJsZWQ7IC8vIC0+IHRydWUKICAgKgogICAqIE11bHRpcGxlIGRpc2FibGluZyB3aXRoIHRoZSBzYW1lIGlkZW50aWZpZXIgaXMgcmVkdW5kYW50OgogICAqCiAgICoJCXBsdWdpbi5mb3JjZURpc2FibGVkKCAnTXlGZWF0dXJlJyApOwogICAqCQlwbHVnaW4uZm9yY2VEaXNhYmxlZCggJ015RmVhdHVyZScgKTsKICAgKgkJcGx1Z2luLmNsZWFyRm9yY2VEaXNhYmxlZCggJ015RmVhdHVyZScgKTsKICAgKgkJcGx1Z2luLmlzRW5hYmxlZDsgLy8gLT4gdHJ1ZQogICAqCiAgICogKipOb3RlOioqIHNvbWUgcGx1Z2lucyBvciBhbGdvcml0aG1zIG1heSBoYXZlIG1vcmUgY29tcGxleCBsb2dpYyB3aGVuIGl0IGNvbWVzIHRvIGVuYWJsaW5nIG9yIGRpc2FibGluZyBjZXJ0YWluIHBsdWdpbnMsCiAgICogc28gdGhlIHBsdWdpbiBtaWdodCBiZSBzdGlsbCBkaXNhYmxlZCBhZnRlciB7QGxpbmsgI2NsZWFyRm9yY2VEaXNhYmxlZH0gd2FzIHVzZWQuCiAgICoKICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgVW5pcXVlIGlkZW50aWZpZXIgZm9yIGRpc2FibGluZy4gVXNlIHRoZSBzYW1lIGlkIHdoZW4ge0BsaW5rICNjbGVhckZvcmNlRGlzYWJsZWQgZW5hYmxpbmcgYmFja30gdGhlIHBsdWdpbi4KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhQbHVnaW4sIFt7CiAgICBrZXk6ICJmb3JjZURpc2FibGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JjZURpc2FibGVkKGlkKSB7CiAgICAgIHRoaXMuX2Rpc2FibGVTdGFjay5hZGQoaWQpOwoKICAgICAgaWYgKHRoaXMuX2Rpc2FibGVTdGFjay5zaXplID09IDEpIHsKICAgICAgICB0aGlzLm9uKCdzZXQ6aXNFbmFibGVkJywgZm9yY2VEaXNhYmxlLCB7CiAgICAgICAgICBwcmlvcml0eTogJ2hpZ2hlc3QnCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBDbGVhcnMgZm9yY2VkIGRpc2FibGUgcHJldmlvdXNseSBzZXQgdGhyb3VnaCB7QGxpbmsgI2ZvcmNlRGlzYWJsZWR9LiBTZWUge0BsaW5rICNmb3JjZURpc2FibGVkfS4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgVW5pcXVlIGlkZW50aWZpZXIsIGVxdWFsIHRvIHRoZSBvbmUgcGFzc2VkIGluIHtAbGluayAjZm9yY2VEaXNhYmxlZH0gY2FsbC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjbGVhckZvcmNlRGlzYWJsZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyRm9yY2VEaXNhYmxlZChpZCkgewogICAgICB0aGlzLl9kaXNhYmxlU3RhY2suZGVsZXRlKGlkKTsKCiAgICAgIGlmICh0aGlzLl9kaXNhYmxlU3RhY2suc2l6ZSA9PSAwKSB7CiAgICAgICAgdGhpcy5vZmYoJ3NldDppc0VuYWJsZWQnLCBmb3JjZURpc2FibGUpOwogICAgICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBAaW5oZXJpdERvYwogICAgICovCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpOwogICAgfQogICAgLyoqCiAgICAgKiBAaW5oZXJpdERvYwogICAgICovCgogIH1dLCBbewogICAga2V5OiAiaXNDb250ZXh0UGx1Z2luIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUGx1Z2luOwp9KCk7CgpleHBvcnQgeyBQbHVnaW4gYXMgZGVmYXVsdCB9OwptaXgoUGx1Z2luLCBPYnNlcnZhYmxlTWl4aW4pOwovKioKICogVGhlIGJhc2UgaW50ZXJmYWNlIGZvciBDS0VkaXRvciBwbHVnaW5zLgogKgogKiBJbiBpdHMgbWluaW1hbCBmb3JtIGEgcGx1Z2luIGNhbiBiZSBhIHNpbXBsZSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yIHRoZSBlZGl0b3J9CiAqIGFzIGEgcGFyYW1ldGVyOgogKgogKgkJLy8gQSBzaW1wbGUgcGx1Z2luIHRoYXQgZW5hYmxlcyBhIGRhdGEgcHJvY2Vzc29yLgogKgkJZnVuY3Rpb24gTXlQbHVnaW4oIGVkaXRvciApIHsKICoJCQllZGl0b3IuZGF0YS5wcm9jZXNzb3IgPSBuZXcgTXlEYXRhUHJvY2Vzc29yKCk7CiAqCQl9CiAqCiAqIEluIG1vc3QgY2FzZXMgaG93ZXZlciwgeW91IHdpbGwgd2FudCB0byBpbmhlcml0IGZyb20gdGhlIHtAbGluayBtb2R1bGU6Y29yZS9wbHVnaW5+UGx1Z2lufSBjbGFzcyB3aGljaCBpbXBsZW1lbnRzIHRoZQogKiB7QGxpbmsgbW9kdWxlOnV0aWxzL29ic2VydmFibGVtaXhpbn5PYnNlcnZhYmxlTWl4aW59IGFuZCBpcywgdGhlcmVmb3JlLCBtb3JlIGNvbnZlbmllbnQ6CiAqCiAqCQljbGFzcyBNeVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7CiAqCQkJaW5pdCgpIHsKICoJCQkJLy8gYGxpc3RlblRvKClgIGFuZCBgZWRpdG9yYCBhcmUgYXZhaWxhYmxlIHRoYW5rcyB0byBgUGx1Z2luYC4KICoJCQkJLy8gQnkgdXNpbmcgYGxpc3RlblRvKClgIHlvdSB3aWxsIGVuc3VyZSB0aGF0IHRoZSBsaXN0ZW5lciBpcyByZW1vdmVkIHdoZW4KICoJCQkJLy8gdGhlIHBsdWdpbiBpcyBkZXN0cm95ZWQuCiAqCQkJCXRoaXMubGlzdGVuVG8oIHRoaXMuZWRpdG9yLmRhdGEsICdyZWFkeScsICgpID0+IHsKICoJCQkJCS8vIERvIHNvbWV0aGluZyB3aGVuIHRoZSBkYXRhIGlzIHJlYWR5LgogKgkJCQl9ICk7CiAqCQkJfQogKgkJfQogKgogKiBUaGUgcGx1Z2luIGNhbiBhbHNvIGltcGxlbWVudCBtZXRob2RzIChlLmcuIHtAbGluayBtb2R1bGU6Y29yZS9wbHVnaW5+UGx1Z2luSW50ZXJmYWNlI2luaXQgYGluaXQoKWB9IG9yCiAqIHtAbGluayBtb2R1bGU6Y29yZS9wbHVnaW5+UGx1Z2luSW50ZXJmYWNlI2Rlc3Ryb3kgYGRlc3Ryb3koKWB9KSB3aGljaCwgd2hlbiBwcmVzZW50LCB3aWxsIGJlIHVzZWQgdG8gcHJvcGVybHkKICogaW5pdGlhbGl6ZSBhbmQgZGVzdHJveSB0aGUgcGx1Z2luLgogKgogKiAqKk5vdGU6KiogV2hlbiBkZWZpbmVkIGFzIGEgcGxhaW4gZnVuY3Rpb24sIHRoZSBwbHVnaW4gYWN0cyBhcyBhIGNvbnN0cnVjdG9yIGFuZCB3aWxsIGJlCiAqIGNhbGxlZCBpbiBwYXJhbGxlbCB3aXRoIG90aGVyIHBsdWdpbnMnIHtAbGluayBtb2R1bGU6Y29yZS9wbHVnaW5+UGx1Z2luSW50ZXJmYWNlI2NvbnN0cnVjdG9yIGNvbnN0cnVjdG9yc30uCiAqIFRoaXMgbWVhbnMgdGhlIGNvZGUgb2YgdGhhdCBwbHVnaW4gd2lsbCBiZSBleGVjdXRlZCAqKmJlZm9yZSoqIHtAbGluayBtb2R1bGU6Y29yZS9wbHVnaW5+UGx1Z2luSW50ZXJmYWNlI2luaXQgYGluaXQoKWB9IGFuZAogKiB7QGxpbmsgbW9kdWxlOmNvcmUvcGx1Z2luflBsdWdpbkludGVyZmFjZSNhZnRlckluaXQgYGFmdGVySW5pdCgpYH0gbWV0aG9kcyBvZiBvdGhlciBwbHVnaW5zIGFuZCwgZm9yIGluc3RhbmNlLAogKiB5b3UgY2Fubm90IHVzZSBpdCB0byBleHRlbmQgb3RoZXIgcGx1Z2lucycge0BnbGluayBmcmFtZXdvcmsvZ3VpZGVzL2FyY2hpdGVjdHVyZS9lZGl0aW5nLWVuZ2luZSNzY2hlbWEgc2NoZW1hfQogKiBydWxlcyBhcyB0aGV5IGFyZSBkZWZpbmVkIGxhdGVyIG9uIGR1cmluZyB0aGUgYGluaXQoKWAgc3RhZ2UuCiAqCiAqIEBpbnRlcmZhY2UgUGx1Z2luSW50ZXJmYWNlCiAqLwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgcGx1Z2luIGluc3RhbmNlLiBUaGlzIGlzIHRoZSBmaXJzdCBzdGVwIG9mIHRoZSBwbHVnaW4gaW5pdGlhbGl6YXRpb24uCiAqIFNlZSBhbHNvIHtAbGluayAjaW5pdH0gYW5kIHtAbGluayAjYWZ0ZXJJbml0fS4KICoKICogQSBwbHVnaW4gaXMgYWx3YXlzIGluc3RhbnRpYXRlZCBhZnRlciBpdHMge0BsaW5rIG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW5JbnRlcmZhY2UucmVxdWlyZXMgZGVwZW5kZW5jaWVzfSBhbmQgdGhlCiAqIHtAbGluayAjaW5pdH0gYW5kIHtAbGluayAjYWZ0ZXJJbml0fSBtZXRob2RzIGFyZSBjYWxsZWQgaW4gdGhlIHNhbWUgb3JkZXIuCiAqCiAqIFVzdWFsbHksIHlvdSB3aWxsIHdhbnQgdG8gcHV0IHlvdXIgcGx1Z2luJ3MgaW5pdGlhbGl6YXRpb24gY29kZSBpbiB0aGUge0BsaW5rICNpbml0fSBtZXRob2QuCiAqIFRoZSBjb25zdHJ1Y3RvciBjYW4gYmUgdW5kZXJzdG9vZCBhcyAiYmVmb3JlIGluaXQiIGFuZCB1c2VkIGluIHNwZWNpYWwgY2FzZXMsIGp1c3QgbGlrZQogKiB7QGxpbmsgI2FmdGVySW5pdH0gc2VydmVzIHRoZSBzcGVjaWFsICJhZnRlciBpbml0IiBzY2VuYXJpb3MgKGUuZy50aGUgY29kZSB3aGljaCBkZXBlbmRzIG9uIG90aGVyCiAqIHBsdWdpbnMsIGJ1dCB3aGljaCBkb2VzIG5vdCB7QGxpbmsgbW9kdWxlOmNvcmUvcGx1Z2luflBsdWdpbkludGVyZmFjZS5yZXF1aXJlcyBleHBsaWNpdGx5IHJlcXVpcmV9IHRoZW0pLgogKgogKiBAbWV0aG9kICNjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge21vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3J+RWRpdG9yfSBlZGl0b3IKICovCgovKioKICogQW4gYXJyYXkgb2YgcGx1Z2lucyByZXF1aXJlZCBieSB0aGlzIHBsdWdpbi4KICoKICogVG8ga2VlcCB0aGUgcGx1Z2luIGNsYXNzIGRlZmluaXRpb24gdGlnaHQgaXQgaXMgcmVjb21tZW5kZWQgdG8gZGVmaW5lIHRoaXMgcHJvcGVydHkgYXMgYSBzdGF0aWMgZ2V0dGVyOgogKgogKgkJaW1wb3J0IEltYWdlIGZyb20gJy4vaW1hZ2UuanMnOwogKgogKgkJZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VDYXB0aW9uIHsKICoJCQlzdGF0aWMgZ2V0IHJlcXVpcmVzKCkgewogKgkJCQlyZXR1cm4gWyBJbWFnZSBdOwogKgkJCX0KICoJCX0KICoKICogQHN0YXRpYwogKiBAcmVhZG9ubHkKICogQG1lbWJlciB7QXJyYXkuPEZ1bmN0aW9uPnx1bmRlZmluZWR9IG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW5JbnRlcmZhY2UucmVxdWlyZXMKICovCgovKioKICogQW4gb3B0aW9uYWwgbmFtZSBvZiB0aGUgcGx1Z2luLiBJZiBzZXQsIHRoZSBwbHVnaW4gd2lsbCBiZSBhdmFpbGFibGUgaW4KICoge0BsaW5rIG1vZHVsZTpjb3JlL3BsdWdpbmNvbGxlY3Rpb25+UGx1Z2luQ29sbGVjdGlvbiNnZXR9IGJ5IGl0cwogKiBuYW1lIGFuZCBpdHMgY29uc3RydWN0b3IuIElmIG5vdCwgdGhlbiBvbmx5IGJ5IGl0cyBjb25zdHJ1Y3Rvci4KICoKICogVGhlIG5hbWUgc2hvdWxkIHJlZmxlY3QgdGhlIGNvbnN0cnVjdG9yIG5hbWUuCiAqCiAqIFRvIGtlZXAgdGhlIHBsdWdpbiBjbGFzcyBkZWZpbml0aW9uIHRpZ2h0LCBpdCBpcyByZWNvbW1lbmRlZCB0byBkZWZpbmUgdGhpcyBwcm9wZXJ0eSBhcyBhIHN0YXRpYyBnZXR0ZXI6CiAqCiAqCQlleHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZUNhcHRpb24gewogKgkJCXN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHsKICoJCQkJcmV0dXJuICdJbWFnZUNhcHRpb24nOwogKgkJCX0KICoJCX0KICoKICogTm90ZTogVGhlIG5hdGl2ZSBgRnVuY3Rpb24ubmFtZWAgcHJvcGVydHkgY291bGQgbm90IGJlIHVzZWQgdG8ga2VlcCB0aGUgcGx1Z2luIG5hbWUgYmVjYXVzZQogKiBpdCB3aWxsIGJlIG1hbmdsZWQgZHVyaW5nIGNvZGUgbWluaWZpY2F0aW9uLgogKgogKiBOYW1pbmcgYSBwbHVnaW4gaXMgbmVjZXNzYXJ5IHRvIGVuYWJsZSByZW1vdmluZyBpdCB0aHJvdWdoIHRoZQogKiB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcmNvbmZpZ35FZGl0b3JDb25maWcjcmVtb3ZlUGx1Z2lucyBgY29uZmlnLnJlbW92ZVBsdWdpbnNgfSBvcHRpb24uCiAqCiAqIEBzdGF0aWMKICogQHJlYWRvbmx5CiAqIEBtZW1iZXIge1N0cmluZ3x1bmRlZmluZWR9IG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW5JbnRlcmZhY2UucGx1Z2luTmFtZQogKi8KCi8qKgogKiBUaGUgc2Vjb25kIHN0YWdlIChhZnRlciBwbHVnaW4ge0BsaW5rICNjb25zdHJ1Y3Rvcn0pIG9mIHRoZSBwbHVnaW4gaW5pdGlhbGl6YXRpb24uCiAqIFVubGlrZSB0aGUgcGx1Z2luIGNvbnN0cnVjdG9yIHRoaXMgbWV0aG9kIGNhbiBiZSBhc3luY2hyb25vdXMuCiAqCiAqIEEgcGx1Z2luJ3MgYGluaXQoKWAgbWV0aG9kIGlzIGNhbGxlZCBhZnRlciBpdHMge0BsaW5rIG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW5JbnRlcmZhY2UucmVxdWlyZXMgZGVwZW5kZW5jaWVzfSBhcmUgaW5pdGlhbGl6ZWQsCiAqIHNvIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBjb25zdHJ1Y3RvcnMgb2YgdGhlc2UgcGx1Z2lucy4KICoKICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLiBBIHBsdWdpbiBpbnN0YW5jZSBkb2VzIG5vdCBuZWVkIHRvIGhhdmUgaXQgZGVmaW5lZC4KICoKICogQG1ldGhvZCAjaW5pdAogKiBAcmV0dXJucyB7bnVsbHxQcm9taXNlfQogKi8KCi8qKgogKiBUaGUgdGhpcmQgKGFuZCBsYXN0KSBzdGFnZSBvZiB0aGUgcGx1Z2luIGluaXRpYWxpemF0aW9uLiBTZWUgYWxzbyB7QGxpbmsgI2NvbnN0cnVjdG9yfSBhbmQge0BsaW5rICNpbml0fS4KICoKICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLiBBIHBsdWdpbiBpbnN0YW5jZSBkb2VzIG5vdCBuZWVkIHRvIGhhdmUgaXQgZGVmaW5lZC4KICoKICogQG1ldGhvZCAjYWZ0ZXJJbml0CiAqIEByZXR1cm5zIHtudWxsfFByb21pc2V9CiAqLwoKLyoqCiAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uCiAqCiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC4gQSBwbHVnaW4gaW5zdGFuY2UgZG9lcyBub3QgbmVlZCB0byBoYXZlIGl0IGRlZmluZWQuCiAqCiAqIEBtZXRob2QgI2Rlc3Ryb3kKICogQHJldHVybnMge251bGx8UHJvbWlzZX0KICovCgovKioKICogQSBmbGFnIHdoaWNoIGRlZmluZXMgaWYgYSBwbHVnaW4gaXMgYWxsb3dlZCBvciBub3QgYWxsb3dlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGJ5IGEge0BsaW5rIG1vZHVsZTpjb3JlL2NvbnRleHR+Q29udGV4dH0uCiAqCiAqIEBzdGF0aWMKICogQHJlYWRvbmx5CiAqIEBtZW1iZXIge0Jvb2xlYW59IG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW5JbnRlcmZhY2UuaXNDb250ZXh0UGx1Z2luCiAqLwoKLyoqCiAqIEFuIGFycmF5IG9mIGxvYWRlZCBwbHVnaW5zLgogKgogKiBAdHlwZWRlZiB7QXJyYXkuPG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW5JbnRlcmZhY2U+fSBtb2R1bGU6Y29yZS9wbHVnaW5+TG9hZGVkUGx1Z2lucwogKi8KLy8gSGVscGVyIGZ1bmN0aW9uIHRoYXQgZm9yY2VzIHBsdWdpbiB0byBiZSBkaXNhYmxlZC4KCmZ1bmN0aW9uIGZvcmNlRGlzYWJsZShldnQpIHsKICBldnQucmV0dXJuID0gZmFsc2U7CiAgZXZ0LnN0b3AoKTsKfQ=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-core/src/plugin.js"],"names":["ObservableMixin","mix","Plugin","editor","set","_disableStack","Set","id","add","size","on","forceDisable","priority","isEnabled","delete","off","stopListening","evt","return","stop"],"mappings":";;;;;;;AAAA;;;;;AAKA;;;AAIA,OAAOA,eAAP,MAA4B,+CAA5B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA;;;;;;;IAMqBC,M;;;AACpB;;;AAGA,kBAAaC,MAAb,EAAsB;AAAA;;AACrB;;;;;;;;;;;;;;;;AAgBA,SAAKA,MAAL,GAAcA,MAAd;AAEA;;;;;;;;;;;;;;;;AAeA,SAAKC,GAAL,CAAU,WAAV,EAAuB,IAAvB;AAEA;;;;;;;AAMA,SAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAoCeC,E,EAAK;AACnB,WAAKF,aAAL,CAAmBG,GAAnB,CAAwBD,EAAxB;;AAEA,UAAK,KAAKF,aAAL,CAAmBI,IAAnB,IAA2B,CAAhC,EAAoC;AACnC,aAAKC,EAAL,CAAS,eAAT,EAA0BC,YAA1B,EAAwC;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAxC;AACA,aAAKC,SAAL,GAAiB,KAAjB;AACA;AACD;AAED;;;;;;;;uCAKoBN,E,EAAK;AACxB,WAAKF,aAAL,CAAmBS,MAAnB,CAA2BP,EAA3B;;AAEA,UAAK,KAAKF,aAAL,CAAmBI,IAAnB,IAA2B,CAAhC,EAAoC;AACnC,aAAKM,GAAL,CAAU,eAAV,EAA2BJ,YAA3B;AACA,aAAKE,SAAL,GAAiB,IAAjB;AACA;AACD;AAED;;;;;;8BAGU;AACT,WAAKG,aAAL;AACA;AAED;;;;;;wBAG6B;AAC5B,aAAO,KAAP;AACA;;;;;;SAxHmBd,M;AA2HrBD,GAAG,CAAEC,MAAF,EAAUF,eAAV,CAAH;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;AAaA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;AAMA;;AACA,SAASW,YAAT,CAAuBM,GAAvB,EAA6B;AAC5BA,EAAAA,GAAG,CAACC,MAAJ,GAAa,KAAb;AACAD,EAAAA,GAAG,CAACE,IAAJ;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugin\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * Note that most editors implement the {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n\t\t * to the base {@link module:core/editor/editor~Editor} interface. However, editors with an external UI\n\t\t * (i.e. Bootstrap-based) or a headless editor may not implement the {@link module:core/editor/editorwithui~EditorWithUI}\n\t\t * interface.\n\t\t *\n\t\t * Because of above, to make plugins more universal, it is recommended to split features into:\n\t\t *  - The \"editing\" part that only uses the {@link module:core/editor/editor~Editor} interface.\n\t\t *  - The \"UI\" part that uses both the {@link module:core/editor/editor~Editor} interface and\n\t\t *  the {@link module:core/editor/editorwithui~EditorWithUI} interface.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * Flag indicating whether a plugin is enabled or disabled.\n\t\t * A disabled plugin will not transform text.\n\t\t *\n\t\t * Plugin can be simply disabled like that:\n\t\t *\n\t\t *\t\t// Disable the plugin so that no toolbars are visible.\n\t\t *\t\teditor.plugins.get( 'TextTransformation' ).isEnabled = false;\n\t\t *\n\t\t * You can also use {@link #forceDisabled} method.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t\t *\n\t\t * @type {Set.<String>}\n\t\t * @private\n\t\t */\n\t\tthis._disableStack = new Set();\n\t}\n\n\t/**\n\t * Disables the plugin.\n\t *\n\t * Plugin may be disabled by multiple features or algorithms (at once). When disabling a plugin, unique id should be passed\n\t * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the plugin.\n\t * The plugin becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a plugin:\n\t *\n\t *\t\tplugin.isEnabled; // -> true\n\t *\t\tplugin.forceDisabled( 'MyFeature' );\n\t *\t\tplugin.isEnabled; // -> false\n\t *\t\tplugin.clearForceDisabled( 'MyFeature' );\n\t *\t\tplugin.isEnabled; // -> true\n\t *\n\t * Plugin disabled by multiple features:\n\t *\n\t *\t\tplugin.forceDisabled( 'MyFeature' );\n\t *\t\tplugin.forceDisabled( 'OtherFeature' );\n\t *\t\tplugin.clearForceDisabled( 'MyFeature' );\n\t *\t\tplugin.isEnabled; // -> false\n\t *\t\tplugin.clearForceDisabled( 'OtherFeature' );\n\t *\t\tplugin.isEnabled; // -> true\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t *\t\tplugin.forceDisabled( 'MyFeature' );\n\t *\t\tplugin.forceDisabled( 'MyFeature' );\n\t *\t\tplugin.clearForceDisabled( 'MyFeature' );\n\t *\t\tplugin.isEnabled; // -> true\n\t *\n\t * **Note:** some plugins or algorithms may have more complex logic when it comes to enabling or disabling certain plugins,\n\t * so the plugin might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the plugin.\n\t */\n\tforceDisabled( id ) {\n\t\tthis._disableStack.add( id );\n\n\t\tif ( this._disableStack.size == 1 ) {\n\t\t\tthis.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n\t *\n\t * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */\n\tclearForceDisabled( id ) {\n\t\tthis._disableStack.delete( id );\n\n\t\tif ( this._disableStack.size == 0 ) {\n\t\t\tthis.off( 'set:isEnabled', forceDisable );\n\t\t\tthis.isEnabled = true;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get isContextPlugin() {\n\t\treturn false;\n\t}\n}\n\nmix( Plugin, ObservableMixin );\n\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form a plugin can be a simple function that accepts {@link module:core/editor/editor~Editor the editor}\n * as a parameter:\n *\n *\t\t// A simple plugin that enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases however, you will want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you will ensure that the listener is removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor.data, 'ready', () => {\n *\t\t\t\t\t// Do something when the data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * The plugin can also implement methods (e.g. {@link module:core/plugin~PluginInterface#init `init()`} or\n * {@link module:core/plugin~PluginInterface#destroy `destroy()`}) which, when present, will be used to properly\n * initialize and destroy the plugin.\n *\n * **Note:** When defined as a plain function, the plugin acts as a constructor and will be\n * called in parallel with other plugins' {@link module:core/plugin~PluginInterface#constructor constructors}.\n * This means the code of that plugin will be executed **before** {@link module:core/plugin~PluginInterface#init `init()`} and\n * {@link module:core/plugin~PluginInterface#afterInit `afterInit()`} methods of other plugins and, for instance,\n * you cannot use it to extend other plugins' {@glink framework/guides/architecture/editing-engine#schema schema}\n * rules as they are defined later on during the `init()` stage.\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of the plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you will want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} serves the special \"after init\" scenarios (e.g.the code which depends on other\n * plugins, but which does not {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * An optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep the plugin class definition tight, it is recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of the plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as the constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of the plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n\n/**\n * A flag which defines if a plugin is allowed or not allowed to be used directly by a {@link module:core/context~Context}.\n *\n * @static\n * @readonly\n * @member {Boolean} module:core/plugin~PluginInterface.isContextPlugin\n */\n\n/**\n * An array of loaded plugins.\n *\n * @typedef {Array.<module:core/plugin~PluginInterface>} module:core/plugin~LoadedPlugins\n */\n\n// Helper function that forces plugin to be disabled.\nfunction forceDisable( evt ) {\n\tevt.return = false;\n\tevt.stop();\n}\n"]}]}