{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\renderer.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\renderer.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js"],"names":["ViewText","ViewPosition","INLINE_FILLER","INLINE_FILLER_LENGTH","startsWithFiller","isInlineFiller","mix","diff","insertAt","remove","ObservableMixin","CKEditorError","isText","isNode","fastDiff","env","Renderer","domConverter","selection","domDocuments","Set","markedAttributes","markedChildren","markedTexts","isFocused","_inlineFiller","_fakeSelectionContainer","type","node","mapViewToDom","parent","add","inlineFillerPosition","element","_updateChildrenMappings","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","getFirstPosition","_updateAttrs","_updateChildren","has","_updateText","fillerDomPosition","viewPositionToDom","domDocument","ownerDocument","addInlineFiller","offset","_updateSelection","_updateFocus","clear","viewElement","domElement","actualDomChildren","childNodes","expectedDomChildren","Array","from","viewChildrenToDom","withChildren","_diffNodeLists","actions","_findReplaceActions","indexOf","counter","equal","insert","delete","action","insertIndex","deleteIndex","viewChild","getChild","is","_updateElementMappings","unbindDomElement","bindElements","firstPos","_createBefore","rangeCount","isCollapsed","selectionPosition","position","domFillerNode","parentNode","removeChild","data","substr","selectionParent","selectionOffset","root","isEditable","getFillerOffset","nodeBefore","nodeAfter","viewText","options","domText","findCorrespondingDomText","newDomText","viewToDom","actualText","expectedText","filler","index","insertData","values","join","deleteData","howMany","domAttrKeys","attributes","map","attr","name","viewAttrKeys","getAttributeKeys","key","setAttribute","getAttribute","hasAttribute","removeAttribute","bind","i","nodesToUnbind","_markDescendantTextToSync","domToView","filterOutFakeSelectionContainer","sameNodes","actualDom","expectedDom","newActions","actualSlice","expectedSlice","push","concat","areSimilar","x","viewNode","getChildren","child","_removeDomSelection","_removeFakeSelection","domRoot","editableElement","isFake","_updateFakeSelection","_updateDomSelection","createFakeSelectionContainer","container","bindFakeSelection","_fakeSelectionNeedsUpdate","parentElement","appendChild","textContent","fakeSelectionLabel","domSelection","getSelection","domRange","createRange","removeAllRanges","selectNodeContents","addRange","defaultView","_domSelectionNeedsUpdate","anchor","focus","collapse","extend","isGecko","fixGeckoSelectionAfterBr","isDomSelectionCorrect","oldViewSelection","domSelectionToView","isEqual","isSimilar","anchorNode","contains","doc","activeDomElement","activeElement","mapDomToView","editable","findAncestor","domParentOrArray","nodeAfterFiller","fillerNode","createTextNode","isArray","splice","node1","node2","tagName","toLowerCase","actualDomChild","expectedDomChild","isBlockFiller","nodeType","Node","ELEMENT_NODE","length","childAtOffset","getRangeAt","domChildList","fakeSelectionContainer","childList","last","pop","createElement","Object","assign","style","top","left","width"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module engine/view/renderer\n */\n\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller } from './filler';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport fastDiff from '@ckeditor/ckeditor5-utils/src/fastdiff';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\nexport default class Renderer {\n\t/**\n\t * Creates a renderer instance.\n\t *\n\t * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\n\t * @param {module:engine/view/documentselection~DocumentSelection} selection View selection.\n\t */\n\tconstructor( domConverter, selection ) {\n\t\t/**\n\t\t * Set of DOM Documents instances.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<Document>}\n\t\t */\n\t\tthis.domDocuments = new Set();\n\n\t\t/**\n\t\t * Converter instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = domConverter;\n\n\t\t/**\n\t\t * Set of nodes which attributes changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedAttributes = new Set();\n\n\t\t/**\n\t\t * Set of elements which child lists changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedChildren = new Set();\n\n\t\t/**\n\t\t * Set of text nodes which text data changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedTexts = new Set();\n\n\t\t/**\n\t\t * View selection. Renderer updates DOM selection based on the view selection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = selection;\n\n\t\t/**\n\t\t * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\n\t\t * this is set to `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isFocused = false;\n\n\t\t/**\n\t\t * The text node in which the inline filler was rendered.\n\t\t *\n\t\t * @private\n\t\t * @member {Text}\n\t\t */\n\t\tthis._inlineFiller = null;\n\n\t\t/**\n\t\t * DOM element containing fake selection.\n\t\t *\n\t\t * @private\n\t\t * @type {null|HTMLElement}\n\t\t */\n\t\tthis._fakeSelectionContainer = null;\n\t}\n\n\t/**\n\t * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n\t *\n\t * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n\t *\n\t * @see #markedAttributes\n\t * @see #markedChildren\n\t * @see #markedTexts\n\t *\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Node to be marked.\n\t */\n\tmarkToSync( type, node ) {\n\t\tif ( type === 'text' ) {\n\t\t\tif ( this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis.markedTexts.add( node );\n\t\t\t}\n\t\t} else {\n\t\t\t// If the node has no DOM element it is not rendered yet,\n\t\t\t// its children/attributes do not need to be marked to be sync.\n\t\t\tif ( !this.domConverter.mapViewToDom( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( type === 'attributes' ) {\n\t\t\t\tthis.markedAttributes.add( node );\n\t\t\t} else if ( type === 'children' ) {\n\t\t\t\tthis.markedChildren.add( node );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Unknown type passed to Renderer.markToSync.\n\t\t\t\t *\n\t\t\t\t * @error renderer-unknown-type\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.', this );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n\t * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n\t *\n\t * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n\t * so it does as little as it is needed to update the DOM.\n\t *\n\t * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n\t * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n\t * removed as long as the selection is in the text node which needed it at first.\n\t */\n\trender() {\n\t\tlet inlineFillerPosition;\n\n\t\t// Refresh mappings.\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildrenMappings( element );\n\t\t}\n\n\t\t// There was inline filler rendered in the DOM but it's not\n\t\t// at the selection position any more, so we can remove it\n\t\t// (cause even if it's needed, it must be placed in another location).\n\t\tif ( this._inlineFiller && !this._isSelectionInInlineFiller() ) {\n\t\t\tthis._removeInlineFiller();\n\t\t}\n\n\t\t// If we've got the filler, let's try to guess its position in the view.\n\t\tif ( this._inlineFiller ) {\n\t\t\tinlineFillerPosition = this._getInlineFillerPosition();\n\t\t}\n\t\t// Otherwise, if it's needed, create it at the selection position.\n\t\telse if ( this._needsInlineFillerAtSelection() ) {\n\t\t\tinlineFillerPosition = this.selection.getFirstPosition();\n\n\t\t\t// Do not use `markToSync` so it will be added even if the parent is already added.\n\t\t\tthis.markedChildren.add( inlineFillerPosition.parent );\n\t\t}\n\n\t\tfor ( const element of this.markedAttributes ) {\n\t\t\tthis._updateAttrs( element );\n\t\t}\n\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildren( element, { inlineFillerPosition } );\n\t\t}\n\n\t\tfor ( const node of this.markedTexts ) {\n\t\t\tif ( !this.markedChildren.has( node.parent ) && this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis._updateText( node, { inlineFillerPosition } );\n\t\t\t}\n\t\t}\n\n\t\t// Check whether the inline filler is required and where it really is in the DOM.\n\t\t// At this point in most cases it will be in the DOM, but there are exceptions.\n\t\t// For example, if the inline filler was deep in the created DOM structure, it will not be created.\n\t\t// Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n\t\t// it will not be present.\n\t\t// Fix those and similar scenarios.\n\t\tif ( inlineFillerPosition ) {\n\t\t\tconst fillerDomPosition = this.domConverter.viewPositionToDom( inlineFillerPosition );\n\t\t\tconst domDocument = fillerDomPosition.parent.ownerDocument;\n\n\t\t\tif ( !startsWithFiller( fillerDomPosition.parent ) ) {\n\t\t\t\t// Filler has not been created at filler position. Create it now.\n\t\t\t\tthis._inlineFiller = addInlineFiller( domDocument, fillerDomPosition.parent, fillerDomPosition.offset );\n\t\t\t} else {\n\t\t\t\t// Filler has been found, save it.\n\t\t\t\tthis._inlineFiller = fillerDomPosition.parent;\n\t\t\t}\n\t\t} else {\n\t\t\t// There is no filler needed.\n\t\t\tthis._inlineFiller = null;\n\t\t}\n\n\t\tthis._updateSelection();\n\t\tthis._updateFocus();\n\n\t\tthis.markedTexts.clear();\n\t\tthis.markedAttributes.clear();\n\t\tthis.markedChildren.clear();\n\t}\n\n\t/**\n\t * Updates mappings of view element's children.\n\t *\n\t * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n\t * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n\t * Thanks to that these elements do not need to be re-rendered completely.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose children mappings will be updated.\n\t */\n\t_updateChildrenMappings( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n\t\t\treturn;\n\t\t}\n\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { withChildren: false } )\n\t\t);\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\t\tconst actions = this._findReplaceActions( diff, actualDomChildren, expectedDomChildren );\n\n\t\tif ( actions.indexOf( 'replace' ) !== -1 ) {\n\t\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'replace' ) {\n\t\t\t\t\tconst insertIndex = counter.equal + counter.insert;\n\t\t\t\t\tconst deleteIndex = counter.equal + counter.delete;\n\t\t\t\t\tconst viewChild = viewElement.getChild( insertIndex );\n\n\t\t\t\t\t// The 'uiElement' is a special one and its children are not stored in a view (#799),\n\t\t\t\t\t// so we cannot use it with replacing flow (since it uses view children during rendering\n\t\t\t\t\t// which will always result in rendering empty element).\n\t\t\t\t\tif ( viewChild && !viewChild.is( 'uiElement' ) ) {\n\t\t\t\t\t\tthis._updateElementMappings( viewChild, actualDomChildren[ deleteIndex ] );\n\t\t\t\t\t}\n\n\t\t\t\t\tremove( expectedDomChildren[ insertIndex ] );\n\t\t\t\t\tcounter.equal++;\n\t\t\t\t} else {\n\t\t\t\t\tcounter[ action ]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates mappings of a given view element.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose mappings will be updated.\n\t * @param {Node} domElement The DOM element representing the given view element.\n\t */\n\t_updateElementMappings( viewElement, domElement ) {\n\t\t// Remap 'DomConverter' bindings.\n\t\tthis.domConverter.unbindDomElement( domElement );\n\t\tthis.domConverter.bindElements( domElement, viewElement );\n\n\t\t// View element may have children which needs to be updated, but are not marked, mark them to update.\n\t\tthis.markedChildren.add( viewElement );\n\n\t\t// Because we replace new view element mapping with the existing one, the corresponding DOM element\n\t\t// will not be rerendered. The new view element may have different attributes than the previous one.\n\t\t// Since its corresponding DOM element will not be rerendered, new attributes will not be added\n\t\t// to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n\t\t// detailed case study.\n\t\t// Also there are cases where replaced element is removed from the view structure and then has\n\t\t// its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n\t\t// and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n\t\t// To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n\t\tthis.markedAttributes.add( viewElement );\n\t}\n\n\t/**\n\t * Gets the position of the inline filler based on the current selection.\n\t * Here, we assume that we know that the filler is needed and\n\t * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n\t * it is somewhere at the selection position.\n\t *\n\t * Note: The filler position cannot be restored based on the filler's DOM text node, because\n\t * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n\t * bindings are only dependable after rendering.\n\t *\n\t * @private\n\t * @returns {module:engine/view/position~Position}\n\t */\n\t_getInlineFillerPosition() {\n\t\tconst firstPos = this.selection.getFirstPosition();\n\n\t\tif ( firstPos.parent.is( 'text' ) ) {\n\t\t\treturn ViewPosition._createBefore( this.selection.getFirstPosition().parent );\n\t\t} else {\n\t\t\treturn firstPos;\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` if the selection has not left the inline filler's text node.\n\t * If it is `true`, it means that the filler had been added for a reason and the selection did not\n\t * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler and selection are in the same place.\n\t */\n\t_isSelectionInInlineFiller() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note, we can't check if selection's position equals position of the\n\t\t// this._inlineFiller node, because of #663. We may not be able to calculate\n\t\t// the filler's position in the view at this stage.\n\t\t// Instead, we check it the other way – whether selection is anchored in\n\t\t// that text node or next to it.\n\n\t\t// Possible options are:\n\t\t// \"FILLER{}\"\n\t\t// \"FILLERadded-text{}\"\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst position = this.domConverter.viewPositionToDom( selectionPosition );\n\n\t\tif ( position && isText( position.parent ) && startsWithFiller( position.parent ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes the inline filler.\n\t *\n\t * @private\n\t */\n\t_removeInlineFiller() {\n\t\tconst domFillerNode = this._inlineFiller;\n\n\t\t// Something weird happened and the stored node doesn't contain the filler's text.\n\t\tif ( !startsWithFiller( domFillerNode ) ) {\n\t\t\t/**\n\t\t\t * The inline filler node was lost. Most likely, something overwrote the filler text node\n\t\t\t * in the DOM.\n\t\t\t *\n\t\t\t * @error view-renderer-filler-was-lost\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-renderer-filler-was-lost: The inline filler node was lost.', this );\n\t\t}\n\n\t\tif ( isInlineFiller( domFillerNode ) ) {\n\t\t\tdomFillerNode.parentNode.removeChild( domFillerNode );\n\t\t} else {\n\t\t\tdomFillerNode.data = domFillerNode.data.substr( INLINE_FILLER_LENGTH );\n\t\t}\n\n\t\tthis._inlineFiller = null;\n\t}\n\n\t/**\n\t * Checks if the inline {@link module:engine/view/filler filler} should be added.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler should be added.\n\t */\n\t_needsInlineFillerAtSelection() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst selectionParent = selectionPosition.parent;\n\t\tconst selectionOffset = selectionPosition.offset;\n\n\t\t// If there is no DOM root we do not care about fillers.\n\t\tif ( !this.domConverter.mapViewToDom( selectionParent.root ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !( selectionParent.is( 'element' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Prevent adding inline filler inside elements with contenteditable=false.\n\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1170\n\t\tif ( !isEditable( selectionParent ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have block filler, we do not need inline one.\n\t\tif ( selectionOffset === selectionParent.getFillerOffset() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst nodeBefore = selectionPosition.nodeBefore;\n\t\tconst nodeAfter = selectionPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText || nodeAfter instanceof ViewText ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if text needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} viewText View text to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateText( viewText, options ) {\n\t\tconst domText = this.domConverter.findCorrespondingDomText( viewText );\n\t\tconst newDomText = this.domConverter.viewToDom( viewText, domText.ownerDocument );\n\n\t\tconst actualText = domText.data;\n\t\tlet expectedText = newDomText.data;\n\n\t\tconst filler = options.inlineFillerPosition;\n\n\t\tif ( filler && filler.parent == viewText.parent && filler.offset == viewText.index ) {\n\t\t\texpectedText = INLINE_FILLER + expectedText;\n\t\t}\n\n\t\tif ( actualText != expectedText ) {\n\t\t\tconst actions = fastDiff( actualText, expectedText );\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action.type === 'insert' ) {\n\t\t\t\t\tdomText.insertData( action.index, action.values.join( '' ) );\n\t\t\t\t} else { // 'delete'\n\t\t\t\t\tdomText.deleteData( action.index, action.howMany );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if attribute list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement The view element to update.\n\t */\n\t_updateAttrs( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n\t\t\t// in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n\t\t\t// replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n\t\t\t// in 'this._updateChildrenMappings()' so it will be processed separately.\n\t\t\treturn;\n\t\t}\n\n\t\tconst domAttrKeys = Array.from( domElement.attributes ).map( attr => attr.name );\n\t\tconst viewAttrKeys = viewElement.getAttributeKeys();\n\n\t\t// Add or overwrite attributes.\n\t\tfor ( const key of viewAttrKeys ) {\n\t\t\tdomElement.setAttribute( key, viewElement.getAttribute( key ) );\n\t\t}\n\n\t\t// Remove from DOM attributes which do not exists in the view.\n\t\tfor ( const key of domAttrKeys ) {\n\t\t\tif ( !viewElement.hasAttribute( key ) ) {\n\t\t\t\tdomElement.removeAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if elements child list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement View element to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateChildren( viewElement, options ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM.\n\t\t\t// There is no need to process it. It will be processed when re-inserted.\n\t\t\treturn;\n\t\t}\n\n\t\tconst inlineFillerPosition = options.inlineFillerPosition;\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { bind: true, inlineFillerPosition } )\n\t\t);\n\n\t\t// Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n\t\t// during diffing so text nodes could be compared correctly and also during rendering to maintain\n\t\t// proper order and indexes while updating the DOM.\n\t\tif ( inlineFillerPosition && inlineFillerPosition.parent === viewElement ) {\n\t\t\taddInlineFiller( domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset );\n\t\t}\n\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\n\t\tlet i = 0;\n\t\tconst nodesToUnbind = new Set();\n\n\t\t// Handle deletions first.\n\t\t// This is to prevent a situation where an element that already exists in `actualDomChildren` is inserted at a different\n\t\t// index in `actualDomChildren`. Since `actualDomChildren` is a `NodeList`, this works like move, not like an insert,\n\t\t// and it disrupts the whole algorithm. See https://github.com/ckeditor/ckeditor5/issues/6367.\n\t\t//\n\t\t// It doesn't matter in what order we remove or add nodes, as long as we remove and add correct nodes at correct indexes.\n\t\tfor ( const action of diff ) {\n\t\t\tif ( action === 'delete' ) {\n\t\t\t\tnodesToUnbind.add( actualDomChildren[ i ] );\n\t\t\t\tremove( actualDomChildren[ i ] );\n\t\t\t} else if ( action === 'equal' ) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\ti = 0;\n\n\t\tfor ( const action of diff ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\tinsertAt( domElement, i, expectedDomChildren[ i ] );\n\t\t\t\ti++;\n\t\t\t} else if ( action === 'equal' ) {\n\t\t\t\t// Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n\t\t\t\t// Do it here (not in the loop above) because only after insertions the `i` index is correct.\n\t\t\t\tthis._markDescendantTextToSync( this.domConverter.domToView( expectedDomChildren[ i ] ) );\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n\t\t// comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n\t\t// it was moved to DOM tree out of the removed node.\n\t\tfor ( const node of nodesToUnbind ) {\n\t\t\tif ( !node.parentNode ) {\n\t\t\t\tthis.domConverter.unbindDomElement( node );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shorthand for diffing two arrays or node lists of DOM nodes.\n\t *\n\t * @private\n\t * @param {Array.<Node>|NodeList} actualDomChildren Actual DOM children\n\t * @param {Array.<Node>|NodeList} expectedDomChildren Expected DOM children.\n\t * @returns {Array.<String>} The list of actions based on the {@link module:utils/diff~diff} function.\n\t */\n\t_diffNodeLists( actualDomChildren, expectedDomChildren ) {\n\t\tactualDomChildren = filterOutFakeSelectionContainer( actualDomChildren, this._fakeSelectionContainer );\n\n\t\treturn diff( actualDomChildren, expectedDomChildren, sameNodes.bind( null, this.domConverter ) );\n\t}\n\n\t/**\n\t * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n\t * within one `insert`/`delete` action group, for example:\n\t *\n\t * \t\tActual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n\t * \t\tExpected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n\t * \t\tInput actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n\t * \t\tOutput actions:\t[ insert, replace, delete, equal, replace ]\n\t *\n\t * @private\n\t * @param {Array.<String>} actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n\t * @param {Array.<Node>|NodeList} actualDom Actual DOM children\n\t * @param {Array.<Node>} expectedDom Expected DOM children.\n\t * @returns {Array.<String>} Actions array modified with the `replace` actions.\n\t */\n\t_findReplaceActions( actions, actualDom, expectedDom ) {\n\t\t// If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n\t\tif ( actions.indexOf( 'insert' ) === -1 || actions.indexOf( 'delete' ) === -1 ) {\n\t\t\treturn actions;\n\t\t}\n\n\t\tlet newActions = [];\n\t\tlet actualSlice = [];\n\t\tlet expectedSlice = [];\n\n\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\tfor ( const action of actions ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\texpectedSlice.push( expectedDom[ counter.equal + counter.insert ] );\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tactualSlice.push( actualDom[ counter.equal + counter.delete ] );\n\t\t\t} else { // equal\n\t\t\t\tnewActions = newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t\t\t\tnewActions.push( 'equal' );\n\t\t\t\t// Reset stored elements on 'equal'.\n\t\t\t\tactualSlice = [];\n\t\t\t\texpectedSlice = [];\n\t\t\t}\n\t\t\tcounter[ action ]++;\n\t\t}\n\n\t\treturn newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t}\n\n\t/**\n\t * Marks text nodes to be synchronized.\n\t *\n\t * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewNode View node to sync.\n\t */\n\t_markDescendantTextToSync( viewNode ) {\n\t\tif ( !viewNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tthis.markedTexts.add( viewNode );\n\t\t} else if ( viewNode.is( 'element' ) ) {\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tthis._markDescendantTextToSync( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the selection needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateSelection() {\n\t\t// If there is no selection - remove DOM and fake selections.\n\t\tif ( this.selection.rangeCount === 0 ) {\n\t\t\tthis._removeDomSelection();\n\t\t\tthis._removeFakeSelection();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst domRoot = this.domConverter.mapViewToDom( this.selection.editableElement );\n\n\t\t// Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n\t\tif ( !this.isFocused || !domRoot ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Render selection.\n\t\tif ( this.selection.isFake ) {\n\t\t\tthis._updateFakeSelection( domRoot );\n\t\t} else {\n\t\t\tthis._removeFakeSelection();\n\t\t\tthis._updateDomSelection( domRoot );\n\t\t}\n\t}\n\n\t/**\n\t * Updates the fake selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the fake selection container should be added.\n\t */\n\t_updateFakeSelection( domRoot ) {\n\t\tconst domDocument = domRoot.ownerDocument;\n\n\t\tif ( !this._fakeSelectionContainer ) {\n\t\t\tthis._fakeSelectionContainer = createFakeSelectionContainer( domDocument );\n\t\t}\n\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\t// Bind fake selection container with the current selection *position*.\n\t\tthis.domConverter.bindFakeSelection( container, this.selection );\n\n\t\tif ( !this._fakeSelectionNeedsUpdate( domRoot ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !container.parentElement || container.parentElement != domRoot ) {\n\t\t\tdomRoot.appendChild( container );\n\t\t}\n\n\t\tcontainer.textContent = this.selection.fakeSelectionLabel || '\\u00A0';\n\n\t\tconst domSelection = domDocument.getSelection();\n\t\tconst domRange = domDocument.createRange();\n\n\t\tdomSelection.removeAllRanges();\n\t\tdomRange.selectNodeContents( container );\n\t\tdomSelection.addRange( domRange );\n\t}\n\n\t/**\n\t * Updates the DOM selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the DOM selection should be rendered.\n\t */\n\t_updateDomSelection( domRoot ) {\n\t\tconst domSelection = domRoot.ownerDocument.defaultView.getSelection();\n\n\t\t// Let's check whether DOM selection needs updating at all.\n\t\tif ( !this._domSelectionNeedsUpdate( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n\t\t// set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n\t\t// and focus of view selection.\n\t\t// Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n\t\t// selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n\t\tconst anchor = this.domConverter.viewPositionToDom( this.selection.anchor );\n\t\tconst focus = this.domConverter.viewPositionToDom( this.selection.focus );\n\n\t\t// Focus the new editing host.\n\t\t// Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n\t\tdomRoot.focus();\n\n\t\tdomSelection.collapse( anchor.parent, anchor.offset );\n\t\tdomSelection.extend( focus.parent, focus.offset );\n\n\t\t// Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n\t\tif ( env.isGecko ) {\n\t\t\tfixGeckoSelectionAfterBr( focus, domSelection );\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether a given DOM selection needs to be updated.\n\t *\n\t * @private\n\t * @param {Selection} domSelection The DOM selection to check.\n\t * @returns {Boolean}\n\t */\n\t_domSelectionNeedsUpdate( domSelection ) {\n\t\tif ( !this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\t// Current DOM selection is in incorrect position. We need to update it.\n\t\t\treturn true;\n\t\t}\n\n\t\tconst oldViewSelection = domSelection && this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( oldViewSelection && this.selection.isEqual( oldViewSelection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If selection is not collapsed, it does not need to be updated if it is similar.\n\t\tif ( !this.selection.isCollapsed && this.selection.isSimilar( oldViewSelection ) ) {\n\t\t\t// Selection did not changed and is correct, do not update.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Selections are not similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether the fake selection needs to be updated.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where a new fake selection container should be added.\n\t * @returns {Boolean}\n\t */\n\t_fakeSelectionNeedsUpdate( domRoot ) {\n\t\tconst container = this._fakeSelectionContainer;\n\t\tconst domSelection = domRoot.ownerDocument.getSelection();\n\n\t\t// Fake selection needs to be updated if there's no fake selection container, or the container currently sits\n\t\t// in a different root.\n\t\tif ( !container || container.parentElement !== domRoot ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Make sure that the selection actually is within the fake selection.\n\t\tif ( domSelection.anchorNode !== container && !container.contains( domSelection.anchorNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn container.textContent !== this.selection.fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Removes the DOM selection.\n\t *\n\t * @private\n\t */\n\t_removeDomSelection() {\n\t\tfor ( const doc of this.domDocuments ) {\n\t\t\tconst domSelection = doc.getSelection();\n\n\t\t\tif ( domSelection.rangeCount ) {\n\t\t\t\tconst activeDomElement = doc.activeElement;\n\t\t\t\tconst viewElement = this.domConverter.mapDomToView( activeDomElement );\n\n\t\t\t\tif ( activeDomElement && viewElement ) {\n\t\t\t\t\tdoc.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake selection.\n\t *\n\t * @private\n\t */\n\t_removeFakeSelection() {\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\tif ( container ) {\n\t\t\tcontainer.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if focus needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateFocus() {\n\t\tif ( this.isFocused ) {\n\t\t\tconst editable = this.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t}\n\t\t}\n\t}\n}\n\nmix( Renderer, ObservableMixin );\n\n// Checks if provided element is editable.\n//\n// @private\n// @param {module:engine/view/element~Element} element\n// @returns {Boolean}\nfunction isEditable( element ) {\n\tif ( element.getAttribute( 'contenteditable' ) == 'false' ) {\n\t\treturn false;\n\t}\n\n\tconst parent = element.findAncestor( element => element.hasAttribute( 'contenteditable' ) );\n\n\treturn !parent || parent.getAttribute( 'contenteditable' ) == 'true';\n}\n\n// Adds inline filler at a given position.\n//\n// The position can be given as an array of DOM nodes and an offset in that array,\n// or a DOM parent element and an offset in that element.\n//\n// @private\n// @param {Document} domDocument\n// @param {Element|Array.<Node>} domParentOrArray\n// @param {Number} offset\n// @returns {Text} The DOM text node that contains an inline filler.\nfunction addInlineFiller( domDocument, domParentOrArray, offset ) {\n\tconst childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n\tconst nodeAfterFiller = childNodes[ offset ];\n\n\tif ( isText( nodeAfterFiller ) ) {\n\t\tnodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n\n\t\treturn nodeAfterFiller;\n\t} else {\n\t\tconst fillerNode = domDocument.createTextNode( INLINE_FILLER );\n\n\t\tif ( Array.isArray( domParentOrArray ) ) {\n\t\t\tchildNodes.splice( offset, 0, fillerNode );\n\t\t} else {\n\t\t\tinsertAt( domParentOrArray, offset, fillerNode );\n\t\t}\n\n\t\treturn fillerNode;\n\t}\n}\n\n// Whether two DOM nodes should be considered as similar.\n// Nodes are considered similar if they have the same tag name.\n//\n// @private\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction areSimilar( node1, node2 ) {\n\treturn isNode( node1 ) && isNode( node2 ) &&\n\t\t!isText( node1 ) && !isText( node2 ) &&\n\t\tnode1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n}\n\n// Whether two dom nodes should be considered as the same.\n// Two nodes which are considered the same are:\n//\n//\t\t* Text nodes with the same text.\n//\t\t* Element nodes represented by the same object.\n//\t\t* Two block filler elements.\n//\n// @private\n// @param {String} blockFillerMode Block filler mode, see {@link module:engine/view/domconverter~DomConverter#blockFillerMode}.\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction sameNodes( domConverter, actualDomChild, expectedDomChild ) {\n\t// Elements.\n\tif ( actualDomChild === expectedDomChild ) {\n\t\treturn true;\n\t}\n\t// Texts.\n\telse if ( isText( actualDomChild ) && isText( expectedDomChild ) ) {\n\t\treturn actualDomChild.data === expectedDomChild.data;\n\t}\n\t// Block fillers.\n\telse if ( domConverter.isBlockFiller( actualDomChild ) &&\n\t\tdomConverter.isBlockFiller( expectedDomChild ) ) {\n\t\treturn true;\n\t}\n\n\t// Not matching types.\n\treturn false;\n}\n\n// The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n// When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n//\n//\t\t<p>foo<br/>[]</p>\n//\n// which happens a lot when using the soft line break, the browser fails to (visually) move the\n// caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\nfunction fixGeckoSelectionAfterBr( focus, domSelection ) {\n\tconst parent = focus.parent;\n\n\t// This fix works only when the focus point is at the very end of an element.\n\t// There is no point in running it in cases unrelated to the browser bug.\n\tif ( parent.nodeType != Node.ELEMENT_NODE || focus.offset != parent.childNodes.length - 1 ) {\n\t\treturn;\n\t}\n\n\tconst childAtOffset = parent.childNodes[ focus.offset ];\n\n\t// To stay on the safe side, the fix being as specific as possible, it targets only the\n\t// selection which is at the very end of the element and preceded by <br />.\n\tif ( childAtOffset && childAtOffset.tagName == 'BR' ) {\n\t\tdomSelection.addRange( domSelection.getRangeAt( 0 ) );\n\t}\n}\n\nfunction filterOutFakeSelectionContainer( domChildList, fakeSelectionContainer ) {\n\tconst childList = Array.from( domChildList );\n\n\tif ( childList.length == 0 || !fakeSelectionContainer ) {\n\t\treturn childList;\n\t}\n\n\tconst last = childList[ childList.length - 1 ];\n\n\tif ( last == fakeSelectionContainer ) {\n\t\tchildList.pop();\n\t}\n\n\treturn childList;\n}\n\n// Creates a fake selection container for a given document.\n//\n// @private\n// @param {Document} domDocument\n// @returns {HTMLElement}\nfunction createFakeSelectionContainer( domDocument ) {\n\tconst container = domDocument.createElement( 'div' );\n\n\tObject.assign( container.style, {\n\t\tposition: 'fixed',\n\t\ttop: 0,\n\t\tleft: '-9999px',\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/752.\n\t\twidth: '42px'\n\t} );\n\n\t// Fill it with a text node so we can update it later.\n\tcontainer.textContent = '\\u00A0';\n\n\treturn container;\n}\n"]}]}