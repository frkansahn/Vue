{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\conversion\\viewconsumable.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\conversion\\viewconsumable.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/conversion/viewconsumable.js"],"names":["isArray","CKEditorError","ViewConsumable","_consumables","Map","element","consumables","elementConsumables","is","set","has","ViewElementConsumables","get","add","undefined","test","consume","revert","name","attributes","classes","styles","getAttributeKeys","attribute","push","getClassNames","className","getStyleNames","style","from","instance","consumablesFromElement","getChildren","child","createFrom","_canConsumeName","type","_add","value","_test","_consume","_revert","item","items","document","stylesProcessor","getRelatedStyles","alsoName","consumableName","keys","toConsume"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/viewconsumable\n */\n\nimport { isArray } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n *\t\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n *\t\tviewConsumable.add( textNode ); // Adds text node for consumption.\n *\t\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\n *\t\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n *\t\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\n *\t\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n *\t\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\n *\t\tviewConsumable.consume( textNode ); // Consume text node.\n *\t\tviewConsumable.consume( docFragment ); // Consume document fragment.\n *\t\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n *\t\tviewConsumable.revert( textNode ); // Revert already consumed text node.\n *\t\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n */\nexport default class ViewConsumable {\n\t/**\n\t * Creates new ViewConsumable.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n\t\t * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n\t\t * For {@link module:engine/view/text~Text text nodes} and\n\t\t * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\n\t\t*/\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\n\t *\n\t *\t\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\n\t *\t\tviewConsumable.add( p, { attributes: 'name' } ); // Adds element's attribute.\n\t *\t\tviewConsumable.add( p, { classes: 'foobar' } ); // Adds element's class.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // Adds element's style\n\t *\t\tviewConsumable.add( p, { attributes: 'name', styles: 'color' } ); // Adds attribute and style.\n\t *\t\tviewConsumable.add( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\n\t *\t\tviewConsumable.add( textNode ); // Adds text node to consume.\n\t *\t\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing actual style/class.\n\t *\n\t *\t\tviewConsumable.add( p, { attributes: 'style' } ); // This call will throw an exception.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // This is properly handled style.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\tadd( element, consumables ) {\n\t\tlet elementConsumables;\n\n\t\t// For text nodes and document fragments just mark them as consumable.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\tthis._consumables.set( element, true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// For elements create new ViewElementConsumables or update already existing one.\n\t\tif ( !this._consumables.has( element ) ) {\n\t\t\telementConsumables = new ViewElementConsumables( element );\n\t\t\tthis._consumables.set( element, elementConsumables );\n\t\t} else {\n\t\t\telementConsumables = this._consumables.get( element );\n\t\t}\n\n\t\telementConsumables.add( consumables );\n\t}\n\n\t/**\n\t * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n\t * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n\t * first already consumed item is found and `null` when first non-consumable item is found.\n\t *\n\t *\t\tviewConsumable.test( p, { name: true } ); // Tests element's name.\n\t *\t\tviewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n\t *\t\tviewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n\t *\t\tviewConsumable.test( p, { styles: 'color' } ); // Tests style.\n\t *\t\tviewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n\t *\t\tviewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n\t *\t\tviewConsumable.test( textNode ); // Tests text node.\n\t *\t\tviewConsumable.test( docFragment ); // Tests document fragment.\n\t *\n\t * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n\t *\t\tviewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\n\t * when first already consumed item is found and `null` when first non-consumable item is found.\n\t */\n\ttest( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// For text nodes and document fragments return stored boolean value.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\treturn elementConsumables;\n\t\t}\n\n\t\t// For elements test consumables object.\n\t\treturn elementConsumables.test( consumables );\n\t}\n\n\t/**\n\t * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n\t *\n\t *\t\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n\t *\t\tviewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n\t *\t\tviewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n\t *\t\tviewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n\t *\t\tviewConsumable.consume( textNode ); // Consumes text node.\n\t *\t\tviewConsumable.consume( docFragment ); // Consumes document fragment.\n\t *\n\t * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n\t *\t\tviewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\n\t * otherwise returns `false`.\n\t */\n\tconsume( element, consumables ) {\n\t\tif ( this.test( element, consumables ) ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments set value to false.\n\t\t\t\tthis._consumables.set( element, false );\n\t\t\t} else {\n\t\t\t\t// For elements - consume consumables object.\n\t\t\t\tthis._consumables.get( element ).consume( consumables );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n\t * Method does not revert items that were never previously added for consumption, even if they are included in\n\t * method's call.\n\t *\n\t *\t\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n\t *\t\tviewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n\t *\t\tviewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n\t *\t\tviewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n\t *\t\tviewConsumable.revert( textNode ); // Reverts text node.\n\t *\t\tviewConsumable.revert( docFragment ); // Reverts document fragment.\n\t *\n\t * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n\t * consumption.\n\t *\n\t *\t\tviewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n\t *\t\tviewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\trevert( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables !== undefined ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments - set consumable to true.\n\t\t\t\tthis._consumables.set( element, true );\n\t\t\t} else {\n\t\t\t\t// For elements - revert items from consumables object.\n\t\t\t\telementConsumables.revert( consumables );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n\t * element's name and all its attributes, classes and styles.\n\t *\n\t * @static\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Object} consumables\n\t */\n\tstatic consumablesFromElement( element ) {\n\t\tconst consumables = {\n\t\t\telement,\n\t\t\tname: true,\n\t\t\tattributes: [],\n\t\t\tclasses: [],\n\t\t\tstyles: []\n\t\t};\n\n\t\tconst attributes = element.getAttributeKeys();\n\n\t\tfor ( const attribute of attributes ) {\n\t\t\t// Skip classes and styles - will be added separately.\n\t\t\tif ( attribute == 'style' || attribute == 'class' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconsumables.attributes.push( attribute );\n\t\t}\n\n\t\tconst classes = element.getClassNames();\n\n\t\tfor ( const className of classes ) {\n\t\t\tconsumables.classes.push( className );\n\t\t}\n\n\t\tconst styles = element.getStyleNames();\n\n\t\tfor ( const style of styles ) {\n\t\t\tconsumables.styles.push( style );\n\t\t}\n\n\t\treturn consumables;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n\t * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n\t *\n\t * @static\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n\t * from which `ViewConsumable` will be created.\n\t * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\n\t * to add all consumables. It will be returned instead of a new instance.\n\t */\n\tstatic createFrom( from, instance ) {\n\t\tif ( !instance ) {\n\t\t\tinstance = new ViewConsumable( from );\n\t\t}\n\n\t\tif ( from.is( 'text' ) ) {\n\t\t\tinstance.add( from );\n\n\t\t\treturn instance;\n\t\t}\n\n\t\t// Add `from` itself, if it is an element.\n\t\tif ( from.is( 'element' ) ) {\n\t\t\tinstance.add( from, ViewConsumable.consumablesFromElement( from ) );\n\t\t}\n\n\t\tif ( from.is( 'documentFragment' ) ) {\n\t\t\tinstance.add( from );\n\t\t}\n\n\t\tfor ( const child of from.getChildren() ) {\n\t\t\tinstance = ViewConsumable.createFrom( child, instance );\n\t\t}\n\n\t\treturn instance;\n\t}\n}\n\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n *\n * @private\n */\nclass ViewElementConsumables {\n\t/**\n\t * Creates ViewElementConsumables instance.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n\t * from which `ViewElementConsumables` is being created.\n\t */\n\tconstructor( from ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t */\n\t\tthis.element = from;\n\n\t\t/**\n\t\t * Flag indicating if name of the element can be consumed.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._canConsumeName = null;\n\n\t\t/**\n\t\t * Contains maps of element's consumables: attributes, classes and styles.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._consumables = {\n\t\t\tattributes: new Map(),\n\t\t\tstyles: new Map(),\n\t\t\tclasses: new Map()\n\t\t};\n\t}\n\n\t/**\n\t * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n\t * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n\t * styles still could be consumed):\n\t *\n\t *\t\tconsumables.add( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n\t *\n\t * @param {Object} consumables Object describing which parts of the element can be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to add as consumable.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to add as consumable.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to add as consumable.\n\t */\n\tadd( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._add( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n\t *\n\t * Element's name can be tested:\n\t *\n\t *\t\tconsumables.test( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be tested.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be tested.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to test.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to test.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to test.\n\t * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\n\t * was never marked for consumption and `false` when even one of the items was already consumed.\n\t */\n\ttest( consumables ) {\n\t\t// Check if name can be consumed.\n\t\tif ( consumables.name && !this._canConsumeName ) {\n\t\t\treturn this._canConsumeName;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tconst value = this._test( type, consumables[ type ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return true only if all can be consumed.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n\t * is already consumed - it consumes all consumable items provided.\n\t * Element's name can be consumed:\n\t *\n\t *\t\tconsumables.consume( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to consume.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to consume.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to consume.\n\t */\n\tconsume( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = false;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._consume( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n\t * Element's name can be reverted:\n\t *\n\t *\t\tconsumables.revert( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be reverted.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to revert.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to revert.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to revert.\n\t */\n\trevert( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._revert( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that adds consumables of a given type: attribute, class or style.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * type is provided - it should be handled separately by providing actual style/class type.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_add( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Class and style attributes should be handled separately in\n\t\t\t\t * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n\t\t\t\t *\n\t\t\t\t * What you have done is trying to use:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { attributes: [ 'class', 'style' ] } );\n\t\t\t\t *\n\t\t\t\t * While each class and style should be registered separately:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { classes: 'some-class', styles: 'font-weight' } );\n\t\t\t\t *\n\t\t\t\t * @error viewconsumable-invalid-attribute\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'viewconsumable-invalid-attribute: Classes and styles should be handled separately.', this );\n\t\t\t}\n\n\t\t\tconsumables.set( name, true );\n\n\t\t\tif ( type === 'styles' ) {\n\t\t\t\tfor ( const alsoName of this.element.document.stylesProcessor.getRelatedStyles( name ) ) {\n\t\t\t\t\tconsumables.set( alsoName, true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that tests consumables of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\n\t * consumed and `false` when one of the items is already consumed.\n\t */\n\t_test( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// Check all classes/styles if class/style attribute is tested.\n\t\t\t\tconst value = this._test( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\t\t\t\t// Return null if attribute is not found.\n\t\t\t\tif ( value === undefined ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif ( !value ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper method that consumes items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_consume( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for consumption - consume them all.\n\t\t\t\tthis._consume( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconsumables.set( name, false );\n\n\t\t\t\tif ( type == 'styles' ) {\n\t\t\t\t\tfor ( const toConsume of this.element.document.stylesProcessor.getRelatedStyles( name ) ) {\n\t\t\t\t\t\tconsumables.set( toConsume, false );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that reverts items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or , `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_revert( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for reverting - revert them all.\n\t\t\t\tthis._revert( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\n\t\t\t\tif ( value === false ) {\n\t\t\t\t\tconsumables.set( name, true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"]}]}