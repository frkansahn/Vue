{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\view.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\view.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/view.js"],"names":["Document","DowncastWriter","Renderer","DomConverter","Position","Range","Selection","MutationObserver","KeyObserver","FakeSelectionObserver","SelectionObserver","FocusObserver","CompositionObserver","InputObserver","ObservableMixin","mix","scrollViewportToShowTarget","injectUiElementHandling","injectQuirksHandling","CKEditorError","env","View","stylesProcessor","document","domConverter","domRoots","Map","set","_renderer","selection","bind","to","_initialDomRootAttributes","WeakMap","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","addObserver","isAndroid","on","_render","fire","listenTo","domRoot","name","viewRoot","getRoot","_name","tagName","toLowerCase","initialDomRootAttributes","Array","from","attributes","value","addClass","split","setAttribute","updateContenteditableAttribute","isReadOnly","removeClass","bindElements","markToSync","domDocuments","add","ownerDocument","evt","node","change","values","observer","observe","get","forEach","removeAttribute","attribute","delete","unbindDomElement","Observer","domElement","enable","disable","range","getFirstRange","target","viewRangeToDom","viewportOffset","isFocused","editable","editableElement","focus","forceRender","callback","isRenderingInProgress","callbackResult","_callPostFixers","err","rethrowUnexpectedError","destroy","stopListening","itemOrPosition","offset","_createAt","item","_createAfter","_createBefore","start","end","_createOn","element","_createIn","selectable","placeOrOffset","options","flag","disableObservers","render","enableObservers"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\t/**\n\t * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n\t */\n\tconstructor( stylesProcessor ) {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = new Document( stylesProcessor );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n\t\t * {@link module:engine/view/view~View#_renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter( this.document );\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Map.<String, HTMLElement>}\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRenderingInProgress\n\t\t */\n\t\tthis.set( 'isRenderingInProgress', false );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused' ).to( this.document );\n\n\t\t/**\n\t\t * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n\t\t * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n\t\t * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n\t\t * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap.<HTMLElement,Object>}\n\t\t */\n\t\tthis._initialDomRootAttributes = new WeakMap();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._renderingDisabled = false;\n\n\t\t/**\n\t\t * Internal flag that disables rendering when there are no changes since the last rendering.\n\t\t * It stores information about changed selection and changed elements from attached document roots.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasChangedSinceTheLastRendering = false;\n\n\t\t/**\n\t\t * DowncastWriter instance used in {@link #change change method} callbacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/downcastwriter~DowncastWriter}\n\t\t */\n\t\tthis._writer = new DowncastWriter( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\n\t\tif ( env.isAndroid ) {\n\t\t\tthis.addObserver( InputObserver );\n\t\t}\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\n\t\t\t// Informs that layout has changed after render.\n\t\t\tthis.document.fire( 'layoutChanged' );\n\n\t\t\t// Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\t\t\tthis._hasChangedSinceTheLastRendering = false;\n\t\t} );\n\n\t\t// Listen to the document selection changes directly.\n\t\tthis.listenTo( this.document.selection, 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n\t * with the view what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tconst initialDomRootAttributes = {};\n\n\t\t// 1. Copy and cache the attributes to remember the state of the element before attaching.\n\t\t//    The cached attributes will be restored in detachDomRoot() so the element goes to the\n\t\t//    clean state as if the editing view never used it.\n\t\t// 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n\t\t//    The editing view takes over the attribute management completely because various\n\t\t//    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n\t\t//    cannot be managed by the engine and the UI library at the same time.\n\t\tfor ( const { name, value } of Array.from( domRoot.attributes ) ) {\n\t\t\tinitialDomRootAttributes[ name ] = value;\n\n\t\t\t// Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n\t\t\t// and its descendants could have already set some using the writer.addClass() on the view\n\t\t\t// document root. They haven't been rendered yet so they are not present in the DOM root.\n\t\t\t// Using writer.setAttribute( 'class', ... ) would override them completely.\n\t\t\tif ( name === 'class' ) {\n\t\t\t\tthis._writer.addClass( value.split( ' ' ), viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.setAttribute( name, value, viewRoot );\n\t\t\t}\n\t\t}\n\n\t\tthis._initialDomRootAttributes.set( domRoot, initialDomRootAttributes );\n\n\t\tconst updateContenteditableAttribute = () => {\n\t\t\tthis._writer.setAttribute( 'contenteditable', !viewRoot.isReadOnly, viewRoot );\n\n\t\t\tif ( viewRoot.isReadOnly ) {\n\t\t\t\tthis._writer.addClass( 'ck-read-only', viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.removeClass( 'ck-read-only', viewRoot );\n\t\t\t}\n\t\t};\n\n\t\t// Set initial value.\n\t\tupdateContenteditableAttribute();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.markToSync( 'attributes', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\t\tviewRoot.on( 'change:isReadOnly', () => this.change( updateContenteditableAttribute ) );\n\n\t\tviewRoot.on( 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Detaches a DOM root element from the view element and restores its attributes to the state before\n\t * {@link #attachDomRoot `attachDomRoot()`}.\n\t *\n\t * @param {String} name Name of the root to detach.\n\t */\n\tdetachDomRoot( name ) {\n\t\tconst domRoot = this.domRoots.get( name );\n\n\t\t// Remove all root attributes so the DOM element is \"bare\".\n\t\tArray.from( domRoot.attributes ).forEach( ( { name } ) => domRoot.removeAttribute( name ) );\n\n\t\tconst initialDomRootAttributes = this._initialDomRootAttributes.get( domRoot );\n\n\t\t// Revert all view root attributes back to the state before attachDomRoot was called.\n\t\tfor ( const attribute in initialDomRootAttributes ) {\n\t\t\tdomRoot.setAttribute( attribute, initialDomRootAttributes[ attribute ] );\n\t\t}\n\n\t\tthis.domRoots.delete( name );\n\t\tthis.domConverter.unbindDomElement( domRoot );\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.forceRender();\n\t\t\t} else {\n\t\t\t\t// Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t// Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t// when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t//\n\t\t\t\t// @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n\t * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n\t * to nest calls one inside another and still performs a single rendering after all those changes are made.\n\t * It also returns the return value of its callback.\n\t *\n\t *\t\tconst text = view.change( writer => {\n\t *\t\t\tconst newText = writer.createText( 'foo' );\n\t *\t\t\twriter.insert( position1, newText );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\n\t * \t\t\treturn newText;\n\t *\t\t} );\n\t *\n\t * When the outermost change block is done and rendering to the DOM is over the\n\t * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n\t *\n\t * This method throws a `applying-view-changes-on-rendering` error when\n\t * the change block is used after rendering to the DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this.isRenderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *\n\t\t\t * * calling {@link #change} or {@link #forceRender} during rendering process,\n\t\t\t * * calling {@link #change} or {@link #forceRender} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n\t\t\t *\n\t\t\t * @error cannot-change-view-tree\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree: ' +\n\t\t\t\t'Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. ' +\n\t\t\t\t'This may cause some unexpected behavior and inconsistency between the DOM and the view.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\t\tif ( this._ongoingChange ) {\n\t\t\t\treturn callback( this._writer );\n\t\t\t}\n\n\t\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t\t// event for all nested calls.\n\t\t\tthis._ongoingChange = true;\n\t\t\tconst callbackResult = callback( this._writer );\n\t\t\tthis._ongoingChange = false;\n\n\t\t\t// This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n\t\t\t// view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n\t\t\t// changes. Also, we don't need to render anything if there're no changes since last rendering.\n\t\t\tif ( !this._renderingDisabled && this._hasChangedSinceTheLastRendering ) {\n\t\t\t\tthis._postFixersInProgress = true;\n\t\t\t\tthis.document._callPostFixers( this._writer );\n\t\t\t\tthis._postFixersInProgress = false;\n\n\t\t\t\tthis.fire( 'render' );\n\t\t\t}\n\n\t\t\treturn callbackResult;\n\t\t} catch ( err ) {\n\t\t\t// @if CK_DEBUG // throw err;\n\t\t\t/* istanbul ignore next */\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n\t * block and the view will automatically check whether it needs to render DOM or not.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\tforceRender() {\n\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.document.destroy();\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = view.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = view.createRange( start, end );\n\t *\t\tconst selection = view.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n\t *\t\tconst selection = view.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = view.createSelection();\n\t *\t\tconst selection = view.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = view.createPositionFromPath( root, path );\n\t *\t\tconst selection = view.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = view.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = view.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = view.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = view.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n\t * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n\t *\n\t * @protected\n\t * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n\t */\n\t_disableRendering( flag ) {\n\t\tthis._renderingDisabled = flag;\n\n\t\tif ( flag == false ) {\n\t\t\t// Render when you stop blocking rendering.\n\t\t\tthis.change( () => {} );\n\t\t}\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis.isRenderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis.isRenderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n"]}]}