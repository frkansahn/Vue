{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-ui\\src\\viewcollection.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-ui\\src\\viewcollection.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js"],"names":["CKEditorError","Collection","ViewCollection","locale","idProperty","on","evt","view","index","isRendered","render","element","_parentElement","insertBefore","children","remove","map","destroy","elementOrDocFragment","events","length","isStringArray","to","dest","evtName","delegate","stopDelegating","arr","every","a"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/viewcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ViewCollection extends Collection {\n\t/**\n\t * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( {\n\t\t\t// An #id Number attribute should be legal and not break the `ViewCollection` instance.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/93\n\t\t\tidProperty: 'viewUid'\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\t\tthis.on( 'add', ( evt, view, index ) => {\n\t\t\tif ( !view.isRendered ) {\n\t\t\t\tview.render();\n\t\t\t}\n\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tthis._parentElement.insertBefore( view.element, this._parentElement.children[ index ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tview.element.remove();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\n\t\t * See the view {@link module:ui/view~View#locale locale} property.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * A parent element within which child views are rendered and managed in DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis._parentElement = null;\n\t}\n\n\t/**\n\t * Destroys the view collection along with child views.\n\t * See the view {@link module:ui/view~View#destroy} method.\n\t */\n\tdestroy() {\n\t\tthis.map( view => view.destroy() );\n\t}\n\n\t/**\n\t * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n\t * {@link #remove removing} views in the collection synchronizes their\n\t * {@link module:ui/view~View#element elements} in the parent element.\n\t *\n\t * @param {HTMLElement} element A new parent element.\n\t */\n\tsetParent( elementOrDocFragment ) {\n\t\tthis._parentElement = elementOrDocFragment;\n\t}\n\n\t/**\n\t * Delegates selected events coming from within views in the collection to any\n\t * {@link module:utils/emittermixin~Emitter}.\n\t *\n\t * For the following views and collection:\n\t *\n\t *\t\tconst viewA = new View();\n\t *\t\tconst viewB = new View();\n\t *\t\tconst viewC = new View();\n\t *\n\t *\t\tconst views = parentView.createCollection();\n\t *\n\t *\t\tviews.delegate( 'eventX' ).to( viewB );\n\t *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n\t *\n\t *\t\tviews.add( viewA );\n\t *\n\t * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventX', customData );\n\t *\n\t * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventY', customData );\n\t *\n\t * See {@link module:utils/emittermixin~Emitter#delegate}.\n\t *\n\t * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n\t * {@link module:utils/emittermixin~Emitter}.\n\t * @returns {Object}\n\t * @returns {Function} return.to A function which accepts the destination of\n\t * {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n\t */\n\tdelegate( ...events ) {\n\t\tif ( !events.length || !isStringArray( events ) ) {\n\t\t\t/**\n\t\t\t * All event names must be strings.\n\t\t\t *\n\t\t\t * @error ui-viewcollection-delegate-wrong-events\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-viewcollection-delegate-wrong-events: All event names must be strings.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Selects destination for {@link module:utils/emittermixin~Emitter#delegate} events.\n\t\t\t *\n\t\t\t * @memberOf module:ui/viewcollection~ViewCollection#delegate\n\t\t\t * @function module:ui/viewcollection~ViewCollection#delegate.to\n\t\t\t * @param {module:utils/emittermixin~Emitter} dest An `Emitter` instance which is\n\t\t\t * the destination for delegated events.\n\t\t\t */\n\t\t\tto: dest => {\n\t\t\t\t// Activate delegating on existing views in this collection.\n\t\t\t\tfor ( const view of this ) {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activate delegating on future views in this collection.\n\t\t\t\tthis.on( 'add', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\t// Deactivate delegating when view is removed from this collection.\n\t\t\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.stopDelegating( evtName, dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Removes a child view from the collection. If the {@link #setParent parent element} of the\n\t * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n\t * in DOM, reflecting the order of the collection.\n\t *\n\t * See the {@link #add} method.\n\t *\n\t * @method #remove\n\t * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n\t * @returns {Object} The removed view.\n\t */\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n"]}]}