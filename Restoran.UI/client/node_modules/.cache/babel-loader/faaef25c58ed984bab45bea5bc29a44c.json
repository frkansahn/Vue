{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\text.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\text.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI7CmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfZ2V0IGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0IjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSBlbmdpbmUvbW9kZWwvdGV4dAogKi8KaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJzsgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyBjb25zdCB7IGNvbnZlcnRNYXBUb1N0cmluZ2lmaWVkT2JqZWN0IH0gPSByZXF1aXJlKCAnLi4vZGV2LXV0aWxzL3V0aWxzJyApOwoKLyoqCiAqIE1vZGVsIHRleHQgbm9kZS4gVHlwZSBvZiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9ub2Rlfk5vZGUgbm9kZX0gdGhhdCBjb250YWlucyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC90ZXh0flRleHQjZGF0YSB0ZXh0IGRhdGF9LgogKgogKiAqKkltcG9ydGFudDoqKiBzZWUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvbm9kZX5Ob2RlfSB0byByZWFkIGFib3V0IHJlc3RyaWN0aW9ucyB1c2luZyBgVGV4dGAgYW5kIGBOb2RlYCBBUEkuCiAqCiAqICoqTm90ZToqKiBrZWVwIGluIG1pbmQgdGhhdCBgVGV4dGAgaW5zdGFuY2VzIG1pZ2h0IGluZGlyZWN0bHkgZ290IHJlbW92ZWQgZnJvbSBtb2RlbCB0cmVlIHdoZW4gbW9kZWwgaXMgY2hhbmdlZC4KICogVGhpcyBoYXBwZW5zIHdoZW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvd3JpdGVyfldyaXRlciBtb2RlbCB3cml0ZXJ9IGlzIHVzZWQgdG8gY2hhbmdlIG1vZGVsIGFuZCB0aGUgdGV4dCBub2RlIGlzIG1lcmdlZCB3aXRoCiAqIGFub3RoZXIgdGV4dCBub2RlLiBUaGVuLCBib3RoIHRleHQgbm9kZXMgYXJlIHJlbW92ZWQgYW5kIGEgbmV3IHRleHQgbm9kZSBpcyBpbnNlcnRlZCBpbnRvIHRoZSBtb2RlbC4gQmVjYXVzZSBvZgogKiB0aGlzIGJlaGF2aW9yLCBrZWVwaW5nIHJlZmVyZW5jZXMgdG8gYFRleHRgIGlzIG5vdCByZWNvbW1lbmRlZC4gSW5zdGVhZCwgY29uc2lkZXIgY3JlYXRpbmcKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvbGl2ZXBvc2l0aW9ufkxpdmVQb3NpdGlvbiBsaXZlIHBvc2l0aW9ufSBwbGFjZWQgYmVmb3JlIHRoZSB0ZXh0IG5vZGUuCiAqCiAqIEBleHRlbmRzIG1vZHVsZTplbmdpbmUvbW9kZWwvbm9kZX5Ob2RlCiAqLwoKdmFyIFRleHQgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfTm9kZSkgewogIF9pbmhlcml0cyhUZXh0LCBfTm9kZSk7CgogIC8qKgogICAqIENyZWF0ZXMgYSB0ZXh0IG5vZGUuCiAgICoKICAgKiAqKk5vdGU6KiogQ29uc3RydWN0b3Igb2YgdGhpcyBjbGFzcyBzaG91bGRuJ3QgYmUgdXNlZCBkaXJlY3RseSBpbiB0aGUgY29kZS4KICAgKiBVc2UgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3dyaXRlcn5Xcml0ZXIjY3JlYXRlVGV4dH0gbWV0aG9kIGluc3RlYWQuCiAgICoKICAgKiBAcHJvdGVjdGVkCiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgTm9kZSdzIHRleHQuCiAgICogQHBhcmFtIHtPYmplY3R9IFthdHRyc10gTm9kZSdzIGF0dHJpYnV0ZXMuIFNlZSB7QGxpbmsgbW9kdWxlOnV0aWxzL3RvbWFwfnRvTWFwfSBmb3IgYSBsaXN0IG9mIGFjY2VwdGVkIHZhbHVlcy4KICAgKi8KICBmdW5jdGlvbiBUZXh0KGRhdGEsIGF0dHJzKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHQpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRleHQpLmNhbGwodGhpcywgYXR0cnMpKTsKICAgIC8qKgogICAgICogVGV4dCBkYXRhIGNvbnRhaW5lZCBpbiB0aGlzIHRleHQgbm9kZS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogICAgX3RoaXMuX2RhdGEgPSBkYXRhIHx8ICcnOwogICAgcmV0dXJuIF90aGlzOwogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFRleHQsIFt7CiAgICBrZXk6ICJpcyIsCgogICAgLyoqCiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGlzIG9iamVjdCBpcyBvZiB0aGUgZ2l2ZW4uCiAgICAgKgogICAgICoJCXRleHQuaXMoICd0ZXh0JyApOyAvLyAtPiB0cnVlCiAgICAgKgkJdGV4dC5pcyggJ25vZGUnICk7IC8vIC0+IHRydWUKICAgICAqCQl0ZXh0LmlzKCAnbW9kZWw6dGV4dCcgKTsgLy8gLT4gdHJ1ZQogICAgICoJCXRleHQuaXMoICdtb2RlbDpub2RlJyApOyAvLyAtPiB0cnVlCiAgICAgKgogICAgICoJCXRleHQuaXMoICd2aWV3OnRleHQnICk7IC8vIC0+IGZhbHNlCiAgICAgKgkJdGV4dC5pcyggJ2RvY3VtZW50U2VsZWN0aW9uJyApOyAvLyAtPiBmYWxzZQogICAgICoKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL25vZGV+Tm9kZSNpcyBDaGVjayB0aGUgZW50aXJlIGxpc3Qgb2YgbW9kZWwgb2JqZWN0c30gd2hpY2ggaW1wbGVtZW50IHRoZSBgaXMoKWAgbWV0aG9kLgogICAgICoKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgdG8gY2hlY2sgd2hlbiBgbmFtZWAgcGFyYW1ldGVyIGlzIHByZXNlbnQuCiAgICAgKiBPdGhlcndpc2UsIGl0IGFjdHMgbGlrZSB0aGUgYG5hbWVgIHBhcmFtZXRlci4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufQogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gaXModHlwZSkgewogICAgICByZXR1cm4gdHlwZSA9PSAndGV4dCcgfHwgdHlwZSA9PSAnbW9kZWw6dGV4dCcgfHwgX2dldChfZ2V0UHJvdG90eXBlT2YoVGV4dC5wcm90b3R5cGUpLCAiaXMiLCB0aGlzKS5jYWxsKHRoaXMsIHR5cGUpOwogICAgfQogICAgLyoqCiAgICAgKiBDb252ZXJ0cyBgVGV4dGAgaW5zdGFuY2UgdG8gcGxhaW4gb2JqZWN0IGFuZCByZXR1cm5zIGl0LgogICAgICoKICAgICAqIEByZXR1cm5zIHtPYmplY3R9IGBUZXh0YCBpbnN0YW5jZSBjb252ZXJ0ZWQgdG8gcGxhaW4gb2JqZWN0LgogICAgICovCgogIH0sIHsKICAgIGtleTogInRvSlNPTiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkgewogICAgICB2YXIganNvbiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKFRleHQucHJvdG90eXBlKSwgInRvSlNPTiIsIHRoaXMpLmNhbGwodGhpcyk7CgogICAgICBqc29uLmRhdGEgPSB0aGlzLmRhdGE7CiAgICAgIHJldHVybiBqc29uOwogICAgfQogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHRleHQgbm9kZSBhbmQgcmV0dXJucyBpdC4gQ3JlYXRlZCB0ZXh0IG5vZGUgaGFzIHNhbWUgdGV4dCBkYXRhIGFuZCBhdHRyaWJ1dGVzIGFzIG9yaWdpbmFsIHRleHQgbm9kZS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9tb2RlbC90ZXh0flRleHR9IGBUZXh0YCBpbnN0YW5jZSBjcmVhdGVkIHVzaW5nIGdpdmVuIHBsYWluIG9iamVjdC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfY2xvbmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jbG9uZSgpIHsKICAgICAgcmV0dXJuIG5ldyBUZXh0KHRoaXMuZGF0YSwgdGhpcy5nZXRBdHRyaWJ1dGVzKCkpOwogICAgfQogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgYFRleHRgIGluc3RhbmNlIGZyb20gZ2l2ZW4gcGxhaW4gb2JqZWN0IChpLmUuIHBhcnNlZCBKU09OIHN0cmluZykuCiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IGpzb24gUGxhaW4gb2JqZWN0IHRvIGJlIGNvbnZlcnRlZCB0byBgVGV4dGAuCiAgICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9tb2RlbC90ZXh0flRleHR9IGBUZXh0YCBpbnN0YW5jZSBjcmVhdGVkIHVzaW5nIGdpdmVuIHBsYWluIG9iamVjdC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvZmZzZXRTaXplIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aDsKICAgIH0KICAgIC8qKgogICAgICogUmV0dXJucyBhIHRleHQgZGF0YSBjb250YWluZWQgaW4gdGhlIG5vZGUuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogImRhdGEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kYXRhOwogICAgfQogIH1dLCBbewogICAga2V5OiAiZnJvbUpTT04iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21KU09OKGpzb24pIHsKICAgICAgcmV0dXJuIG5ldyBUZXh0KGpzb24uZGF0YSwganNvbi5hdHRyaWJ1dGVzKTsKICAgIH0gLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB0b1N0cmluZygpIHsKICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCXJldHVybiBgIyR7IHRoaXMuZGF0YSB9YDsKICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gfQogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyBsb2dFeHRlbmRlZCgpIHsKICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnNvbGUubG9nKCBgTW9kZWxUZXh0OiAkeyB0aGlzIH0sIGF0dHJzOiAkeyBjb252ZXJ0TWFwVG9TdHJpbmdpZmllZE9iamVjdCggdGhpcy5nZXRBdHRyaWJ1dGVzKCkgKSB9YCApOwogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CiAgICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIGxvZygpIHsKICAgIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnNvbGUubG9nKCAnTW9kZWxUZXh0OiAnICsgdGhpcyApOwogICAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CgogIH1dKTsKCiAgcmV0dXJuIFRleHQ7Cn0oTm9kZSk7CgpleHBvcnQgeyBUZXh0IGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"],"names":["Node","Text","data","attrs","_data","type","json","getAttributes","length","attributes"],"mappings":";;;;;;;AAAA;;;;;AAKA;;;AAIA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;;AAEA;;;;;;;;;;;;;;IAaqBC,I;;;;;AACpB;;;;;;;;;;AAUA,gBAAaC,IAAb,EAAmBC,KAAnB,EAA2B;AAAA;;AAAA;;AAC1B,8EAAOA,KAAP;AAEA;;;;;;;AAMA,UAAKC,KAAL,GAAaF,IAAI,IAAI,EAArB;AAT0B;AAU1B;AAED;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;uBAiBIG,I,EAAO;AACV,aAAOA,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,YAA1B,iEAAoDA,IAApD,CAAP;AACA;AAED;;;;;;;;6BAKS;AACR,UAAMC,IAAI,mEAAV;;AAEAA,MAAAA,IAAI,CAACJ,IAAL,GAAY,KAAKA,IAAjB;AAEA,aAAOI,IAAP;AACA;AAED;;;;;;;;;6BAMS;AACR,aAAO,IAAIL,IAAJ,CAAU,KAAKC,IAAf,EAAqB,KAAKK,aAAL,EAArB,CAAP;AACA;AAED;;;;;;;;;wBA1DiB;AAChB,aAAO,KAAKL,IAAL,CAAUM,MAAjB;AACA;AAED;;;;;;;;;wBAMW;AACV,aAAO,KAAKJ,KAAZ;AACA;;;6BAoDgBE,I,EAAO;AACvB,aAAO,IAAIL,IAAJ,CAAUK,IAAI,CAACJ,IAAf,EAAqBI,IAAI,CAACG,UAA1B,CAAP;AACA,K,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;EAxGiCT,I;;SAAbC,I","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'model:text' ); // -> true\n\t *\t\ttext.is( 'model:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'view:text' ); // -> false\n\t *\t\ttext.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'model:text' || super.is( type );\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( `ModelText: ${ this }, attrs: ${ convertMapToStringifiedObject( this.getAttributes() ) }` );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}