{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\selection.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\selection.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js"],"names":["CKEditorError","Range","Position","mix","EmitterMixin","Node","count","isIterable","DocumentSelection","Selection","selectable","placeOrOffset","options","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","setTo","range","clone","first","start","isBefore","last","end","isAfter","firstRange","getFirstRange","lastRange","getLastRange","otherSelection","isFake","fakeSelectionLabel","rangeCount","anchor","isEqual","focus","thisRange","found","otherRange","isBackward","numOfRangesA","getRanges","numOfRangesB","rangeA","getTrimmed","rangeB","getContainedElement","_setRanges","_setFakeOptions","fake","label","backward","undefined","_createIn","_createOn","_createAt","fire","itemOrPosition","offset","newFocus","compareWith","pop","_addRange","type","newRanges","isLastBackward","Array","from","_pushRange","storedRange","isIntersecting","addedRange","intersectingRange","push","length","isCollapsed","editableElement"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/selection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Range from './range';\nimport Position from './position';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Node from './node';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport DocumentSelection from './documentselection';\n\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\nexport default class Selection {\n\t/**\n\t * Creates new selection instance.\n\t *\n\t * **Note**: The selection constructor is available as a factory method:\n\t *\n\t * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n\t * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Stores all ranges that are selected.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Specifies whether selection instance is fake.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isFake = false;\n\n\t\t/**\n\t\t * Fake selection's label.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._fakeSelectionLabel = '';\n\n\t\tthis.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst anchor = this._lastRangeBackward ? range.end : range.start;\n\n\t\treturn anchor.clone();\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst focus = this._lastRangeBackward ? range.start : range.end;\n\n\t\treturn focus.clone();\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.rangeCount === 1 && this._ranges[ 0 ].isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tif ( this.anchor ) {\n\t\t\treturn this.anchor.editableElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield range.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? first.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? last.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst firstRange = this.getFirstRange();\n\n\t\treturn firstRange ? firstRange.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.isFake != otherSelection.isFake ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\tif ( this.isBackward != otherSelection.isBackward ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst numOfRangesA = count( this.getRanges() );\n\t\tconst numOfRangesB = count( otherSelection.getRanges() );\n\n\t\t// If selections have different number of ranges, they cannot be similar.\n\t\tif ( numOfRangesA != numOfRangesB ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If both selections have no ranges, they are similar.\n\t\tif ( numOfRangesA == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if each range in one selection has a similar range in other selection.\n\t\tfor ( let rangeA of this.getRanges() ) {\n\t\t\trangeA = rangeA.getTrimmed();\n\n\t\t\tlet found = false;\n\n\t\t\tfor ( let rangeB of otherSelection.getRanges() ) {\n\t\t\t\trangeB = rangeB.getTrimmed();\n\n\t\t\t\tif ( rangeA.start.isEqual( rangeB.start ) && rangeA.end.isEqual( rangeB.end ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// There were no ranges that weren't matched. Selections are similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.getFirstRange().getContainedElement();\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t \t// Sets selection to contents of DocumentSelection.\n\t *\t\tselection.setTo( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tselection.setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tselection.setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t\tthis._setFakeOptions( { fake: selectable.isFake, label: selectable.fakeSelectionLabel } );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset === undefined ) {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t} else if ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t\tthis._setFakeOptions( options );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\t// Array.from() is used to prevent setting ranges to the old iterable\n\t\t\tthis._setRanges( selectable, placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error view-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-selection-setTo-not-selectable: Cannot set selection to given place.', this );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error view-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tthis._ranges.pop();\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._addRange( new Range( newFocus, anchor ), true );\n\t\t} else {\n\t\t\tthis._addRange( new Range( anchor, newFocus ) );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'view:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'model:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'view:selection';\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n\t * Accepts a flag describing in which way the selection is made.\n\t *\n\t * @private\n\t * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end\n\t * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\t// New ranges should be copied to prevent removing them by setting them to `[]` first.\n\t\t// Only applies to situations when selection is set to the same selection or same selection's ranges.\n\t\tnewRanges = Array.from( newRanges );\n\n\t\tthis._ranges = [];\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._addRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\t}\n\n\t/**\n\t * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n\t * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n\t * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n\t * properly handled by screen readers).\n\t *\n\t * @private\n\t * @param {Object} [options] Options.\n\t * @param {Boolean} [options.fake] If set to true selection will be marked as `fake`.\n\t * @param {String} [options.label=''] Fake selection label.\n\t */\n\t_setFakeOptions( options = {} ) {\n\t\tthis._isFake = !!options.fake;\n\t\tthis._fakeSelectionLabel = options.fake ? options.label || '' : '';\n\t}\n\n\t/**\n\t * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n\t * selection instance and you can safely operate on it.\n\t *\n\t * Accepts a flag describing in which way the selection is made - passed range might be selected from\n\t * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n\t * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n\t * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in Selection instance.\n\t *\n\t * @private\n\t * @fires change\n\t * @param {module:engine/view/range~Range} range\n\t * @param {Boolean} [isBackward]\n\t */\n\t_addRange( range, isBackward = false ) {\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n\t\t\t *\n\t\t\t * @error view-selection-add-range-not-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-add-range-not-range: ' +\n\t\t\t\t'Selection range set to an object that is not an instance of view.Range',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._pushRange( range );\n\t\tthis._lastRangeBackward = !!isBackward;\n\t}\n\n\t/**\n\t * Adds range to selection - creates copy of given range so it can be safely used and modified.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in selection instance.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t */\n\t_pushRange( range ) {\n\t\tfor ( const storedRange of this._ranges ) {\n\t\t\tif ( range.isIntersecting( storedRange ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range from selection.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-range-intersects\n\t\t\t\t * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ addedRange: range, intersectingRange: storedRange }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/view/selection~Selection#setTo}\n *\n * @typedef {\n *    module:engine/view/selection~Selection|\n *    module:engine/view/documentselection~DocumentSelection|\n *    module:engine/view/position~Position|\n *    Iterable.<module:engine/view/range~Range>|\n *    module:engine/view/range~Range|\n *    module:engine/view/item~Item|\n *    null\n * } module:engine/view/selection~Selectable\n */\n"]}]}