{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\plugincollection.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\plugincollection.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-core/src/plugincollection.js"],"names":["CKEditorError","attachLinkToDocumentation","EmitterMixin","mix","PluginCollection","context","availablePlugins","contextPlugins","_context","_plugins","Map","_availablePlugins","PluginConstructor","pluginName","set","_contextPlugins","pluginInstance","Symbol","iterator","entry","key","plugin","get","errorMsg","name","has","plugins","removePlugins","that","loading","Set","loaded","pluginConstructors","mapToAvailableConstructors","removePluginConstructors","missingPlugins","getMissingPluginNames","console","error","Promise","reject","all","map","loadPlugin","then","initPlugins","includes","instantiatePlugin","catch","err","loadedPlugins","method","reduce","promise","bind","resolve","add","requires","forEach","RequiredPluginConstructorOrName","RequiredPluginConstructor","getPluginConstructor","isContextPlugin","requiredBy","_add","push","PluginConstructorOrName","pluginNameOrConstructor","length","filter","promises","destroy","plugin1","constructor","plugin2"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugincollection\n */\n\n/* globals console */\n\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class PluginCollection {\n\t/**\n\t * Creates an instance of the plugin collection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t * Allows to provide a list of already loaded plugins. These plugins will not be destroyed along with this collection.\n\t *\n\t * @param {module:core/editor/editor~Editor|module:core/context~Context} context\n\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#init} is used with plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t * @param {Iterable.<Array>} contextPlugins A list of already initialized plugins represented by a\n\t * `[ PluginConstructor, pluginInstance ]` pair.\n\t */\n\tconstructor( context, availablePlugins = [], contextPlugins = [] ) {\n\t\t/**\n\t\t * @protected\n\t\t * @type {module:core/editor/editor~Editor|module:core/context~Context}\n\t\t */\n\t\tthis._context = context;\n\n\t\t/**\n\t\t * @protected\n\t\t * @type {Map}\n\t\t */\n\t\tthis._plugins = new Map();\n\n\t\t/**\n\t\t * A map of plugin constructors that can be retrieved by their names.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String|Function,Function>}\n\t\t */\n\t\tthis._availablePlugins = new Map();\n\n\t\tfor ( const PluginConstructor of availablePlugins ) {\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Map of {@link module:core/contextplugin~ContextPlugin context plugins} which can be retrieved by their constructors or instances.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map<Function,Function>}\n\t\t */\n\t\tthis._contextPlugins = new Map();\n\n\t\tfor ( const [ PluginConstructor, pluginInstance ] of contextPlugins ) {\n\t\t\tthis._contextPlugins.set( PluginConstructor, pluginInstance );\n\t\t\tthis._contextPlugins.set( pluginInstance, PluginConstructor );\n\n\t\t\t// To make it possible to require a plugin by its name.\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tfor ( const entry of this._plugins ) {\n\t\t\tif ( typeof entry[ 0 ] == 'function' ) {\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Get clipboard plugin instance\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n\t *\t\t\t\t// Do something on clipboard input.\n\t *\t\t\t} );\n\t *\t\t}\n\t *\n\t * **Note**: This method will throw error if plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n\t * to check if plugin is available.\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {module:core/plugin~PluginInterface}\n\t */\n\tget( key ) {\n\t\tconst plugin = this._plugins.get( key );\n\n\t\tif ( !plugin ) {\n\t\t\t/**\n\t\t\t * The plugin is not loaded and could not be obtained.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n\t\t\t * the plugin collection.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n\t\t\t * to check if plugin was loaded.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-loaded\n\t\t\t * @param {String} plugin The name of the plugin which is not loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-loaded: The requested plugin is not loaded.';\n\n\t\t\tlet pluginName = key;\n\n\t\t\tif ( typeof key == 'function' ) {\n\t\t\t\tpluginName = key.pluginName || key.name;\n\t\t\t}\n\n\t\t\tthrow new CKEditorError( errorMsg, this._context, { plugin: pluginName } );\n\t\t}\n\n\t\treturn plugin;\n\t}\n\n\t/**\n\t * Checks if a plugin is loaded.\n\t *\n\t *\t\t// Check if the 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Now use the clipboard plugin instance:\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {Boolean}\n\t */\n\thas( key ) {\n\t\treturn this._plugins.has( key );\n\t}\n\n\t/**\n\t * Initializes a set of plugins and adds them to the collection.\n\t *\n\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) works only if\n\t * `availablePlugins` were passed to the {@link #constructor}.\n\t * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\n\t * that should not be loaded (despite being specified in the `plugins` array).\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which gets resolved once all plugins are loaded\n\t * and available in the collection.\n\t */\n\tinit( plugins, removePlugins = [] ) {\n\t\tconst that = this;\n\t\tconst context = this._context;\n\t\tconst loading = new Set();\n\t\tconst loaded = [];\n\n\t\tconst pluginConstructors = mapToAvailableConstructors( plugins );\n\t\tconst removePluginConstructors = mapToAvailableConstructors( removePlugins );\n\t\tconst missingPlugins = getMissingPluginNames( plugins );\n\n\t\tif ( missingPlugins ) {\n\t\t\t/**\n\t\t\t * Some plugins are not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**, it means\n\t\t\t * that you try to enable a plugin which was not included in that build. This may be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n\t\t\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through reference (as a constructor function). Check out the examples in\n\t\t\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.';\n\n\t\t\t// Log the error so it's more visible on the console. Hopefully, for better DX.\n\t\t\tconsole.error( attachLinkToDocumentation( errorMsg ), { plugins: missingPlugins } );\n\n\t\t\treturn Promise.reject( new CKEditorError( errorMsg, context, { plugins: missingPlugins } ) );\n\t\t}\n\n\t\treturn Promise.all( pluginConstructors.map( loadPlugin ) )\n\t\t\t.then( () => initPlugins( loaded, 'init' ) )\n\t\t\t.then( () => initPlugins( loaded, 'afterInit' ) )\n\t\t\t.then( () => loaded );\n\n\t\tfunction loadPlugin( PluginConstructor ) {\n\t\t\tif ( removePluginConstructors.includes( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The plugin is already loaded or being loaded - do nothing.\n\t\t\tif ( that._plugins.has( PluginConstructor ) || loading.has( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn instantiatePlugin( PluginConstructor )\n\t\t\t\t.catch( err => {\n\t\t\t\t\t/**\n\t\t\t\t\t * It was not possible to load the plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * This is a generic error logged to the console when a JavaSript error is thrown during the initialization\n\t\t\t\t\t * of one of the plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * If you correctly handled the promise returned by the editor's `create()` method (like shown below),\n\t\t\t\t\t * you will find the original error logged to the console, too:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tClassicEditor.create( document.getElementById( 'editor' ) )\n\t\t\t\t\t *\t\t\t.then( editor => {\n\t\t\t\t\t *\t\t\t\t// ...\n\t\t\t\t\t * \t\t\t} )\n\t\t\t\t\t *\t\t\t.catch( error => {\n\t\t\t\t\t *\t\t\t\tconsole.error( error );\n\t\t\t\t\t *\t\t\t} );\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-load\n\t\t\t\t\t * @param {String} plugin The name of the plugin that could not be loaded.\n\t\t\t\t\t */\n\t\t\t\t\tconsole.error( attachLinkToDocumentation(\n\t\t\t\t\t\t'plugincollection-load: It was not possible to load the plugin.'\n\t\t\t\t\t), { plugin: PluginConstructor } );\n\n\t\t\t\t\tthrow err;\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction initPlugins( loadedPlugins, method ) {\n\t\t\treturn loadedPlugins.reduce( ( promise, plugin ) => {\n\t\t\t\tif ( !plugin[ method ] ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\tif ( that._contextPlugins.has( plugin ) ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\treturn promise.then( plugin[ method ].bind( plugin ) );\n\t\t\t}, Promise.resolve() );\n\t\t}\n\n\t\tfunction instantiatePlugin( PluginConstructor ) {\n\t\t\treturn new Promise( resolve => {\n\t\t\t\tloading.add( PluginConstructor );\n\n\t\t\t\tif ( PluginConstructor.requires ) {\n\t\t\t\t\tPluginConstructor.requires.forEach( RequiredPluginConstructorOrName => {\n\t\t\t\t\t\tconst RequiredPluginConstructor = getPluginConstructor( RequiredPluginConstructorOrName );\n\n\t\t\t\t\t\tif ( PluginConstructor.isContextPlugin && !RequiredPluginConstructor.isContextPlugin ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * If a plugin is a context plugin, all plugins it requires should also be context plugins\n\t\t\t\t\t\t\t * instead of plugins. In other words, if one plugin can be used in the context,\n\t\t\t\t\t\t\t * all its requirements should also be ready to be used in the context. Note that the context\n\t\t\t\t\t\t\t * provides only a part of the API provided by the editor. If one plugin needs a full\n\t\t\t\t\t\t\t * editor API, all plugins which require it are considered as plugins that need a full\n\t\t\t\t\t\t\t * editor API.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @error plugincollection-context-required\n\t\t\t\t\t\t\t * @param {String} plugin The name of the required plugin.\n\t\t\t\t\t\t\t * @param {String} requiredBy The name of the parent plugin.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'plugincollection-context-required: Context plugin can not require plugin which is not a context plugin',\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t{ plugin: RequiredPluginConstructor.name, requiredBy: PluginConstructor.name }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( removePlugins.includes( RequiredPluginConstructor ) ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @error plugincollection-required\n\t\t\t\t\t\t\t * @param {String} plugin The name of the required plugin.\n\t\t\t\t\t\t\t * @param {String} requiredBy The name of the parent plugin.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' +\n\t\t\t\t\t\t\t\t'the `removePlugins` option.',\n\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t{ plugin: RequiredPluginConstructor.name, requiredBy: PluginConstructor.name }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadPlugin( RequiredPluginConstructor );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tconst plugin = that._contextPlugins.get( PluginConstructor ) || new PluginConstructor( context );\n\t\t\t\tthat._add( PluginConstructor, plugin );\n\t\t\t\tloaded.push( plugin );\n\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginConstructor( PluginConstructorOrName ) {\n\t\t\tif ( typeof PluginConstructorOrName == 'function' ) {\n\t\t\t\treturn PluginConstructorOrName;\n\t\t\t}\n\n\t\t\treturn that._availablePlugins.get( PluginConstructorOrName );\n\t\t}\n\n\t\tfunction getMissingPluginNames( plugins ) {\n\t\t\tconst missingPlugins = [];\n\n\t\t\tfor ( const pluginNameOrConstructor of plugins ) {\n\t\t\t\tif ( !getPluginConstructor( pluginNameOrConstructor ) ) {\n\t\t\t\t\tmissingPlugins.push( pluginNameOrConstructor );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn missingPlugins.length ? missingPlugins : null;\n\t\t}\n\n\t\tfunction mapToAvailableConstructors( plugins ) {\n\t\t\treturn plugins\n\t\t\t\t.map( pluginNameOrConstructor => getPluginConstructor( pluginNameOrConstructor ) )\n\t\t\t\t.filter( PluginConstructor => !!PluginConstructor );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all loaded plugins.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tconst promises = [];\n\n\t\tfor ( const [ , pluginInstance ] of this ) {\n\t\t\tif ( typeof pluginInstance.destroy == 'function' && !this._contextPlugins.has( pluginInstance ) ) {\n\t\t\t\tpromises.push( pluginInstance.destroy() );\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all( promises );\n\t}\n\n\t/**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @protected\n\t * @param {Function} PluginConstructor The plugin constructor.\n\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n\t */\n\t_add( PluginConstructor, plugin ) {\n\t\tthis._plugins.set( PluginConstructor, plugin );\n\n\t\tconst pluginName = PluginConstructor.pluginName;\n\n\t\tif ( !pluginName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._plugins.has( pluginName ) ) {\n\t\t\t/**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n\t\t\t * This will lead to runtime conflicts between these plugins.\n\t\t\t *\n\t\t\t * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n\t\t\t * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n\t\t\t * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n\t\t\t *\n\t\t\t * Check your import paths and the list of plugins passed to\n\t\t\t * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t\t * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t\t\t *\n\t\t\t * The second option is that your `node_modules/` directory contains duplicated versions of the same\n\t\t\t * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n\t\t\t * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n\t\t\t * of packages, their dependencies may need to be installed in more than one version which may lead to this\n\t\t\t * warning.\n\t\t\t *\n\t\t\t * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n\t\t\t * dependencies of this plugin are being duplicated.\n\t\t\t * They are already built into that editor build and now get added for the second time as dependencies\n\t\t\t * of the plugin you are installing.\n\t\t\t *\n\t\t\t * Read more about {@glink builds/guides/integration/installing-plugins installing plugins}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param {String} pluginName The duplicated plugin name.\n\t\t\t * @param {Function} plugin1 The first plugin constructor.\n\t\t\t * @param {Function} plugin2 The second plugin constructor.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.',\n\t\t\t\tnull,\n\t\t\t\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\n\t\t\t);\n\t\t}\n\n\t\tthis._plugins.set( pluginName, plugin );\n\t}\n}\n\nmix( PluginCollection, EmitterMixin );\n"]}]}