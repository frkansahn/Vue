{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\differ.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\differ.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/differ.js"],"names":["Position","Range","Differ","markerCollection","_markerCollection","_changesInElement","Map","_elementSnapshots","_changedMarkers","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","item","_isInInsertedElement","parent","_markRemove","startOffset","offsetSize","_markInsert","range","_createOn","getMarkersIntersectingRange","marker","markerRange","getRange","bufferMarkerChange","name","affectsData","operation","type","position","offset","nodes","maxOffset","getItems","shallow","_markAttribute","sourcePosition","isEqual","targetPosition","getShiftedBy","howMany","sourceParentInserted","targetParentInserted","getMovedRangeStart","_createFromPositionAndShift","splitElement","splitPosition","insertionPosition","graveyardPosition","mergedElement","graveyardParent","mergedIntoElement","markerName","oldRange","newRange","buffered","get","set","delete","result","change","push","Array","from","map","data","size","options","includeChangesInGraveyard","slice","diffSet","keys","element","changes","sort","a","b","snapshotChildren","elementChildren","_getChildrenSnapshot","getChildren","actions","_generateActionsFromChanges","length","i","j","action","_getInsertDiff","_getRemoveDiff","elementAttributes","attributes","snapshotAttributes","_createAt","index","offsetToIndex","getChild","_getAttributesDiff","root","rootName","changeCount","isBefore","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","isFlat","attributeKey","attributeOldValue","attributeNewValue","end","splice","filter","_changesInGraveyardFilter","clear","changeItem","count","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","has","inc","nodesToHandle","old","incEnd","oldEnd","unshift","intersectionLength","howManyAfter","attributePart","oldAttributes","newAttributes","diffs","key","oldValue","newValue","start","clone","is","children","snapshot","child","getAttributes","oldChildrenLength","oldChildrenHandled","repeat","split","entry","posInGy","rangeInGy"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/differ\n */\n\nimport Position from './position';\nimport Range from './range';\n\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nexport default class Differ {\n\t/**\n\t * Creates a `Differ` instance.\n\t *\n\t * @param {module:engine/model/markercollection~MarkerCollection} markerCollection Model's marker collection.\n\t */\n\tconstructor( markerCollection ) {\n\t\t/**\n\t\t * Reference to the model's marker collection.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markerCollection = markerCollection;\n\n\t\t/**\n\t\t * A map that stores changes that happened in a given element.\n\t\t *\n\t\t * The keys of the map are references to the model elements.\n\t\t * The values of the map are arrays with changes that were done on this element.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changesInElement = new Map();\n\n\t\t/**\n\t\t * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n\t\t * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n\t\t * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._elementSnapshots = new Map();\n\n\t\t/**\n\t\t * A map that stores all changed markers.\n\t\t *\n\t\t * The keys of the map are marker names.\n\t\t * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\n\t\t * state before and after the change.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changedMarkers = new Map();\n\n\t\t/**\n\t\t * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n\t\t * when changes are sorted.\n\t\t *\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._changeCount = 0;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n\t\t * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores those changes that did not take place in graveyard root.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChanges = null;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n\t\t * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChangesWithGraveyard = null;\n\t}\n\n\t/**\n\t * Informs whether there are any changes buffered in `Differ`.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._changesInElement.size == 0 && this._changedMarkers.size == 0;\n\t}\n\n\t/**\n\t * Marks given `item` in differ to be \"refreshed\". It means that the item will be marked as removed and inserted in the differ changes\n\t * set, so it will be effectively re-converted when differ changes will be handled by a dispatcher.\n\t *\n\t * @param {module:engine/model/item~Item} item Item to refresh.\n\t */\n\trefreshItem( item ) {\n\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._markRemove( item.parent, item.startOffset, item.offsetSize );\n\t\tthis._markInsert( item.parent, item.startOffset, item.offsetSize );\n\n\t\tconst range = Range._createOn( item );\n\n\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers the given operation. An operation has to be buffered before it is executed.\n\t *\n\t * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\n\t * in the state before the operation is executed.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\n\t */\n\tbufferOperation( operation ) {\n\t\t// Below we take an operation, check its type, then use its parameters in marking (private) methods.\n\t\t// The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n\t\t// Marking changes in them would cause a \"double\" changing then.\n\t\t//\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, operation.nodes.maxOffset );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'addAttribute':\n\t\t\tcase 'removeAttribute':\n\t\t\tcase 'changeAttribute': {\n\t\t\t\tfor ( const item of operation.range.getItems( { shallow: true } ) ) {\n\t\t\t\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._markAttribute( item );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'remove':\n\t\t\tcase 'move':\n\t\t\tcase 'reinsert': {\n\t\t\t\t// When range is moved to the same position then not mark it as a change.\n\t\t\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1664.\n\t\t\t\tif (\n\t\t\t\t\toperation.sourcePosition.isEqual( operation.targetPosition ) ||\n\t\t\t\t\toperation.sourcePosition.getShiftedBy( operation.howMany ).isEqual( operation.targetPosition )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceParentInserted = this._isInInsertedElement( operation.sourcePosition.parent );\n\t\t\t\tconst targetParentInserted = this._isInInsertedElement( operation.targetPosition.parent );\n\n\t\t\t\tif ( !sourceParentInserted ) {\n\t\t\t\t\tthis._markRemove( operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tif ( !targetParentInserted ) {\n\t\t\t\t\tthis._markInsert( operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'rename': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markRemove( operation.position.parent, operation.position.offset, 1 );\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, 1 );\n\n\t\t\t\tconst range = Range._createFromPositionAndShift( operation.position, 1 );\n\n\t\t\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\t\t\tconst markerRange = marker.getRange();\n\n\t\t\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'split': {\n\t\t\t\tconst splitElement = operation.splitPosition.parent;\n\n\t\t\t\t// Mark that children of the split element were removed.\n\t\t\t\tif ( !this._isInInsertedElement( splitElement ) ) {\n\t\t\t\t\tthis._markRemove( splitElement, operation.splitPosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the new element (split copy) was inserted.\n\t\t\t\tif ( !this._isInInsertedElement( operation.insertionPosition.parent ) ) {\n\t\t\t\t\tthis._markInsert( operation.insertionPosition.parent, operation.insertionPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n\t\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\t\tthis._markRemove( operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'merge': {\n\t\t\t\t// Mark that the merged element was removed.\n\t\t\t\tconst mergedElement = operation.sourcePosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedElement.parent ) ) {\n\t\t\t\t\tthis._markRemove( mergedElement.parent, mergedElement.startOffset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the merged element was inserted into graveyard.\n\t\t\t\tconst graveyardParent = operation.graveyardPosition.parent;\n\n\t\t\t\tthis._markInsert( graveyardParent, operation.graveyardPosition.offset, 1 );\n\n\t\t\t\t// Mark that children of merged element were inserted at new parent.\n\t\t\t\tconst mergedIntoElement = operation.targetPosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedIntoElement ) ) {\n\t\t\t\t\tthis._markInsert( mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers a marker change.\n\t *\n\t * @param {String} markerName The name of the marker that changed.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\n\t * been created.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\n\t * @param {Boolean} affectsData Flag indicating whether marker affects the editor data.\n\t */\n\tbufferMarkerChange( markerName, oldRange, newRange, affectsData ) {\n\t\tconst buffered = this._changedMarkers.get( markerName );\n\n\t\tif ( !buffered ) {\n\t\t\tthis._changedMarkers.set( markerName, {\n\t\t\t\toldRange,\n\t\t\t\tnewRange,\n\t\t\t\taffectsData\n\t\t\t} );\n\t\t} else {\n\t\t\tbuffered.newRange = newRange;\n\t\t\tbuffered.affectsData = affectsData;\n\n\t\t\tif ( buffered.oldRange == null && buffered.newRange == null ) {\n\t\t\t\t// The marker is going to be removed (`newRange == null`) but it did not exist before the first buffered change\n\t\t\t\t// (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\n\t\t\t\tthis._changedMarkers.delete( markerName );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all markers that should be removed as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToRemove() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.oldRange != null ) {\n\t\t\t\tresult.push( { name, range: change.oldRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which should be added as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToAdd() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.newRange != null ) {\n\t\t\t\tresult.push( { name, range: change.newRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which changed.\n\t *\n\t * @returns {Array.<Object>}\n\t */\n\tgetChangedMarkers() {\n\t\treturn Array.from( this._changedMarkers ).map( item => (\n\t\t\t{\n\t\t\t\tname: item[ 0 ],\n\t\t\t\tdata: {\n\t\t\t\t\toldRange: item[ 1 ].oldRange,\n\t\t\t\t\tnewRange: item[ 1 ].newRange\n\t\t\t\t}\n\t\t\t}\n\t\t) );\n\t}\n\n\t/**\n\t * Checks whether some of the buffered changes affect the editor data.\n\t *\n\t * Types of changes which affect the editor data:\n\t *\n\t * * model structure changes,\n\t * * attribute changes,\n\t * * changes of markers which were defined as `affectingData`.\n\t *\n\t * @returns {Boolean}\n\t */\n\thasDataChanges() {\n\t\tfor ( const [ , change ] of this._changedMarkers ) {\n\t\t\tif ( change.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// If markers do not affect the data, check whether there are some changes in elements.\n\t\treturn this._changesInElement.size > 0;\n\t}\n\n\t/**\n\t * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n\t * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n\t *\n\t * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\n\t * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\n\t * another one, it will be on an earlier index in the diff set.\n\t *\n\t * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n\t * previous {@link #getChanges} call, the next call will return the cached value.\n\t *\n\t * @param {Object} options Additional options.\n\t * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\n\t * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n\t * @returns {Array.<Object>} Diff between the old and the new model tree state.\n\t */\n\tgetChanges( options = { includeChangesInGraveyard: false } ) {\n\t\t// If there are cached changes, just return them instead of calculating changes again.\n\t\tif ( this._cachedChanges ) {\n\t\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\t\treturn this._cachedChangesWithGraveyard.slice();\n\t\t\t} else {\n\t\t\t\treturn this._cachedChanges.slice();\n\t\t\t}\n\t\t}\n\n\t\t// Will contain returned results.\n\t\tconst diffSet = [];\n\n\t\t// Check all changed elements.\n\t\tfor ( const element of this._changesInElement.keys() ) {\n\t\t\t// Get changes for this element and sort them.\n\t\t\tconst changes = this._changesInElement.get( element ).sort( ( a, b ) => {\n\t\t\t\tif ( a.offset === b.offset ) {\n\t\t\t\t\tif ( a.type != b.type ) {\n\t\t\t\t\t\t// If there are multiple changes at the same position, \"remove\" change should be first.\n\t\t\t\t\t\t// If the order is different, for example, we would first add some nodes and then removed them\n\t\t\t\t\t\t// (instead of the nodes that we should remove).\n\t\t\t\t\t\treturn a.type == 'remove' ? -1 : 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn a.offset < b.offset ? -1 : 1;\n\t\t\t} );\n\n\t\t\t// Get children of this element before any change was applied on it.\n\t\t\tconst snapshotChildren = this._elementSnapshots.get( element );\n\t\t\t// Get snapshot of current element's children.\n\t\t\tconst elementChildren = _getChildrenSnapshot( element.getChildren() );\n\n\t\t\t// Generate actions basing on changes done on element.\n\t\t\tconst actions = _generateActionsFromChanges( snapshotChildren.length, changes );\n\n\t\t\tlet i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n\t\t\tlet j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n\n\t\t\t// Process every action.\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'i' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getInsertDiff( element, i, elementChildren[ i ].name ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t} else if ( action === 'r' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getRemoveDiff( element, i, snapshotChildren[ j ].name ) );\n\n\t\t\t\t\tj++;\n\t\t\t\t} else if ( action === 'a' ) {\n\t\t\t\t\t// Take attributes from saved and current children.\n\t\t\t\t\tconst elementAttributes = elementChildren[ i ].attributes;\n\t\t\t\t\tconst snapshotAttributes = snapshotChildren[ j ].attributes;\n\t\t\t\t\tlet range;\n\n\t\t\t\t\tif ( elementChildren[ i ].name == '$text' ) {\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element, i + 1 ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index = element.offsetToIndex( i );\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element.getChild( index ), 0 ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Generate diff items for this change (there might be multiple attributes changed and\n\t\t\t\t\t// there is a single diff for each of them) and insert them into the diff set.\n\t\t\t\t\tdiffSet.push( ...this._getAttributesDiff( range, snapshotAttributes, elementAttributes ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\t// `action` is 'equal'. Child not changed.\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Then, sort the changes by the position (change at position before other changes is first).\n\t\tdiffSet.sort( ( a, b ) => {\n\t\t\t// If the change is in different root, we don't care much, but we'd like to have all changes in given\n\t\t\t// root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n\t\t\t// will be processed first.\n\t\t\tif ( a.position.root != b.position.root ) {\n\t\t\t\treturn a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n\t\t\t}\n\n\t\t\t// If change happens at the same position...\n\t\t\tif ( a.position.isEqual( b.position ) ) {\n\t\t\t\t// Keep chronological order of operations.\n\t\t\t\treturn a.changeCount - b.changeCount;\n\t\t\t}\n\n\t\t\t// If positions differ, position \"on the left\" should be earlier in the result.\n\t\t\treturn a.position.isBefore( b.position ) ? -1 : 1;\n\t\t} );\n\n\t\t// Glue together multiple changes (mostly on text nodes).\n\t\tfor ( let i = 1; i < diffSet.length; i++ ) {\n\t\t\tconst prevDiff = diffSet[ i - 1 ];\n\t\t\tconst thisDiff = diffSet[ i ];\n\n\t\t\t// Glue remove changes if they happen on text on same position.\n\t\t\tconst isConsecutiveTextRemove =\n\t\t\t\tprevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.isEqual( thisDiff.position );\n\n\t\t\t// Glue insert changes if they happen on text on consecutive fragments.\n\t\t\tconst isConsecutiveTextAdd =\n\t\t\t\tprevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n\n\t\t\t// Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n\t\t\tconst isConsecutiveAttributeChange =\n\t\t\t\tprevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.range.isFlat && thisDiff.range.isFlat &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset &&\n\t\t\t\tprevDiff.attributeKey == thisDiff.attributeKey &&\n\t\t\t\tprevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n\t\t\t\tprevDiff.attributeNewValue == thisDiff.attributeNewValue;\n\n\t\t\tif ( isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange ) {\n\t\t\t\tdiffSet[ i - 1 ].length++;\n\n\t\t\t\tif ( isConsecutiveAttributeChange ) {\n\t\t\t\t\tdiffSet[ i - 1 ].range.end = diffSet[ i - 1 ].range.end.getShiftedBy( 1 );\n\t\t\t\t}\n\n\t\t\t\tdiffSet.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\t// Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n\t\tfor ( const item of diffSet ) {\n\t\t\tdelete item.changeCount;\n\n\t\t\tif ( item.type == 'attribute' ) {\n\t\t\t\tdelete item.position;\n\t\t\t\tdelete item.length;\n\t\t\t}\n\t\t}\n\n\t\tthis._changeCount = 0;\n\n\t\t// Cache changes.\n\t\tthis._cachedChangesWithGraveyard = diffSet.slice();\n\t\tthis._cachedChanges = diffSet.slice().filter( _changesInGraveyardFilter );\n\n\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\treturn this._cachedChangesWithGraveyard;\n\t\t} else {\n\t\t\treturn this._cachedChanges;\n\t\t}\n\t}\n\n\t/**\n\t * Resets `Differ`. Removes all buffered changes.\n\t */\n\treset() {\n\t\tthis._changesInElement.clear();\n\t\tthis._elementSnapshots.clear();\n\t\tthis._changedMarkers.clear();\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Saves and handles an insert change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markInsert( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a remove change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markRemove( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\n\t\tthis._removeAllNestedChanges( parent, offset, howMany );\n\t}\n\n\t/**\n\t * Saves and handles an attribute change.\n\t *\n\t * @private\n\t * @param {module:engine/model/item~Item} item\n\t */\n\t_markAttribute( item ) {\n\t\tconst changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n\n\t\tthis._markChange( item.parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a model change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Object} changeItem\n\t */\n\t_markChange( parent, changeItem ) {\n\t\t// First, make a snapshot of this parent's children (it will be made only if it was not made before).\n\t\tthis._makeSnapshot( parent );\n\n\t\t// Then, get all changes that already were done on the element (empty array if this is the first change).\n\t\tconst changes = this._getChangesForElement( parent );\n\n\t\t// Then, look through all the changes, and transform them or the new change.\n\t\tthis._handleChange( changeItem, changes );\n\n\t\t// Add the new change.\n\t\tchanges.push( changeItem );\n\n\t\t// Remove incorrect changes. During transformation some change might be, for example, included in another.\n\t\t// In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n\t\tfor ( let i = 0; i < changes.length; i++ ) {\n\t\t\tif ( changes[ i ].howMany < 1 ) {\n\t\t\t\tchanges.splice( i, 1 );\n\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets an array of changes that have already been saved for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {Array.<Object>}\n\t */\n\t_getChangesForElement( element ) {\n\t\tlet changes;\n\n\t\tif ( this._changesInElement.has( element ) ) {\n\t\t\tchanges = this._changesInElement.get( element );\n\t\t} else {\n\t\t\tchanges = [];\n\n\t\t\tthis._changesInElement.set( element, changes );\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t/**\n\t * Saves a children snapshot for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_makeSnapshot( element ) {\n\t\tif ( !this._elementSnapshots.has( element ) ) {\n\t\t\tthis._elementSnapshots.set( element, _getChildrenSnapshot( element.getChildren() ) );\n\t\t}\n\t}\n\n\t/**\n\t * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n\t * change and/or the old change.\n\t *\n\t * @private\n\t * @param {Object} inc Incoming (new) change.\n\t * @param {Array.<Object>} changes An array containing all the changes done on that element.\n\t */\n\t_handleChange( inc, changes ) {\n\t\t// We need a helper variable that will store how many nodes are to be still handled for this change item.\n\t\t// `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n\t\t// needs to be differentiated.\n\t\t//\n\t\t// This comes up when there are multiple changes that are affected by `inc` change item.\n\t\t//\n\t\t// For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n\t\t// Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n\t\t//\n\t\t// Then, we:\n\t\t// - \"forget\" about first insert change (it is \"eaten\" by remove),\n\t\t// - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n\t\t// - but still we have to change offset of the second insert change from `5` to `3`!\n\t\t//\n\t\t// So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n\t\t// while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n\t\tinc.nodesToHandle = inc.howMany;\n\n\t\tfor ( const old of changes ) {\n\t\t\tconst incEnd = inc.offset + inc.howMany;\n\t\t\tconst oldEnd = old.offset + old.howMany;\n\n\t\t\tif ( inc.type == 'insert' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\told.howMany += inc.nodesToHandle;\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t// This case is more complicated, because attribute change has to be split into two.\n\t\t\t\t\t\t// Example (assume that uppercase and lowercase letters mean different attributes):\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// initial state:\t\tabcxyz\n\t\t\t\t\t\t// attribute change:\taBCXYz\n\t\t\t\t\t\t// incoming insert:\t\taBCfooXYz\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Change ranges cannot intersect because each item has to be described exactly (it was either\n\t\t\t\t\t\t// not changed, inserted, removed, or its attribute was changed). That's why old attribute\n\t\t\t\t\t\t// change has to be split and both parts has to be handled separately from now on.\n\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: incEnd,\n\t\t\t\t\t\t\thowMany: howMany - old.howMany,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'remove' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( incEnd <= oldEnd ) {\n\t\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\t\told.offset = inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= inc.nodesToHandle;\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\t\tinc.nodesToHandle -= old.howMany;\n\t\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t\tconst intersectionLength = oldEnd - inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tinc.nodesToHandle += old.howMany;\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\told.offset = inc.offset;\n\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd <= oldEnd ) {\n\t\t\t\t\t\t\t// On first sight in this case we don't need to split attribute operation into two.\n\t\t\t\t\t\t\t// However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n\t\t\t\t\t\t\t// For that reason, no two changes may intersect.\n\t\t\t\t\t\t\t// So we cannot have an attribute change that \"contains\" remove change.\n\t\t\t\t\t\t\t// Attribute change needs to be split.\n\t\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t\tconst howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n\n\t\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: inc.offset,\n\t\t\t\t\t\t\t\thowMany: howManyAfter,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= oldEnd - inc.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'attribute' ) {\n\t\t\t\t// In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\t// This case is similar to a case described when incoming change was insert and old change was attribute.\n\t\t\t\t\t\t\t// See comment above.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// This time incoming change is attribute. We need to split incoming change in this case too.\n\t\t\t\t\t\t\t// However this time, the second part of the attribute change needs to be processed further\n\t\t\t\t\t\t\t// because there might be other changes that it collides with.\n\t\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: oldEnd,\n\t\t\t\t\t\t\t\thowMany: incEnd - oldEnd,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\t\tchanges.push( attributePart );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t} else if ( inc.offset >= old.offset && inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\tinc.nodesToHandle = incEnd - oldEnd;\n\t\t\t\t\t\t\tinc.offset = oldEnd;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\t// This is a case when attribute change \"contains\" remove change.\n\t\t\t\t\t// The attribute change needs to be split into two because changes cannot intersect.\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: old.offset,\n\t\t\t\t\t\t\thowMany: incEnd - old.offset,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\tchanges.push( attributePart );\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\t// There are only two conflicting scenarios possible here:\n\t\t\t\t\tif ( inc.offset >= old.offset && incEnd <= oldEnd ) {\n\t\t\t\t\t\t// `old` change includes `inc` change, or they are the same.\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\tinc.howMany = 0;\n\t\t\t\t\t\tinc.offset = 0;\n\t\t\t\t\t} else if ( inc.offset <= old.offset && incEnd >= oldEnd ) {\n\t\t\t\t\t\t// `inc` change includes `old` change.\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinc.howMany = inc.nodesToHandle;\n\t\tdelete inc.nodesToHandle;\n\t}\n\n\t/**\n\t * Returns an object with a single insert change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which the change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getInsertDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'insert',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an object with a single remove change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getRemoveDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'remove',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an array of objects where each one is a single attribute change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The range where the change happened.\n\t * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n\t * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\n\t * @returns {Array.<Object>} An array containing one or more diff items.\n\t */\n\t_getAttributesDiff( range, oldAttributes, newAttributes ) {\n\t\t// Results holder.\n\t\tconst diffs = [];\n\n\t\t// Clone new attributes as we will be performing changes on this object.\n\t\tnewAttributes = new Map( newAttributes );\n\n\t\t// Look through old attributes.\n\t\tfor ( const [ key, oldValue ] of oldAttributes ) {\n\t\t\t// Check what is the new value of the attribute (or if it was removed).\n\t\t\tconst newValue = newAttributes.has( key ) ? newAttributes.get( key ) : null;\n\n\t\t\t// If values are different (or attribute was removed)...\n\t\t\tif ( newValue !== oldValue ) {\n\t\t\t\t// Add diff item.\n\t\t\t\tdiffs.push( {\n\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\tposition: range.start,\n\t\t\t\t\trange: range.clone(),\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tattributeKey: key,\n\t\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\t\tattributeNewValue: newValue,\n\t\t\t\t\tchangeCount: this._changeCount++\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Prevent returning two diff items for the same change.\n\t\t\tnewAttributes.delete( key );\n\t\t}\n\n\t\t// Look through new attributes that weren't handled above.\n\t\tfor ( const [ key, newValue ] of newAttributes ) {\n\t\t\t// Each of them is a new attribute. Add diff item.\n\t\t\tdiffs.push( {\n\t\t\t\ttype: 'attribute',\n\t\t\t\tposition: range.start,\n\t\t\t\trange: range.clone(),\n\t\t\t\tlength: 1,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: newValue,\n\t\t\t\tchangeCount: this._changeCount++\n\t\t\t} );\n\t\t}\n\n\t\treturn diffs;\n\t}\n\n\t/**\n\t * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element Element to check.\n\t * @returns {Boolean}\n\t */\n\t_isInInsertedElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( !parent ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst changes = this._changesInElement.get( parent );\n\t\tconst offset = element.startOffset;\n\n\t\tif ( changes ) {\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._isInInsertedElement( parent );\n\t}\n\n\t/**\n\t * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n\t * and `howMany`.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_removeAllNestedChanges( parent, offset, howMany ) {\n\t\tconst range = new Range( Position._createAt( parent, offset ), Position._createAt( parent, offset + howMany ) );\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tthis._elementSnapshots.delete( item );\n\t\t\t\tthis._changesInElement.delete( item );\n\n\t\t\t\tthis._removeAllNestedChanges( item, 0, item.maxOffset );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n// objects, each representing one character and attributes set on that character.\nfunction _getChildrenSnapshot( children ) {\n\tconst snapshot = [];\n\n\tfor ( const child of children ) {\n\t\tif ( child.is( 'text' ) ) {\n\t\t\tfor ( let i = 0; i < child.data.length; i++ ) {\n\t\t\t\tsnapshot.push( {\n\t\t\t\t\tname: '$text',\n\t\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tsnapshot.push( {\n\t\t\t\tname: child.name,\n\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn snapshot;\n}\n\n// Generates array of actions for given changes set.\n// It simulates what `diff` function does.\n// Generated actions are:\n// - 'e' for 'equal' - when item at that position did not change,\n// - 'i' for 'insert' - when item at that position was inserted,\n// - 'r' for 'remove' - when item at that position was removed,\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\n//\n// Example (assume that uppercase letters have bold attribute, compare with function code):\n//\n// children before:\tfooBAR\n// children after:\tfoxybAR\n//\n// changes: type: remove, offset: 1, howMany: 1\n//\t\t\ttype: insert, offset: 2, howMany: 2\n//\t\t\ttype: attribute, offset: 4, howMany: 1\n//\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n//\n// steps taken by th script:\n//\n// 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n//    1.2 this change removes one node, add one remove action\n//    1.3 change last visited `offset` to 1\n//    1.4 since an old child has been removed, one more old child has been handled\n//    1.5 actions at this point are: equal, remove\n//\n// 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n//    2.2 this change inserts two nodes, add two insert actions\n//    2.3 change last visited offset to the end of the inserted range, that is 4\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\n//\n// 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n//    3.1 between this change and previous change are no not-changed nodes\n//    3.2 this change changes one node, add one attribute action\n//    3.3 change last visited `offset` to the end of change range, that is 5\n//    3.4 since an old child has been changed, one more old child has been handled\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n//\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n//    4.1 fill up with two equal actions\n//\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\nfunction _generateActionsFromChanges( oldChildrenLength, changes ) {\n\tconst actions = [];\n\n\tlet offset = 0;\n\tlet oldChildrenHandled = 0;\n\n\t// Go through all buffered changes.\n\tfor ( const change of changes ) {\n\t\t// First, fill \"holes\" between changes with \"equal\" actions.\n\t\tif ( change.offset > offset ) {\n\t\t\tfor ( let i = 0; i < change.offset - offset; i++ ) {\n\t\t\t\tactions.push( 'e' );\n\t\t\t}\n\n\t\t\toldChildrenHandled += change.offset - offset;\n\t\t}\n\n\t\t// Then, fill up actions accordingly to change type.\n\t\tif ( change.type == 'insert' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'i' );\n\t\t\t}\n\n\t\t\t// The last handled offset is after inserted range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t} else if ( change.type == 'remove' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'r' );\n\t\t\t}\n\n\t\t\t// The last handled offset is at the position where the nodes were removed.\n\t\t\toffset = change.offset;\n\t\t\t// We removed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t} else {\n\t\t\tactions.push( ...'a'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is at the position after the changed range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t\t// We changed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t}\n\t}\n\n\t// Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n\t// has not been changed / removed at the end of their parent.\n\tif ( oldChildrenHandled < oldChildrenLength ) {\n\t\tfor ( let i = 0; i < oldChildrenLength - oldChildrenHandled - offset; i++ ) {\n\t\t\tactions.push( 'e' );\n\t\t}\n\t}\n\n\treturn actions;\n}\n\n// Filter callback for Array.filter that filters out change entries that are in graveyard.\nfunction _changesInGraveyardFilter( entry ) {\n\tconst posInGy = entry.position && entry.position.root.rootName == '$graveyard';\n\tconst rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\n\n\treturn !posInGy && !rangeInGy;\n}\n"]}]}