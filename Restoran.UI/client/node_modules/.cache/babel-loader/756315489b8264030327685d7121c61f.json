{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\position.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\position.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"],"names":["TreeWalker","compareArrays","CKEditorError","Text","last","Position","root","path","stickiness","is","Array","length","getPath","concat","otherPosition","result","skip","options","startPosition","treeWalker","position","slice","parent","getAncestors","includeSelf","cmp","diffAt","Math","min","ancestorsA","ancestorsB","i","shift","shifted","clone","offset","compareWith","left","right","compare","_createAt","leftParent","isEqual","maxOffset","type","thisParentPath","getParentPath","posParentPath","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","_getTransformedByInsertion","howMany","_getTransformedByMove","sourcePosition","targetPosition","movedRange","isContained","containsPosition","start","_getCombined","splitPosition","moveTargetPosition","graveyardPosition","insertionPosition","pos","isBefore","_getTransformedByDeletion","deletionPosition","deletePosition","transformed","insertPosition","isMoved","getShiftedBy","source","target","combined","toJSON","from","constructor","newOffset","getChild","offsetToIndex","node","index","startOffset","textNode","itemOrPosition","_createBefore","_createAfter","push","item","endOffset","json","doc","graveyard","getRoot","rootName"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/position\n */\n\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Text from './text';\nimport { last } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position root is invalid.\n\t\t\t *\n\t\t\t * Positions can only be anchored in elements or document fragments.\n\t\t\t *\n\t\t\t * @error model-position-root-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-root-invalid: Position root invalid.',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tif ( !( path instanceof Array ) || path.length === 0 ) {\n\t\t\t/**\n\t\t\t * Position path must be an array with at least one item.\n\t\t\t *\n\t\t\t * @error model-position-path-incorrect-format\n\t\t\t * @param path\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-path-incorrect-format: Position path must be an array with at least one item.',\n\t\t\t\troot,\n\t\t\t\t{ path }\n\t\t\t);\n\t\t}\n\n\t\t// Normalize the root and path (if element was passed).\n\t\tpath = root.getPath().concat( path );\n\t\troot = root.root;\n\n\t\t/**\n\t\t * Root of the position path.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/position~Position#root\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Position of the node in the tree. **Path contains offsets, not indexes.**\n\t\t *\n\t\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n\t\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n\t\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n\t\t * down to the position offset in it's parent.\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n\t\t *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n\t\t *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n\t\t *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n\t\t *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n\t\t *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n\t\t *\n\t\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n\t\t * greater than `1` you can place position offset between their start and end:\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P\n\t\t *\t\t  |- UL\n\t\t *\t\t     |- LI\n\t\t *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n\t\t *\t\t     |- LI\n\t\t *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Number>} module:engine/model/position~Position#path\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n\t\t *\n\t\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/position~Position#stickiness\n\t\t */\n\t\tthis.stickiness = stickiness;\n\t}\n\n\t/**\n\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n\t * to the last item in position {@link module:engine/model/position~Position#path path}.\n\t *\n\t * @type {Number}\n\t */\n\tget offset() {\n\t\treturn last( this.path );\n\t}\n\n\t/**\n\t * @param {Number} newOffset\n\t */\n\tset offset( newOffset ) {\n\t\tthis.path[ this.path.length - 1 ] = newOffset;\n\t}\n\n\t/**\n\t * Parent element of this position.\n\t *\n\t * Keep in mind that `parent` value is calculated when the property is accessed.\n\t * If {@link module:engine/model/position~Position#path position path}\n\t * leads to a non-existing element, `parent` property will throw error.\n\t *\n\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget parent() {\n\t\tlet parent = this.root;\n\n\t\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\n\t\t\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\n\n\t\t\tif ( !parent ) {\n\t\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t\t}\n\t\t}\n\n\t\tif ( parent.is( 'text' ) ) {\n\t\t\t/**\n\t\t\t * The position's path is incorrect. This means that a position does not point to\n\t\t\t * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n\t\t\t *\n\t\t\t * **Note**: Unlike DOM and view positions, in the model, the\n\t\t\t * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n\t\t\t * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element where\n\t\t\t * this position points.\n\t\t\t *\n\t\t\t * Read more about model positions and offsets in\n\t\t\t * the {@glink framework/guides/architecture/editing-engine#indexes-and-offsets Editing engine architecture guide}.\n\t\t\t *\n\t\t\t * @error position-incorrect-path\n\t\t\t * @param {module:engine/model/position~Position} position The incorrect position.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n\t * in text node, position index is equal to the index of that text node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget index() {\n\t\treturn this.parent.offsetToIndex( this.offset );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n\t * position is not in a text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/text~Text|null}\n\t */\n\tget textNode() {\n\t\tconst node = this.parent.getChild( this.index );\n\n\t\treturn ( node instanceof Text && node.startOffset < this.offset ) ? node : null;\n\t}\n\n\t/**\n\t * Node directly after this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index ) : null;\n\t}\n\n\t/**\n\t * Node directly before this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {Node}\n\t */\n\tget nodeBefore() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index - 1 ) : null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\treturn this.offset == this.parent.maxOffset;\n\t}\n\n\t/**\n\t * Checks whether this position is before or after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/model/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root != otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tconst result = compareArrays( this.path, otherPosition.path );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'same':\n\t\t\t\treturn 'same';\n\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn this.path[ result ] < otherPosition.path[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n\t * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n\t * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => false );\n\t * \t\t// Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n\t * but without the last item.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @returns {Array.<Number>} Path to the parent.\n\t */\n\tgetParentPath() {\n\t\treturn this.path.slice( 0, -1 );\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\n\t *\n\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n\t * of these two paths must be identical.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {Array.<Number>} The common path.\n\t */\n\tgetCommonPath( position ) {\n\t\tif ( this.root != position.root ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// We find on which tree-level start and end have the lowest common ancestor\n\t\tconst cmp = compareArrays( this.path, position.path );\n\t\t// If comparison returned string it means that arrays are same.\n\t\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\n\n\t\treturn this.path.slice( 0, diffAt );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n\t * is shifted by `shift` value (can be a negative value).\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {Number} shift Offset shift. Can be a negative value.\n\t * @returns {module:engine/model/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = this.clone();\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Checks whether this position is after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @see module:engine/model/position~Position#isBefore\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before given position.\n\t *\n\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n\t * be `true` if positions are in different roots and you might not expect this. You should probably use\n\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n\t *\n\t *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do A.\n\t *\t\t} else {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * or, if you have only one if-branch:\n\t *\n\t *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * rather than:\n\t *\n\t *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t} else {\n\t *\t\t\t// do A.\n\t *\t\t}\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is equal to given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'same';\n\t}\n\n\t/**\n\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\n\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n\t * they are very similar or even indistinguishable.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions touch.\n\t */\n\tisTouching( otherPosition ) {\n\t\tlet left = null;\n\t\tlet right = null;\n\t\tconst compare = this.compareWith( otherPosition );\n\n\t\tswitch ( compare ) {\n\t\t\tcase 'same':\n\t\t\t\treturn true;\n\n\t\t\tcase 'before':\n\t\t\t\tleft = Position._createAt( this );\n\t\t\t\tright = Position._createAt( otherPosition );\n\t\t\t\tbreak;\n\n\t\t\tcase 'after':\n\t\t\t\tleft = Position._createAt( otherPosition );\n\t\t\t\tright = Position._createAt( this );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// Cached for optimization purposes.\n\t\tlet leftParent = left.parent;\n\n\t\twhile ( left.path.length + right.path.length ) {\n\t\t\tif ( left.isEqual( right ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( left.path.length > right.path.length ) {\n\t\t\t\tif ( left.offset !== leftParent.maxOffset ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tleft.path = left.path.slice( 0, -1 );\n\t\t\t\tleftParent = leftParent.parent;\n\t\t\t\tleft.offset++;\n\t\t\t} else {\n\t\t\t\tif ( right.offset !== 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tright.path = right.path.slice( 0, -1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'model:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'view:position' ); // -> false\n\t *\t\tposition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'model:position';\n\t}\n\n\t/**\n\t * Checks if two positions are in the same parent.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position Position to compare with.\n\t * @returns {Boolean} `true` if positions have the same parent, `false` otherwise.\n\t */\n\thasSameParentAs( position ) {\n\t\tif ( this.root !== position.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisParentPath = this.getParentPath();\n\t\tconst posParentPath = position.getParentPath();\n\n\t\treturn compareArrays( thisParentPath, posParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Returns a copy of this position that is transformed by given `operation`.\n\t *\n\t * The new position's parameters are updated accordingly to the effect of the `operation`.\n\t *\n\t * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n\t * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform by.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tlet result;\n\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\tresult = this._getTransformedByInsertOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\tresult = this._getTransformedByMoveOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'split':\n\t\t\t\tresult = this._getTransformedBySplitOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'merge':\n\t\t\t\tresult = this._getTransformedByMergeOperation( operation );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = Position._createAt( this );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by an insert operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByInsertOperation( operation ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a move operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMoveOperation( operation ) {\n\t\treturn this._getTransformedByMove( operation.sourcePosition, operation.targetPosition, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a split operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\n\t\tconst isContained = movedRange.containsPosition( this ) ||\n\t\t\t( movedRange.start.isEqual( this ) && this.stickiness == 'toNext' );\n\n\t\tif ( isContained ) {\n\t\t\treturn this._getCombined( operation.splitPosition, operation.moveTargetPosition );\n\t\t} else {\n\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\treturn this._getTransformedByMove( operation.graveyardPosition, operation.insertionPosition, 1 );\n\t\t\t} else {\n\t\t\t\treturn this._getTransformedByInsertion( operation.insertionPosition, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by merge operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\t\tconst isContained = movedRange.containsPosition( this ) || movedRange.start.isEqual( this );\n\n\t\tlet pos;\n\n\t\tif ( isContained ) {\n\t\t\tpos = this._getCombined( operation.sourcePosition, operation.targetPosition );\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Above happens during OT when the merged element is moved before the merged-to element.\n\t\t\t\tpos = pos._getTransformedByDeletion( operation.deletionPosition, 1 );\n\t\t\t}\n\t\t} else if ( this.isEqual( operation.deletionPosition ) ) {\n\t\t\tpos = Position._createAt( operation.deletionPosition );\n\t\t} else {\n\t\t\tpos = this._getTransformedByMove( operation.deletionPosition, operation.graveyardPosition, 1 );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if deletion was in a different root.\n\t\tif ( this.root != deletePosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are removed from the node that is pointed by this position...\n\t\t\tif ( deletePosition.offset < this.offset ) {\n\t\t\t\t// And are removed from before an offset of that position...\n\t\t\t\tif ( deletePosition.offset + howMany > this.offset ) {\n\t\t\t\t\t// Position is in removed range, it's no longer in the tree.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Decrement the offset accordingly.\n\t\t\t\t\ttransformed.offset -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are removed from a node that is on a path to this position...\n\t\t\tconst i = deletePosition.path.length - 1;\n\n\t\t\tif ( deletePosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are removed from before next node of that path...\n\t\t\t\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\n\t\t\t\t\t// If the next node of that path is removed return null\n\t\t\t\t\t// because the node containing this position got removed.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, decrement index on that path.\n\t\t\t\t\ttransformed.path[ i ] -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if insertion was in a different root.\n\t\tif ( this.root != insertPosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are inserted in the node that is pointed by this position...\n\t\t\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && this.stickiness != 'toPrevious' ) ) {\n\t\t\t\t// And are inserted before an offset of that position...\n\t\t\t\t// \"Push\" this positions offset.\n\t\t\t\ttransformed.offset += howMany;\n\t\t\t}\n\t\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are inserted in a node that is on a path to this position...\n\t\t\tconst i = insertPosition.path.length - 1;\n\n\t\t\tif ( insertPosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are inserted before next node of that path...\n\t\t\t\t// \"Push\" the index on that path.\n\t\t\t\ttransformed.path[ i ] += howMany;\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\n\t\t// Update target position, as it could be affected by nodes removal.\n\t\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( sourcePosition.isEqual( targetPosition ) ) {\n\t\t\t// If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n\t\t\treturn Position._createAt( this );\n\t\t}\n\n\t\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\t\tconst transformed = this._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tconst isMoved = transformed === null ||\n\t\t\t( sourcePosition.isEqual( this ) && this.stickiness == 'toNext' ) ||\n\t\t\t( sourcePosition.getShiftedBy( howMany ).isEqual( this ) && this.stickiness == 'toPrevious' );\n\n\t\tif ( isMoved ) {\n\t\t\t// This position is inside moved range (or sticks to it).\n\t\t\t// In this case, we calculate a combination of this position, move source position and target position.\n\t\t\treturn this._getCombined( sourcePosition, targetPosition );\n\t\t} else {\n\t\t\t// This position is not inside a removed range.\n\t\t\t//\n\t\t\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n\t\t\treturn transformed._getTransformedByInsertion( targetPosition, howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new position that is a combination of this position and given positions.\n\t *\n\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\n\t * to the `target` position. It is expected that this position is inside the moved range.\n\t *\n\t * Example:\n\t *\n\t *\t\tlet original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n\t *\t\tlet source = model.createPositionFromPath( root, [ 2, 2 ] );\n\t *\t\tlet target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n\t *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n\t *\n\t * Explanation:\n\t *\n\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\n\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\n\t * @param {module:engine/model/position~Position} target Position where the range is moved.\n\t * @returns {module:engine/model/position~Position} Combined position.\n\t */\n\t_getCombined( source, target ) {\n\t\tconst i = source.path.length - 1;\n\n\t\t// The first part of a path to combined position is a path to the place where nodes were moved.\n\t\tconst combined = Position._createAt( target );\n\t\tcombined.stickiness = this.stickiness;\n\n\t\t// Then we have to update the rest of the path.\n\n\t\t// Fix the offset because this position might be after `from` position and we have to reflect that.\n\t\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\n\n\t\t// Then, add the rest of the path.\n\t\t// If this position is at the same level as `from` position nothing will get added.\n\t\tcombined.path = combined.path.concat( this.path.slice( i + 1 ) );\n\n\t\treturn combined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\troot: this.root.toJSON(),\n\t\t\tpath: Array.from( this.path ),\n\t\t\tstickiness: this.stickiness\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new position that is equal to current position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.root, this.path, this.stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/position~Position._createBefore},\n\t * * {@link module:engine/model/position~Position._createAfter}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @protected\n\t */\n\tstatic _createAt( itemOrPosition, offset, stickiness = 'toNone' ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new Position( itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.maxOffset;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node, stickiness );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node, stickiness );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a model item.\n\t\t\t\t *\n\t\t\t\t * @error model-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-createPositionAt-offset-required: ' +\n\t\t\t\t\t'Model#createPositionAt() requires the offset when the first parameter is a model item.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !node.is( 'element' ) && !node.is( 'documentFragment' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Position parent have to be a model element or model document fragment.\n\t\t\t\t *\n\t\t\t\t * @error model-position-parent-incorrect\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-position-parent-incorrect: Position parent have to be a element or document fragment.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst path = node.getPath();\n\n\t\t\tpath.push( offset );\n\n\t\t\treturn new this( node.root, path, stickiness );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createAfter( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root element.\n\t\t\t *\n\t\t\t * @error model-position-after-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-after-root: You cannot make a position after root.',\n\t\t\t\t[ this, item ],\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.endOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createBefore( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position before a root element.\n\t\t\t *\n\t\t\t * @error model-position-before-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-before-root: You cannot make a position before root.',\n\t\t\t\titem,\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.startOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Position`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be position owner.\n\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( json.root === '$graveyard' ) {\n\t\t\tconst pos = new Position( doc.graveyard, json.path );\n\t\t\tpos.stickiness = json.stickiness;\n\n\t\t\treturn pos;\n\t\t}\n\n\t\tif ( !doc.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create position for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error model-position-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.',\n\t\t\t\tdoc,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new Position( doc.getRoot( json.root ), json.path, json.stickiness );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `${ this.root } [ ${ this.path.join( ', ' ) } ]`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelPosition: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n\n/**\n * Represents how position is \"sticking\" with neighbour nodes. Used to define how position should be transformed (moved)\n * in edge cases. Possible values: `'toNone'`, `'toNext'`, `'toPrevious'`.\n *\n * Examples:\n *\n *\t\tInsert. Position is at | and nodes are inserted at the same position, marked as ^:\n *\n *\t\t- sticks to none:           <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to next node:      <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to previous node:  <p>f|^oo</p>  ->  <p>f|baroo</p>\n *\n *\n *\t\tMove. Position is at | and range [oo] is moved to position ^:\n *\n *\t\t- sticks to none:           <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to none:           <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to next node:      <p>f|[oo]</p><p>b^ar</p>  ->  <p>f</p><p>b|ooar</p>\n *\t\t- sticks to next node:      <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to previous node:  <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to previous node:  <p>f[oo]|</p><p>b^ar</p>  ->  <p>f</p><p>boo|ar</p>\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */\n"]}]}