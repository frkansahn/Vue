{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-upload\\src\\filerepository.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-upload\\src\\filerepository.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-upload/src/filerepository.js"],"names":["Plugin","PendingActions","CKEditorError","attachLinkToDocumentation","ObservableMixin","Collection","mix","FileReader","uid","FileRepository","loaders","on","_updatePendingAction","_loadersMap","Map","_pendingAction","set","bind","to","uploaded","total","fileOrPromise","get","createUploadAdapter","console","warn","loader","FileLoader","Promise","resolve","add","file","then","catch","aggregatedUploaded","aggregatedTotal","uploadTotal","fileOrPromiseOrLoader","getLoader","_destroy","remove","forEach","value","key","delete","pendingActions","editor","plugins","length","t","getMessage","parseInt","uploadedPercent","filePromise","uploadAdapterCreator","id","_filePromiseWrapper","_createFilePromiseWrapper","_adapter","_reader","status","read","data","err","error","upload","uploadResponse","isFulfilled","promise","rejecter","abort","undefined","wrapper","reject"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filerepository\n */\n\n/* globals console */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport PendingActions from '@ckeditor/ckeditor5-core/src/pendingactions';\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport FileReader from './filereader.js';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid.js';\n\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one – see\n * the {@glink framework/guides/deep-dive/upload-adapter \"Custom image upload adapter\" deep dive guide}.\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FileRepository extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FileRepository';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ PendingActions ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * Collection of loaders associated with this repository.\n\t\t *\n\t\t * @member {module:utils/collection~Collection} #loaders\n\t\t */\n\t\tthis.loaders = new Collection();\n\n\t\t// Keeps upload in a sync with pending actions.\n\t\tthis.loaders.on( 'add', () => this._updatePendingAction() );\n\t\tthis.loaders.on( 'remove', () => this._updatePendingAction() );\n\n\t\t/**\n\t\t * Loaders mappings used to retrieve loaders references.\n\t\t *\n\t\t * @private\n\t\t * @member {Map<File|Promise, FileLoader>} #_loadersMap\n\t\t */\n\t\tthis._loadersMap = new Map();\n\n\t\t/**\n\t\t * Reference to a pending action registered in a {@link module:core/pendingactions~PendingActions} plugin\n\t\t * while upload is in progress. When there is no upload then value is `null`.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_pendingAction\n\t\t */\n\t\tthis._pendingAction = null;\n\n\t\t/**\n\t\t * A factory function which should be defined before using `FileRepository`.\n\t\t *\n\t\t * It should return a new instance of {@link module:upload/filerepository~UploadAdapter} that will be used to upload files.\n\t\t * {@link module:upload/filerepository~FileLoader} instance associated with the adapter\n\t\t * will be passed to that function.\n\t\t *\n\t\t * For more information and example see {@link module:upload/filerepository~UploadAdapter}.\n\t\t *\n\t\t * @member {Function} #createUploadAdapter\n\t\t */\n\n\t\t/**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n\t\tthis.set( 'uploaded', 0 );\n\n\t\t/**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * It might be different than the file size because of headers and additional data.\n\t\t * It contains `null` if value is not available yet, so it's better to use {@link #uploadedPercent} to monitor\n\t\t * the progress.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n\t\tthis.set( 'uploadTotal', null );\n\n\t\t/**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n\t\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\n\t\t\treturn total ? ( uploaded / total * 100 ) : 0;\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the loader associated with specified file or promise.\n\t *\n\t * To get loader by id use `fileRepository.loaders.get( id )`.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native file or promise handle.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n\tgetLoader( fileOrPromise ) {\n\t\treturn this._loadersMap.get( fileOrPromise ) || null;\n\t}\n\n\t/**\n\t * Creates a loader instance for the given file.\n\t *\n\t * Requires {@link #createUploadAdapter} factory to be defined.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native File object or native Promise object which resolves to a File.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n\tcreateLoader( fileOrPromise ) {\n\t\tif ( !this.createUploadAdapter ) {\n\t\t\t/**\n\t\t\t * You need to enable an upload adapter in order to be able to upload files.\n\t\t\t *\n\t\t\t * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n\t\t\t * without {@link #createUploadAdapter definining an upload adapter}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**\n\t\t\t * it means that you did not configure any of the upload adapters available by default in those builds.\n\t\t\t *\n\t\t\t * See the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn which upload\n\t\t\t * adapters are available in the builds and how to configure them.\n\t\t\t *\n\t\t\t * **If you see this warning when using a custom build** there is a chance that you enabled\n\t\t\t * a feature like {@link module:image/imageupload~ImageUpload},\n\t\t\t * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n\t\t\t * You can choose one of the existing upload adapters listed in the\n\t\t\t * {@glink features/image-upload/image-upload \"Image upload overview\"}.\n\t\t\t *\n\t\t\t * You can also implement your {@glink framework/guides/deep-dive/upload-adapter own image upload adapter}.\n\t\t\t *\n\t\t\t * @error filerepository-no-upload-adapter\n\t\t\t */\n\t\t\tconsole.warn( attachLinkToDocumentation(\n\t\t\t\t'filerepository-no-upload-adapter: Upload adapter is not defined.'\n\t\t\t) );\n\n\t\t\treturn null;\n\t\t}\n\n\t\tconst loader = new FileLoader( Promise.resolve( fileOrPromise ), this.createUploadAdapter );\n\n\t\tthis.loaders.add( loader );\n\t\tthis._loadersMap.set( fileOrPromise, loader );\n\n\t\t// Store also file => loader mapping so loader can be retrieved by file instance returned upon Promise resolution.\n\t\tif ( fileOrPromise instanceof Promise ) {\n\t\t\tloader.file\n\t\t\t\t.then( file => {\n\t\t\t\t\tthis._loadersMap.set( file, loader );\n\t\t\t\t} )\n\t\t\t\t// Every then() must have a catch().\n\t\t\t\t// File loader state (and rejections) are handled in read() and upload().\n\t\t\t\t// Also, see the \"does not swallow the file promise rejection\" test.\n\t\t\t\t.catch( () => {} );\n\t\t}\n\n\t\tloader.on( 'change:uploaded', () => {\n\t\t\tlet aggregatedUploaded = 0;\n\n\t\t\tfor ( const loader of this.loaders ) {\n\t\t\t\taggregatedUploaded += loader.uploaded;\n\t\t\t}\n\n\t\t\tthis.uploaded = aggregatedUploaded;\n\t\t} );\n\n\t\tloader.on( 'change:uploadTotal', () => {\n\t\t\tlet aggregatedTotal = 0;\n\n\t\t\tfor ( const loader of this.loaders ) {\n\t\t\t\tif ( loader.uploadTotal ) {\n\t\t\t\t\taggregatedTotal += loader.uploadTotal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.uploadTotal = aggregatedTotal;\n\t\t} );\n\n\t\treturn loader;\n\t}\n\n\t/**\n\t * Destroys the given loader.\n\t *\n\t * @param {File|Promise|module:upload/filerepository~FileLoader} fileOrPromiseOrLoader File or Promise associated\n\t * with that loader or loader itself.\n\t */\n\tdestroyLoader( fileOrPromiseOrLoader ) {\n\t\tconst loader = fileOrPromiseOrLoader instanceof FileLoader ? fileOrPromiseOrLoader : this.getLoader( fileOrPromiseOrLoader );\n\n\t\tloader._destroy();\n\n\t\tthis.loaders.remove( loader );\n\n\t\tthis._loadersMap.forEach( ( value, key ) => {\n\t\t\tif ( value === loader ) {\n\t\t\t\tthis._loadersMap.delete( key );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Registers or deregisters pending action bound with upload progress.\n\t *\n\t * @private\n\t */\n\t_updatePendingAction() {\n\t\tconst pendingActions = this.editor.plugins.get( PendingActions );\n\n\t\tif ( this.loaders.length ) {\n\t\t\tif ( !this._pendingAction ) {\n\t\t\t\tconst t = this.editor.t;\n\t\t\t\tconst getMessage = value => `${ t( 'Upload in progress' ) } ${ parseInt( value ) }%.`;\n\n\t\t\t\tthis._pendingAction = pendingActions.add( getMessage( this.uploadedPercent ) );\n\t\t\t\tthis._pendingAction.bind( 'message' ).to( this, 'uploadedPercent', getMessage );\n\t\t\t}\n\t\t} else {\n\t\t\tpendingActions.remove( this._pendingAction );\n\t\t\tthis._pendingAction = null;\n\t\t}\n\t}\n}\n\nmix( FileRepository, ObservableMixin );\n\n/**\n * File loader class.\n *\n * It is used to control the process of reading the file and uploading it using the specified upload adapter.\n */\nclass FileLoader {\n\t/**\n\t * Creates a new instance of `FileLoader`.\n\t *\n\t * @param {Promise.<File>} filePromise A promise which resolves to a file instance.\n\t * @param {Function} uploadAdapterCreator The function which returns {@link module:upload/filerepository~UploadAdapter} instance.\n\t */\n\tconstructor( filePromise, uploadAdapterCreator ) {\n\t\t/**\n\t\t * Unique id of FileLoader instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.id = uid();\n\n\t\t/**\n\t\t * Additional wrapper over the initial file promise passed to this loader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filerepository~FilePromiseWrapper}\n\t\t */\n\t\tthis._filePromiseWrapper = this._createFilePromiseWrapper( filePromise );\n\n\t\t/**\n\t\t * Adapter instance associated with this file loader.\n\t\t *\n\t\t * @private\n\t\t * @member {module:upload/filerepository~UploadAdapter}\n\t\t */\n\t\tthis._adapter = uploadAdapterCreator( this );\n\n\t\t/**\n\t\t * FileReader used by FileLoader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filereader~FileReader}\n\t\t */\n\t\tthis._reader = new FileReader();\n\n\t\t/**\n\t\t * Current status of FileLoader. It can be one of the following:\n\t\t *\n\t\t * * 'idle',\n\t\t * * 'reading',\n\t\t * * 'uploading',\n\t\t * * 'aborted',\n\t\t * * 'error'.\n\t\t *\n\t\t * When reading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `reading` -> `idle`\n\t\t * `idle` -> `reading -> `aborted`\n\t\t * `idle` -> `reading -> `error`\n\t\t *\n\t\t * When uploading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `uploading` -> `idle`\n\t\t * `idle` -> `uploading` -> `aborted`\n\t\t * `idle` -> `uploading` -> `error`\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #status\n\t\t */\n\t\tthis.set( 'status', 'idle' );\n\n\t\t/**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n\t\tthis.set( 'uploaded', 0 );\n\n\t\t/**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n\t\tthis.set( 'uploadTotal', null );\n\n\t\t/**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n\t\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\n\t\t\treturn total ? ( uploaded / total * 100 ) : 0;\n\t\t} );\n\n\t\t/**\n\t\t * Response of the upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Object|null} #uploadResponse\n\t\t */\n\t\tthis.set( 'uploadResponse', null );\n\t}\n\n\t/**\n\t * A `Promise` which resolves to a `File` instance associated with this file loader.\n\t *\n\t * @type {Promise.<File|null>}\n\t */\n\tget file() {\n\t\tif ( !this._filePromiseWrapper ) {\n\t\t\t// Loader was destroyed, return promise which resolves to null.\n\t\t\treturn Promise.resolve( null );\n\t\t} else {\n\t\t\t// The `this._filePromiseWrapper.promise` is chained and not simply returned to handle a case when:\n\t\t\t//\n\t\t\t//\t\t* The `loader.file.then( ... )` is called by external code (returned promise is pending).\n\t\t\t//\t\t* Then `loader._destroy()` is called (call is synchronous) which destroys the `loader`.\n\t\t\t//\t\t* Promise returned by the first `loader.file.then( ... )` call is resolved.\n\t\t\t//\n\t\t\t// Returning `this._filePromiseWrapper.promise` will still resolve to a `File` instance so there\n\t\t\t// is an additional check needed in the chain to see if `loader` was destroyed in the meantime.\n\t\t\treturn this._filePromiseWrapper.promise.then( file => this._filePromiseWrapper ? file : null );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the file data. To read its data, you need for first load the file\n\t * by using the {@link module:upload/filerepository~FileLoader#read `read()`} method.\n\t *\n\t * @type {File|undefined}\n\t */\n\tget data() {\n\t\treturn this._reader.data;\n\t}\n\n\t/**\n\t * Reads file using {@link module:upload/filereader~FileReader}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n\t * is different than `idle`.\n\t *\n\t * Example usage:\n\t *\n\t *\tfileLoader.read()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( err => {\n\t *\t\t\tif ( err === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Reading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Reading error.', err );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<String>} Returns promise that will be resolved with read data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n\tread() {\n\t\tif ( this.status != 'idle' ) {\n\t\t\tthrow new CKEditorError( 'filerepository-read-wrong-status: You cannot call read if the status is different than idle.', this );\n\t\t}\n\n\t\tthis.status = 'reading';\n\n\t\treturn this.file\n\t\t\t.then( file => this._reader.read( file ) )\n\t\t\t.then( data => {\n\t\t\t\tthis.status = 'idle';\n\n\t\t\t\treturn data;\n\t\t\t} )\n\t\t\t.catch( err => {\n\t\t\t\tif ( err === 'aborted' ) {\n\t\t\t\t\tthis.status = 'aborted';\n\t\t\t\t\tthrow 'aborted';\n\t\t\t\t}\n\n\t\t\t\tthis.status = 'error';\n\t\t\t\tthrow this._reader.error ? this._reader.error : err;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n\t * is different than `idle`.\n\t * Example usage:\n\t *\n\t *\tfileLoader.upload()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( e => {\n\t *\t\t\tif ( e === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Uploading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Uploading error.', e );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<Object>} Returns promise that will be resolved with response data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n\tupload() {\n\t\tif ( this.status != 'idle' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis.status = 'uploading';\n\n\t\treturn this.file\n\t\t\t.then( () => this._adapter.upload() )\n\t\t\t.then( data => {\n\t\t\t\tthis.uploadResponse = data;\n\t\t\t\tthis.status = 'idle';\n\n\t\t\t\treturn data;\n\t\t\t} )\n\t\t\t.catch( err => {\n\t\t\t\tif ( this.status === 'aborted' ) {\n\t\t\t\t\tthrow 'aborted';\n\t\t\t\t}\n\n\t\t\t\tthis.status = 'error';\n\t\t\t\tthrow err;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Aborts loading process.\n\t */\n\tabort() {\n\t\tconst status = this.status;\n\t\tthis.status = 'aborted';\n\n\t\tif ( !this._filePromiseWrapper.isFulfilled ) {\n\t\t\t// Edge case: file loader is aborted before read() is called\n\t\t\t// so it might happen that no one handled the rejection of this promise.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-upload/pull/100\n\t\t\tthis._filePromiseWrapper.promise.catch( () => {} );\n\n\t\t\tthis._filePromiseWrapper.rejecter( 'aborted' );\n\t\t} else if ( status == 'reading' ) {\n\t\t\tthis._reader.abort();\n\t\t} else if ( status == 'uploading' && this._adapter.abort ) {\n\t\t\tthis._adapter.abort();\n\t\t}\n\n\t\tthis._destroy();\n\t}\n\n\t/**\n\t * Performs cleanup.\n\t *\n\t * @private\n\t */\n\t_destroy() {\n\t\tthis._filePromiseWrapper = undefined;\n\t\tthis._reader = undefined;\n\t\tthis._adapter = undefined;\n\t\tthis.uploadResponse = undefined;\n\t}\n\n\t/**\n\t * Wraps a given file promise into another promise giving additional\n\t * control (resolving, rejecting, checking if fulfilled) over it.\n\t *\n\t * @private\n\t * @param filePromise The initial file promise to be wrapped.\n\t * @returns {module:upload/filerepository~FilePromiseWrapper}\n\t */\n\t_createFilePromiseWrapper( filePromise ) {\n\t\tconst wrapper = {};\n\n\t\twrapper.promise = new Promise( ( resolve, reject ) => {\n\t\t\twrapper.rejecter = reject;\n\t\t\twrapper.isFulfilled = false;\n\n\t\t\tfilePromise\n\t\t\t\t.then( file => {\n\t\t\t\t\twrapper.isFulfilled = true;\n\t\t\t\t\tresolve( file );\n\t\t\t\t} )\n\t\t\t\t.catch( err => {\n\t\t\t\t\twrapper.isFulfilled = true;\n\t\t\t\t\treject( err );\n\t\t\t\t} );\n\t\t} );\n\n\t\treturn wrapper;\n\t}\n}\n\nmix( FileLoader, ObservableMixin );\n\n/**\n * Upload adapter interface used by the {@link module:upload/filerepository~FileRepository file repository}\n * to handle file upload. An upload adapter is a bridge between the editor and server that handles file uploads.\n * It should contain a logic necessary to initiate an upload process and monitor its progress.\n *\n * Learn how to develop your own upload adapter for CKEditor 5 in the\n * {@glink framework/guides/deep-dive/upload-adapter \"Custom upload adapter\" guide}.\n *\n * @interface UploadAdapter\n */\n\n/**\n * Executes the upload process.\n * This method should return a promise that will resolve when data will be uploaded to server. Promise should be\n * resolved with an object containing information about uploaded file:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png'\n *\t\t}\n *\n * Additionally, other image sizes can be provided:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png',\n *\t\t\t'160': 'http://server/size-160.image.png',\n *\t\t\t'500': 'http://server/size-500.image.png',\n *\t\t\t'1000': 'http://server/size-1000.image.png',\n *\t\t\t'1052': 'http://server/default-size.image.png'\n *\t\t}\n *\n * NOTE: When returning multiple images, the widest returned one should equal the default one. It is essential to\n * correctly set `width` attribute of the image. See this discussion:\n * https://github.com/ckeditor/ckeditor5-easy-image/issues/4 for more information.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#upload\n * @returns {Promise.<Object>} Promise that should be resolved when data is uploaded.\n */\n\n/**\n * Aborts the upload process.\n * After aborting it should reject promise returned from {@link #upload upload()}.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#abort\n */\n\n/**\n * Object returned by {@link module:upload/filerepository~FileLoader#_createFilePromiseWrapper} method\n * to add more control over the initial file promise passed to {@link module:upload/filerepository~FileLoader}.\n *\n * @protected\n * @typedef {Object} module:upload/filerepository~FilePromiseWrapper\n * @property {Promise.<File>} promise Wrapper promise which can be chained for further processing.\n * @property {Function} rejecter Rejects the promise when called.\n * @property {Boolean} isFulfilled Whether original promise is already fulfilled.\n */\n"]}]}