{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\nodelist.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\nodelist.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js"],"names":["Node","CKEditorError","NodeList","nodes","_nodes","_insertNodes","Symbol","iterator","index","node","indexOf","getNodeIndex","slice","reduce","sum","offsetSize","length","maxOffset","getNodeStartOffset","offset","totalOffset","nodeList","splice","indexStart","howMany","map","toJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @protected\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis._insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.', this );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-offset-out-of-bounds\n\t\t\t * @param {Number} offset\n\t\t\t * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\toffset,\n\t\t\t\t\tnodeList: this\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\t_insertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error nodelist-insertNodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @protected\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n"]}]}