{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\writer.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\writer.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/writer.js"],"names":["AttributeOperation","DetachOperation","InsertOperation","MarkerOperation","MoveOperation","RenameOperation","RootAttributeOperation","SplitOperation","MergeOperation","DocumentFragment","Text","Element","RootElement","Position","Range","DocumentSelection","toMap","CKEditorError","Writer","model","batch","data","attributes","name","item","itemOrPosition","offset","_assertWriterUsedCorrectly","position","_createAt","parent","isSameTree","root","move","_createOn","document","remove","version","insert","shouldReceiveAttributes","addOperation","applyOperation","markers","markerName","markerRange","rangeRootPosition","range","start","_getCombined","end","options","usingOperation","affectsData","has","updateMarker","addMarker","text","createText","createElement","key","value","itemOrRange","ranges","getMinimalFlatRanges","setAttributeOnRange","setAttributeOnItem","val","setAttribute","removeAttributesFromItem","getAttributeKeys","attribute","removeAttribute","getItems","isFlat","isEqual","_addOperationForAffectedMarkers","operation","rangeToRemove","reverse","flat","applyRemoveOperation","nodeBefore","nodeAfter","_mergeDetached","_merge","path","stickiness","createPositionFromPath","createPositionAt","createPositionAfter","createPositionBefore","createRange","element","createRangeIn","createRangeOn","selectable","placeOrOffset","createSelection","_createIn","targetPosition","sourcePosition","graveyard","graveyardPosition","merge","maxOffset","newName","renameOperation","_createBefore","limitElement","splitElement","getAncestors","includeSelf","includes","firstSplitElement","firstCopyElement","howMany","split","nextSibling","elementOrString","childCount","shiftedRange","getShiftedBy","undefined","_set","applyMarkerOperation","get","markerOrName","currentMarker","_refresh","hasUsingOperationDefined","affectsDataDefined","currentRange","getRange","updatedRange","managedUsingOperations","marker","_remove","oldRange","selection","_setTo","_setFocus","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","_removeSelectionAttribute","_overrideGravity","uid","_restoreGravity","isCollapsed","anchor","isEmpty","storeKey","_getStoreAttributeKey","_setAttribute","_removeAttribute","_currentWriter","type","positionOrRange","isAffected","containsPosition","elementBefore","elementAfter","affectedInLeftElement","isAtEnd","affectedInRightElement","affectedAfterLeftElement","affectedBeforeRightElement","writer","doc","lastSplitPosition","valueBefore","valueAfter","getWalker","shallow","getAttribute","nextPosition","previousValue","isRootChanged","newRange","rootA","rootB"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/writer\n */\n\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MoveOperation from './operation/moveoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\nimport SplitOperation from './operation/splitoperation';\nimport MergeOperation from './operation/mergeoperation';\n\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport Element from './element';\nimport RootElement from './rootelement';\nimport Position from './position';\nimport Range from './range.js';\nimport DocumentSelection from './documentselection';\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n *\t\tmodel.change( writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/guides/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n\t/**\n\t * Creates a writer instance.\n\t *\n\t * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n\t * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/model~Model} model\n\t * @param {module:engine/model/batch~Batch} batch\n\t */\n\tconstructor( model, batch ) {\n\t\t/**\n\t\t * Instance of the model on which this writer operates.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The batch to which this writer will add changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/batch~Batch}\n\t\t */\n\t\tthis.batch = batch;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\t\twriter.createText( 'foo', { bold: true } );\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @returns {module:engine/model/text~Text} Created text node.\n\t */\n\tcreateText( data, attributes ) {\n\t\treturn new Text( data, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/element~Element element}.\n\t *\n\t *\t\twriter.createElement( 'paragraph' );\n\t *\t\twriter.createElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/model/element~Element} Created element.\n\t */\n\tcreateElement( name, attributes ) {\n\t\treturn new Element( name, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\n\t */\n\tcreateDocumentFragment() {\n\t\treturn new DocumentFragment();\n\t}\n\n\t/**\n\t * Inserts item on given position.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, position );\n\t *\n\t * Instead of using position you can use parent and offset:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 5 );\n\t *\n\t * You can also use `end` instead of the offset to insert at the end:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 'end' );\n\t *\n\t * Or insert before or after another element:\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, anotherParagraph, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n\t * `model-writer-insert-forbidden-move` is thrown.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * **Note:** For a paste-like content insertion mechanism see\n\t * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\n\t * fragment to insert.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsert( item, itemOrPosition, offset = 0 ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( item instanceof Text && item.data == '' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// If item has a parent already.\n\t\tif ( item.parent ) {\n\t\t\t// We need to check if item is going to be inserted within the same document.\n\t\t\tif ( isSameTree( item.root, position.root ) ) {\n\t\t\t\t// If it's we just need to move it.\n\t\t\t\tthis.move( Range._createOn( item ), position );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If it isn't the same root.\n\t\t\telse {\n\t\t\t\tif ( item.root.document ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Cannot move a node from a document to a different tree.\n\t\t\t\t\t * It is forbidden to move a node that was already in a document outside of it.\n\t\t\t\t\t *\n\t\t\t\t\t * @error model-writer-insert-forbidden-move\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'model-writer-insert-forbidden-move: ' +\n\t\t\t\t\t\t'Cannot move a node from a document to a different tree. ' +\n\t\t\t\t\t\t'It is forbidden to move a node that was already in a document outside of it.',\n\t\t\t\t\t\tthis\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move between two different document fragments or from document fragment to a document is possible.\n\t\t\t\t\t// In that case, remove the item from it's original parent.\n\t\t\t\t\tthis.remove( item );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst version = position.root.document ? position.root.document.version : null;\n\n\t\tconst insert = new InsertOperation( position, item, version );\n\n\t\tif ( item instanceof Text ) {\n\t\t\tinsert.shouldReceiveAttributes = true;\n\t\t}\n\n\t\tthis.batch.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\t// When element is a DocumentFragment we need to move its markers to Document#markers.\n\t\tif ( item instanceof DocumentFragment ) {\n\t\t\tfor ( const [ markerName, markerRange ] of item.markers ) {\n\t\t\t\t// We need to migrate marker range from DocumentFragment to Document.\n\t\t\t\tconst rangeRootPosition = Position._createAt( markerRange.root, 0 );\n\t\t\t\tconst range = new Range(\n\t\t\t\t\tmarkerRange.start._getCombined( rangeRootPosition, position ),\n\t\t\t\t\tmarkerRange.end._getCombined( rangeRootPosition, position )\n\t\t\t\t);\n\n\t\t\t\tconst options = { range, usingOperation: true, affectsData: true };\n\n\t\t\t\tif ( this.model.markers.has( markerName ) ) {\n\t\t\t\t\tthis.updateMarker( markerName, options );\n\t\t\t\t} else {\n\t\t\t\t\tthis.addMarker( markerName, options );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts text on given position. You can optionally set text attributes:\n\t *\n\t *\t\twriter.insertText( 'foo', position );\n\t *\t\twriter.insertText( 'foo', { bold: true }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts 'foo' in paragraph, at offset 5:\n\t *\t\twriter.insertText( 'foo', paragraph, 5 );\n\t *\t\t// Inserts 'foo' at the end of a paragraph:\n\t *\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t// Inserts 'foo' after an image:\n\t *\t\twriter.insertText( 'foo', image, 'after' );\n\t *\n\t * These parameters work in the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertText( text, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createText( text ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts element on given position. You can optionally set attributes:\n\t *\n\t *\t\twriter.insertElement( 'paragraph', position );\n\t *\t\twriter.insertElement( 'paragraph', { alignment: 'center' }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts paragraph in the root at offset 5:\n\t *\t\twriter.insertElement( 'paragraph', root, 5 );\n\t *\t\t// Inserts paragraph at the end of a blockquote:\n\t *\t\twriter.insertElement( 'paragraph', blockquote, 'end' );\n\t *\t\t// Inserts after an image:\n\t *\t\twriter.insertElement( 'paragraph', image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertElement( name, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts item at the end of the given parent.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.append( paragraph, root );\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\n\t * item Item or document fragment to insert.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappend( item, parent ) {\n\t\tthis.insert( item, parent, 'end' );\n\t}\n\n\t/**\n\t * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\n\t *\n\t *\t\twriter.appendText( 'foo', paragraph );\n\t *\t\twriter.appendText( 'foo', { bold: true }, paragraph );\n\t *\n\t * @param {String} text Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendText( text, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createText( text ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Creates element and inserts it at the end of the parent. You can optionally set attributes:\n\t *\n\t *\t\twriter.appendElement( 'paragraph', root );\n\t *\t\twriter.appendElement( 'paragraph', { alignment: 'center' }, root );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendElement( name, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {*} value Attribute new value.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attribute will be set.\n\t */\n\tsetAttribute( key, value, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, value, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, value, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t *\t\twriter.setAttributes( {\n\t *\t\t\tbold: true,\n\t *\t\t\titalic: true\n\t *\t\t}, range );\n\t *\n\t * @param {Object} attributes Attributes keys and values.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attributes will be set.\n\t */\n\tsetAttributes( attributes, itemOrRange ) {\n\t\tfor ( const [ key, val ] of toMap( attributes ) ) {\n\t\t\tthis.setAttribute( key, val, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n\t * or from a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which the attribute will be removed.\n\t */\n\tremoveAttribute( key, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, null, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, null, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from all elements in the range or from the given item.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which all attributes will be removed.\n\t */\n\tclearAttributes( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst removeAttributesFromItem = item => {\n\t\t\tfor ( const attribute of item.getAttributeKeys() ) {\n\t\t\t\tthis.removeAttribute( attribute, item );\n\t\t\t}\n\t\t};\n\n\t\tif ( !( itemOrRange instanceof Range ) ) {\n\t\t\tremoveAttributesFromItem( itemOrRange );\n\t\t} else {\n\t\t\tfor ( const item of itemOrRange.getItems() ) {\n\t\t\t\tremoveAttributesFromItem( item );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves all items in the source range to the target position.\n\t *\n\t *\t\twriter.move( sourceRange, targetPosition );\n\t *\n\t * Instead of the target position you can use parent and offset or define that range should be moved to the end\n\t * or before or after chosen item:\n\t *\n\t *\t\t// Moves all items in the range to the paragraph at offset 5:\n\t *\t\twriter.move( sourceRange, paragraph, 5 );\n\t *\t\t// Moves all items in the range to the end of a blockquote:\n\t *\t\twriter.move( sourceRange, blockquote, 'end' );\n\t *\t\t// Moves all items in the range to a position after an image:\n\t *\t\twriter.move( sourceRange, image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that items can be moved only within the same tree. It means that you can move items within the same root\n\t * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n\t * but you can not move items from document fragment to the document or from one detached element to another. Use\n\t * {@link module:engine/model/writer~Writer#insert} in such cases.\n\t *\n\t * @param {module:engine/model/range~Range} range Source range.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tmove( range, itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Invalid range to move.\n\t\t\t *\n\t\t\t * @error writer-move-invalid-range\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-invalid-range: Invalid range to move.', this );\n\t\t}\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to move is not flat.\n\t\t\t *\n\t\t\t * @error writer-move-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-range-not-flat: Range to move is not flat.', this );\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// Do not move anything if the move target is same as moved range start.\n\t\tif ( position.isEqual( range.start ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'move', range );\n\n\t\tif ( !isSameTree( range.root, position.root ) ) {\n\t\t\t/**\n\t\t\t * Range is going to be moved within not the same document. Please use\n\t\t\t * {@link module:engine/model/writer~Writer#insert insert} instead.\n\t\t\t *\n\t\t\t * @error writer-move-different-document\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-different-document: Range is going to be moved between different documents.', this );\n\t\t}\n\n\t\tconst version = range.root.document ? range.root.document.version : null;\n\t\tconst operation = new MoveOperation( range.start, range.end.offset - range.start.offset, position, version );\n\n\t\tthis.batch.addOperation( operation );\n\t\tthis.model.applyOperation( operation );\n\t}\n\n\t/**\n\t * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\n\t */\n\tremove( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst rangeToRemove = itemOrRange instanceof Range ? itemOrRange : Range._createOn( itemOrRange );\n\t\tconst ranges = rangeToRemove.getMinimalFlatRanges().reverse();\n\n\t\tfor ( const flat of ranges ) {\n\t\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\t\tthis._addOperationForAffectedMarkers( 'move', flat );\n\n\t\t\tapplyRemoveOperation( flat.start, flat.end.offset - flat.start.offset, this.batch, this.model );\n\t\t}\n\t}\n\n\t/**\n\t * Merges two siblings at the given position.\n\t *\n\t * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n\t * `writer-merge-no-element-after` error will be thrown.\n\t *\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\tmerge( position ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'merge', position );\n\n\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node before merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-before\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-before: Node before merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node after merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-after\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-after: Node after merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !position.root.document ) {\n\t\t\tthis._mergeDetached( position );\n\t\t} else {\n\t\t\tthis._merge( position );\n\t\t}\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn this.model.createPositionFromPath( root, path, stickiness );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn this.model.createPositionAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn this.model.createPositionAfter( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn this.model.createPositionBefore( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn this.model.createRange( start, end );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn this.model.createRangeIn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( element ) {\n\t\treturn this.model.createRangeOn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createSelection `Model#createSelection()`}.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn this.model.createSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Performs merge action in a detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_mergeDetached( position ) {\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\tthis.move( Range._createIn( nodeAfter ), Position._createAt( nodeBefore, 'end' ) );\n\t\tthis.remove( nodeAfter );\n\t}\n\n\t/**\n\t * Performs merge action in a non-detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_merge( position ) {\n\t\tconst targetPosition = Position._createAt( position.nodeBefore, 'end' );\n\t\tconst sourcePosition = Position._createAt( position.nodeAfter, 0 );\n\n\t\tconst graveyard = position.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\tconst version = position.root.document.version;\n\n\t\tconst merge = new MergeOperation( sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version );\n\n\t\tthis.batch.addOperation( merge );\n\t\tthis.model.applyOperation( merge );\n\t}\n\n\t/**\n\t * Renames the given element.\n\t *\n\t * @param {module:engine/model/element~Element} element The element to rename.\n\t * @param {String} newName New element name.\n\t */\n\trename( element, newName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Trying to rename an object which is not an instance of Element.\n\t\t\t *\n\t\t\t * @error writer-rename-not-element-instance\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst version = element.root.document ? element.root.document.version : null;\n\t\tconst renameOperation = new RenameOperation( Position._createBefore( element ), element.name, newName, version );\n\n\t\tthis.batch.addOperation( renameOperation );\n\t\tthis.model.applyOperation( renameOperation );\n\t}\n\n\t/**\n\t * Splits elements starting from the given position and going to the top of the model tree as long as given\n\t * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n\t *\n\t * The element needs to have a parent. It cannot be a root element nor a document fragment.\n\t * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of split.\n\t * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\n\t * @returns {Object} result Split result.\n\t * @returns {module:engine/model/position~Position} result.position Position between split elements.\n\t * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ends\n\t * at the beginning of the first copy element.\n\t */\n\tsplit( position, limitElement ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tlet splitElement = position.parent;\n\n\t\tif ( !splitElement.parent ) {\n\t\t\t/**\n\t\t\t * Element with no parent can not be split.\n\t\t\t *\n\t\t\t * @error writer-split-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-split-element-no-parent: Element with no parent can not be split.', this );\n\t\t}\n\n\t\t// When limit element is not defined lets set splitElement parent as limit.\n\t\tif ( !limitElement ) {\n\t\t\tlimitElement = splitElement.parent;\n\t\t}\n\n\t\tif ( !position.parent.getAncestors( { includeSelf: true } ).includes( limitElement ) ) {\n\t\t\tthrow new CKEditorError( 'writer-split-invalid-limit-element: Limit element is not a position ancestor.', this );\n\t\t}\n\n\t\t// We need to cache elements that will be created as a result of the first split because\n\t\t// we need to create a range from the end of the first split element to the beginning of the\n\t\t// first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n\t\tlet firstSplitElement, firstCopyElement;\n\n\t\tdo {\n\t\t\tconst version = splitElement.root.document ? splitElement.root.document.version : null;\n\t\t\tconst howMany = splitElement.maxOffset - position.offset;\n\t\t\tconst split = new SplitOperation( position, howMany, null, version );\n\n\t\t\tthis.batch.addOperation( split );\n\t\t\tthis.model.applyOperation( split );\n\n\t\t\t// Cache result of the first split.\n\t\t\tif ( !firstSplitElement && !firstCopyElement ) {\n\t\t\t\tfirstSplitElement = splitElement;\n\t\t\t\tfirstCopyElement = position.parent.nextSibling;\n\t\t\t}\n\n\t\t\tposition = this.createPositionAfter( position.parent );\n\t\t\tsplitElement = position.parent;\n\t\t} while ( splitElement !== limitElement );\n\n\t\treturn {\n\t\t\tposition,\n\t\t\trange: new Range( Position._createAt( firstSplitElement, 'end' ), Position._createAt( firstCopyElement, 0 ) )\n\t\t};\n\t}\n\n\t/**\n\t * Wraps the given range with the given element or with a new element (if a string was passed).\n\t *\n\t * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n\t * If not, an error will be thrown.\n\t *\n\t * @param {module:engine/model/range~Range} range Range to wrap.\n\t * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\n\t */\n\twrap( range, elementOrString ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to wrap is not flat.\n\t\t\t *\n\t\t\t * @error writer-wrap-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-range-not-flat: Range to wrap is not flat.', this );\n\t\t}\n\n\t\tconst element = elementOrString instanceof Element ? elementOrString : new Element( elementOrString );\n\n\t\tif ( element.childCount > 0 ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is not empty.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-not-empty: Element to wrap with is not empty.', this );\n\t\t}\n\n\t\tif ( element.parent !== null ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is already attached to a tree model.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-attached\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-attached: Element to wrap with is already attached to tree model.', this );\n\t\t}\n\n\t\tthis.insert( element, range.start );\n\n\t\t// Shift the range-to-wrap because we just inserted an element before that range.\n\t\tconst shiftedRange = new Range( range.start.getShiftedBy( 1 ), range.end.getShiftedBy( 1 ) );\n\n\t\tthis.move( shiftedRange, Position._createAt( element, 0 ) );\n\t}\n\n\t/**\n\t * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n\t * Throws error if you try to unwrap an element which does not have a parent.\n\t *\n\t * @param {module:engine/model/element~Element} element Element to unwrap.\n\t */\n\tunwrap( element ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( element.parent === null ) {\n\t\t\t/**\n\t\t\t * Trying to unwrap an element which has no parent.\n\t\t\t *\n\t\t\t * @error writer-unwrap-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.', this );\n\t\t}\n\n\t\tthis.move( Range._createIn( element ), this.createPositionAfter( element ) );\n\t\tthis.remove( element );\n\t}\n\n\t/**\n\t * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes.\n\t *\n\t * As the first parameter you can set marker name.\n\t *\n\t * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by the\n\t * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Create marker directly base on marker's name:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false } );\n\t *\n\t * Create marker using operation:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Create marker that affects the editor data:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false, affectsData: true } );\n\t *\n\t * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String} name Name of a marker to create - must be unique.\n\t * @param {Object} options\n\t * @param {Boolean} options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {module:engine/model/range~Range} options.range Marker range.\n\t * @param {Boolean} [options.affectsData=false] Flag indicating that the marker changes the editor data.\n\t * @returns {module:engine/model/markercollection~Marker} Marker that was set.\n\t */\n\taddMarker( name, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !options || typeof options.usingOperation != 'boolean' ) {\n\t\t\t/**\n\t\t\t * The `options.usingOperation` parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-usingOperation\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-usingOperation: The options.usingOperation parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst usingOperation = options.usingOperation;\n\t\tconst range = options.range;\n\t\tconst affectsData = options.affectsData === undefined ? false : options.affectsData;\n\n\t\tif ( this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Marker with provided name already exists.\n\t\t\t *\n\t\t\t * @error writer-addMarker-marker-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-addMarker-marker-exists: Marker with provided name already exists.', this );\n\t\t}\n\n\t\tif ( !range ) {\n\t\t\t/**\n\t\t\t * Range parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-range: Range parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( !usingOperation ) {\n\t\t\treturn this.model.markers._set( name, range, usingOperation, affectsData );\n\t\t}\n\n\t\tapplyMarkerOperation( this, name, null, range, affectsData );\n\n\t\treturn this.model.markers.get( name );\n\t}\n\n\t/**\n\t * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n\t * marker's range directly using this method.\n\t *\n\t * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n\t * name is created and returned.\n\t *\n\t * As the second parameter you can set the new marker data or leave this parameter as empty which will just refresh\n\t * the marker by triggering downcast conversion for it. Refreshing the marker is useful when you want to change\n\t * the marker {@link module:engine/view/element~Element view element} without changing any marker data.\n\t *\n\t * \t\tlet isCommentActive = false;\n\t *\n\t * \t\tmodel.conversion.markerToHighlight( {\n\t * \t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\tconst classes = [ 'comment-marker' ];\n\t *\n\t *\t\t\t\tif ( isCommentActive ) {\n\t *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn { classes };\n\t *\t\t\t}\n\t * \t\t} );\n\t *\n\t * \t\t// Change the property that indicates if marker is displayed as active or not.\n\t * \t\tisCommentActive = true;\n\t *\n\t * \t\t// And refresh the marker to convert it with additional class.\n\t * \t\tmodel.change( writer => writer.updateMarker( 'comment' ) );\n\t *\n\t * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by\n\t * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Update marker directly base on marker's name:\n\t *\n\t *\t\tupdateMarker( markerName, { range } );\n\t *\n\t * Update marker using operation:\n\t *\n\t *\t\tupdateMarker( marker, { range, usingOperation: true } );\n\t *\t\tupdateMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Change marker's option (start using operations to manage it):\n\t *\n\t *\t\tupdateMarker( marker, { usingOperation: true } );\n\t *\n\t * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n\t *\n\t *\t\tupdateMarker( markerName, { affectsData: false } );\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n\t * @param {Object} [options] If options object is not defined then marker will be refreshed by triggering\n\t * downcast conversion for this marker with the same data.\n\t * @param {module:engine/model/range~Range} [options.range] Marker range to update.\n\t * @param {Boolean} [options.usingOperation] Flag indicated whether the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {Boolean} [options.affectsData] Flag indicating that the marker changes the editor data.\n\t */\n\tupdateMarker( markerOrName, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\t\tconst currentMarker = this.model.markers.get( markerName );\n\n\t\tif ( !currentMarker ) {\n\t\t\t/**\n\t\t\t * Marker with provided name does not exists.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-marker-not-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-updateMarker-marker-not-exists: Marker with provided name does not exists.', this );\n\t\t}\n\n\t\tif ( !options ) {\n\t\t\tthis.model.markers._refresh( currentMarker );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n\t\tconst affectsDataDefined = typeof options.affectsData == 'boolean';\n\n\t\t// Use previously defined marker's affectsData if the property is not provided.\n\t\tconst affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n\n\t\tif ( !hasUsingOperationDefined && !options.range && !affectsDataDefined ) {\n\t\t\t/**\n\t\t\t * One of the options is required - provide range, usingOperations or affectsData.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-wrong-options\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst currentRange = currentMarker.getRange();\n\t\tconst updatedRange = options.range ? options.range : currentRange;\n\n\t\tif ( hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations ) {\n\t\t\t// The marker type is changed so it's necessary to create proper operations.\n\t\t\tif ( options.usingOperation ) {\n\t\t\t\t// If marker changes to a managed one treat this as synchronizing existing marker.\n\t\t\t\t// Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n\t\t\t\tapplyMarkerOperation( this, markerName, null, updatedRange, affectsData );\n\t\t\t} else {\n\t\t\t\t// If marker changes to a marker that do not use operations then we need to create additional operation\n\t\t\t\t// that removes that marker first.\n\t\t\t\tapplyMarkerOperation( this, markerName, currentRange, null, affectsData );\n\n\t\t\t\t// Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n\t\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Marker's type doesn't change so update it accordingly.\n\t\tif ( currentMarker.managedUsingOperations ) {\n\t\t\tapplyMarkerOperation( this, markerName, currentRange, updatedRange, affectsData );\n\t\t} else {\n\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t}\n\t}\n\n\t/**\n\t * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n\t * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n\t * it will be destroyed using operation.\n\t *\n\t * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\n\t */\n\tremoveMarker( markerOrName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\n\t\tif ( !this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove marker which does not exist.\n\t\t\t *\n\t\t\t * @error writer-removeMarker-no-marker\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-removeMarker-no-marker: Trying to remove marker which does not exist.', this );\n\t\t}\n\n\t\tconst marker = this.model.markers.get( name );\n\n\t\tif ( !marker.managedUsingOperations ) {\n\t\t\tthis.model.markers._remove( name );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldRange = marker.getRange();\n\n\t\tapplyMarkerOperation( this, name, oldRange, null, marker.affectsData );\n\t}\n\n\t/**\n\t * Sets the document's selection (ranges and direction) to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable} or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\twriter.setSelection( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\twriter.setSelection( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPosition( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `Writer#setSelection()` allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * Using key and value pair:\n\t *\n\t * \twriter.setSelectionAttribute( 'italic', true );\n\t *\n\t * Using key-value object:\n\t *\n\t * \twriter.setSelectionAttribute( { italic: true, bold: false } );\n\t *\n\t * Using iterable object:\n\t *\n\t * \twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\n\t *\n\t * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\n\t * or object / iterable of key => value attribute pairs.\n\t * @param {*} [value] Attribute value.\n\t */\n\tsetSelectionAttribute( keyOrObjectOrIterable, value ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrObjectOrIterable === 'string' ) {\n\t\t\tthis._setSelectionAttribute( keyOrObjectOrIterable, value );\n\t\t} else {\n\t\t\tfor ( const [ key, value ] of toMap( keyOrObjectOrIterable ) ) {\n\t\t\t\tthis._setSelectionAttribute( key, value );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute(s) with given key(s) from the selection.\n\t *\n\t * Remove one attribute:\n\t *\n\t *\t\twriter.removeSelectionAttribute( 'italic' );\n\t *\n\t * Remove multiple attributes:\n\t *\n\t *\t\twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\n\t *\n\t * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n\t */\n\tremoveSelectionAttribute( keyOrIterableOfKeys ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrIterableOfKeys === 'string' ) {\n\t\t\tthis._removeSelectionAttribute( keyOrIterableOfKeys );\n\t\t} else {\n\t\t\tfor ( const key of keyOrIterableOfKeys ) {\n\t\t\t\tthis._removeSelectionAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n\t * of the selection from left to right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n\t * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * For the following model fragment:\n\t *\n\t *\t\t<$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n\t *\n\t * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n\t * * Overridden gravity: selection will have `bold` attribute.\n\t *\n\t * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\toverrideSelectionGravity() {\n\t\treturn this.model.document.selection._overrideGravity();\n\t}\n\n\t/**\n\t * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @param {String} uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n\t */\n\trestoreSelectionGravity( uid ) {\n\t\tthis.model.document.selection._restoreGravity( uid );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t * @param {*} value Attribute value.\n\t */\n\t_setSelectionAttribute( key, value ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Store attribute in parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.setAttribute( storeKey, value, selection.anchor.parent );\n\t\t}\n\n\t\tselection._setAttribute( key, value );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeSelectionAttribute( key ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Remove stored attribute from parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.removeAttribute( storeKey, selection.anchor.parent );\n\t\t}\n\n\t\tselection._removeAttribute( key );\n\t}\n\n\t/**\n\t * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n\t *\n\t * @private\n\t */\n\t_assertWriterUsedCorrectly() {\n\t\t/**\n\t\t * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()`} or\n\t\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n\t\t *\n\t\t * The writer can only be used inside these blocks which ensures that the model\n\t\t * can only be changed during such \"sessions\".\n\t\t *\n\t\t * @error writer-incorrect-use\n\t\t */\n\t\tif ( this.model._currentWriter !== this ) {\n\t\t\tthrow new CKEditorError( 'writer-incorrect-use: Trying to use a writer outside the change() block.', this );\n\t\t}\n\t}\n\n\t/**\n\t * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers\n\t * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range\n\t * can be later correctly processed during undo.\n\t *\n\t * @private\n\t * @param {'move'|'merge'} type Writer action type.\n\t * @param {module:engine/model/position~Position|module:engine/model/range~Range} positionOrRange Position or range\n\t * where the writer action happens.\n\t */\n\t_addOperationForAffectedMarkers( type, positionOrRange ) {\n\t\tfor ( const marker of this.model.markers ) {\n\t\t\tif ( !marker.managedUsingOperations ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst markerRange = marker.getRange();\n\t\t\tlet isAffected = false;\n\n\t\t\tif ( type == 'move' ) {\n\t\t\t\tisAffected =\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.start.isEqual( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.end ) ||\n\t\t\t\t\tpositionOrRange.end.isEqual( markerRange.end );\n\t\t\t} else {\n\t\t\t\t// if type == 'merge'.\n\t\t\t\tconst elementBefore = positionOrRange.nodeBefore;\n\t\t\t\tconst elementAfter = positionOrRange.nodeAfter;\n\n\t\t\t\t//               Start:  <p>Foo[</p><p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInLeftElement = markerRange.start.parent == elementBefore && markerRange.start.isAtEnd;\n\n\t\t\t\t//               Start:  <p>[Foo</p><p>]Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInRightElement = markerRange.end.parent == elementAfter && markerRange.end.offset == 0;\n\n\t\t\t\t//               Start:  <p>[Foo</p>]<p>Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedAfterLeftElement = markerRange.end.nodeAfter == elementAfter;\n\n\t\t\t\t//               Start:  <p>Foo</p>[<p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedBeforeRightElement = markerRange.start.nodeAfter == elementAfter;\n\n\t\t\t\tisAffected = affectedInLeftElement || affectedInRightElement || affectedAfterLeftElement || affectedBeforeRightElement;\n\t\t\t}\n\n\t\t\tif ( isAffected ) {\n\t\t\t\tthis.updateMarker( marker.name, { range: markerRange } );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n//\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\n// the range into smaller parts.\n//\n// Given `range` must be flat.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\nfunction setAttributeOnRange( writer, key, value, range ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\t// Position of the last split, the beginning of the new range.\n\tlet lastSplitPosition = range.start;\n\n\t// Currently position in the scanning range. Because we need value after the position, it is not a current\n\t// position of the iterator but the previous one (we need to iterate one more time to get the value after).\n\tlet position;\n\n\t// Value before the currently position.\n\tlet valueBefore;\n\n\t// Value after the currently position.\n\tlet valueAfter;\n\n\tfor ( const val of range.getWalker( { shallow: true } ) ) {\n\t\tvalueAfter = val.item.getAttribute( key );\n\n\t\t// At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n\t\t// because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n\t\tif ( position && valueBefore != valueAfter ) {\n\t\t\t// if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n\t\t\tif ( valueBefore != value ) {\n\t\t\t\taddOperation();\n\t\t\t}\n\n\t\t\tlastSplitPosition = position;\n\t\t}\n\n\t\tposition = val.nextPosition;\n\t\tvalueBefore = valueAfter;\n\t}\n\n\t// Because position in the loop is not the iterator position (see let position comment), the last position in\n\t// the while loop will be last but one position in the range. We need to check the last position manually.\n\tif ( position instanceof Position && position != lastSplitPosition && valueBefore != value ) {\n\t\taddOperation();\n\t}\n\n\tfunction addOperation() {\n\t\tconst range = new Range( lastSplitPosition, position );\n\t\tconst version = range.root.document ? doc.version : null;\n\t\tconst operation = new AttributeOperation( range, key, valueBefore, value, version );\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\nfunction setAttributeOnItem( writer, key, value, item ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\tconst previousValue = item.getAttribute( key );\n\tlet range, operation;\n\n\tif ( previousValue != value ) {\n\t\tconst isRootChanged = item.root === item;\n\n\t\tif ( isRootChanged ) {\n\t\t\t// If we change attributes of root element, we have to use `RootAttributeOperation`.\n\t\t\tconst version = item.document ? doc.version : null;\n\n\t\t\toperation = new RootAttributeOperation( item, key, previousValue, value, version );\n\t\t} else {\n\t\t\trange = new Range( Position._createBefore( item ), writer.createPositionAfter( item ) );\n\n\t\t\tconst version = range.root.document ? doc.version : null;\n\n\t\t\toperation = new AttributeOperation( range, key, previousValue, value, version );\n\t\t}\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} name Marker name.\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\n// @param {Boolean} affectsData\nfunction applyMarkerOperation( writer, name, oldRange, newRange, affectsData ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\tconst operation = new MarkerOperation( name, oldRange, newRange, model.markers, affectsData, doc.version );\n\n\twriter.batch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n// The operation will be applied on given model instance and added to given operation instance.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\n// @param {Number} howMany Number of nodes to remove.\n// @param {Batch} batch Batch to which the operation will be added.\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\nfunction applyRemoveOperation( position, howMany, batch, model ) {\n\tlet operation;\n\n\tif ( position.root.document ) {\n\t\tconst doc = model.document;\n\t\tconst graveyardPosition = new Position( doc.graveyard, [ 0 ] );\n\n\t\toperation = new MoveOperation( position, howMany, graveyardPosition, doc.version );\n\t} else {\n\t\toperation = new DetachOperation( position, howMany );\n\t}\n\n\tbatch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Returns `true` if both root elements are the same element or both are documents root elements.\n//\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\n// unexpected `move` operation.\nfunction isSameTree( rootA, rootB ) {\n\t// If it is the same root this is the same tree.\n\tif ( rootA === rootB ) {\n\t\treturn true;\n\t}\n\n\t// If both roots are documents root it is operation within the document what we still treat as the same tree.\n\tif ( rootA instanceof RootElement && rootB instanceof RootElement ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"]}]}