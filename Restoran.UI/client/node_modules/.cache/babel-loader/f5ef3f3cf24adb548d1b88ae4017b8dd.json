{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\operation\\mergeoperation.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\operation\\mergeoperation.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js"],"names":["Operation","SplitOperation","Position","Range","_move","CKEditorError","MergeOperation","sourcePosition","howMany","targetPosition","graveyardPosition","baseVersion","clone","stickiness","constructor","_getTransformedByMergeOperation","path","slice","insertionPosition","root","split","sourceElement","parent","targetElement","maxOffset","mergedElement","sourceRange","_createIn","_createOn","json","toJSON","end","getShiftedBy","Number","POSITIVE_INFINITY","document","fromJSON"],"mappings":";;;;;;;;;;AAAA;;;;;AAKA;;;AAIA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAOC,aAAP,MAA0B,6CAA1B;AAEA;;;;;;;;;;;IAUqBC,c;;;;;AACpB;;;;;;;;;;;AAWA,0BAAaC,cAAb,EAA6BC,OAA7B,EAAsCC,cAAtC,EAAsDC,iBAAtD,EAAyEC,WAAzE,EAAuF;AAAA;;AAAA;;AACtF,wFAAOA,WAAP;AAEA;;;;;;AAKA,UAAKJ,cAAL,GAAsBA,cAAc,CAACK,KAAf,EAAtB,CARsF,CAStF;;AACA,UAAKL,cAAL,CAAoBM,UAApB,GAAiC,YAAjC;AAEA;;;;;;AAKA,UAAKL,OAAL,GAAeA,OAAf;AAEA;;;;;;AAKA,UAAKC,cAAL,GAAsBA,cAAc,CAACG,KAAf,EAAtB,CAxBsF,CAyBtF;AACA;;AACA,UAAKH,cAAL,CAAoBI,UAApB,GAAiC,QAAjC;AAEA;;;;;;AAKA,UAAKH,iBAAL,GAAyBA,iBAAiB,CAACE,KAAlB,EAAzB;AAlCsF;AAmCtF;AAED;;;;;;;;AA8BA;;;;;4BAKQ;AACP,aAAO,IAAI,KAAKE,WAAT,CAAsB,KAAKP,cAA3B,EAA2C,KAAKC,OAAhD,EAAyD,KAAKC,cAA9D,EAA8E,KAAKC,iBAAnF,EAAsG,KAAKC,WAA3G,CAAP;AACA;AAED;;;;;;;;kCAKc;AACb;AACA;AACA;AACA,UAAMF,cAAc,GAAG,KAAKA,cAAL,CAAoBM,+BAApB,CAAqD,IAArD,CAAvB;;AAEA,UAAMC,IAAI,GAAG,KAAKT,cAAL,CAAoBS,IAApB,CAAyBC,KAAzB,CAAgC,CAAhC,EAAmC,CAAC,CAApC,CAAb;;AACA,UAAMC,iBAAiB,GAAG,IAAIhB,QAAJ,CAAc,KAAKK,cAAL,CAAoBY,IAAlC,EAAwCH,IAAxC,EAA+CD,+BAA/C,CAAgF,IAAhF,CAA1B;;AAEA,UAAMK,KAAK,GAAG,IAAInB,cAAJ,CAAoBQ,cAApB,EAAoC,KAAKD,OAAzC,EAAkD,KAAKE,iBAAvD,EAA0E,KAAKC,WAAL,GAAmB,CAA7F,CAAd;AACAS,MAAAA,KAAK,CAACF,iBAAN,GAA0BA,iBAA1B;AAEA,aAAOE,KAAP;AACA;AAED;;;;;;gCAGY;AACX,UAAMC,aAAa,GAAG,KAAKd,cAAL,CAAoBe,MAA1C;AACA,UAAMC,aAAa,GAAG,KAAKd,cAAL,CAAoBa,MAA1C,CAFW,CAIX;;AACA,UAAK,CAACD,aAAa,CAACC,MAApB,EAA6B;AAC5B;;;;;AAKA,cAAM,IAAIjB,aAAJ,CAAmB,4EAAnB,EAAiG,IAAjG,CAAN;AACA,OAPD,MAOO,IAAK,CAACkB,aAAa,CAACD,MAApB,EAA6B;AACnC;;;;;AAKA,cAAM,IAAIjB,aAAJ,CAAmB,4EAAnB,EAAiG,IAAjG,CAAN;AACA,OAPM,MAOA,IAAK,KAAKG,OAAL,IAAgBa,aAAa,CAACG,SAAnC,EAA+C;AACrD;;;;;AAKA,cAAM,IAAInB,aAAJ,CAAmB,4FAAnB,EAAiH,IAAjH,CAAN;AACA;AACD;AAED;;;;;;+BAGW;AACV,UAAMoB,aAAa,GAAG,KAAKlB,cAAL,CAAoBe,MAA1C;;AACA,UAAMI,WAAW,GAAGvB,KAAK,CAACwB,SAAN,CAAiBF,aAAjB,CAApB;;AAEArB,MAAAA,KAAK,CAAEsB,WAAF,EAAe,KAAKjB,cAApB,CAAL;;AACAL,MAAAA,KAAK,CAAED,KAAK,CAACyB,SAAN,CAAiBH,aAAjB,CAAF,EAAoC,KAAKf,iBAAzC,CAAL;AACA;AAED;;;;;;6BAGS;AACR,UAAMmB,IAAI,6EAAV;;AAEAA,MAAAA,IAAI,CAACtB,cAAL,GAAsBsB,IAAI,CAACtB,cAAL,CAAoBuB,MAApB,EAAtB;AACAD,MAAAA,IAAI,CAACpB,cAAL,GAAsBoB,IAAI,CAACpB,cAAL,CAAoBqB,MAApB,EAAtB;AACAD,MAAAA,IAAI,CAACnB,iBAAL,GAAyBmB,IAAI,CAACnB,iBAAL,CAAuBoB,MAAvB,EAAzB;AAEA,aAAOD,IAAP;AACA;AAED;;;;;;wBAhHW;AACV,aAAO,OAAP;AACA;AAED;;;;;;;;;wBAMuB;AACtB,aAAO,IAAI3B,QAAJ,CAAc,KAAKK,cAAL,CAAoBY,IAAlC,EAAwC,KAAKZ,cAAL,CAAoBS,IAApB,CAAyBC,KAAzB,CAAgC,CAAhC,EAAmC,CAAC,CAApC,CAAxC,CAAP;AACA;AAED;;;;;;;;;;wBAOiB;AAChB,UAAMc,GAAG,GAAG,KAAKxB,cAAL,CAAoByB,YAApB,CAAkCC,MAAM,CAACC,iBAAzC,CAAZ;AAEA,aAAO,IAAI/B,KAAJ,CAAW,KAAKI,cAAhB,EAAgCwB,GAAhC,CAAP;AACA;;;;AA8FD;;;;;;;6BAOiBF,I,EAAMM,Q,EAAW;AACjC,UAAM5B,cAAc,GAAGL,QAAQ,CAACkC,QAAT,CAAmBP,IAAI,CAACtB,cAAxB,EAAwC4B,QAAxC,CAAvB;AACA,UAAM1B,cAAc,GAAGP,QAAQ,CAACkC,QAAT,CAAmBP,IAAI,CAACpB,cAAxB,EAAwC0B,QAAxC,CAAvB;AACA,UAAMzB,iBAAiB,GAAGR,QAAQ,CAACkC,QAAT,CAAmBP,IAAI,CAACnB,iBAAxB,EAA2CyB,QAA3C,CAA1B;AAEA,aAAO,IAAI,IAAJ,CAAU5B,cAAV,EAA0BsB,IAAI,CAACrB,OAA/B,EAAwCC,cAAxC,EAAwDC,iBAAxD,EAA2EmB,IAAI,CAAClB,WAAhF,CAAP;AACA,K,CAED;AACA;AACA;AACA;AACA;;;;wBAvBuB;AACtB,aAAO,gBAAP;AACA;;;;EAzK0CX,S;;SAAvBM,c","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/mergeoperation\n */\n\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MergeOperation extends Operation {\n\t/**\n\t * Creates a merge operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition Position inside the merged element. All nodes from that\n\t * element after that position will be moved to {@link ~#targetPosition}.\n\t * @param {Number} howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t * @param {module:engine/model/position~Position} targetPosition Position which the nodes from the merged elements will be moved to.\n\t * @param {module:engine/model/position~Position} graveyardPosition Position in graveyard to which the merged element will be moved.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position inside the merged element. All nodes from that element after that position will be moved to {@link ~#targetPosition}.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// This is, and should always remain, the first position in its parent.\n\t\tthis.sourcePosition.stickiness = 'toPrevious';\n\n\t\t/**\n\t\t * Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/mergeoperation~MergeOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position which the nodes from the merged elements will be moved to.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\t// Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n\t\t// this is, and should always remain, the last position in its parent.\n\t\tthis.targetPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Position in graveyard to which the merged element will be moved.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition.clone();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'merge';\n\t}\n\n\t/**\n\t * Position before the merged element (which will be deleted).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget deletionPosition() {\n\t\treturn new Position( this.sourcePosition.root, this.sourcePosition.path.slice( 0, -1 ) );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n\t * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.sourcePosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.sourcePosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tgetReversed() {\n\t\t// Positions in this method are transformed by this merge operation because the split operation bases on\n\t\t// the context after this merge operation happened (because split operation reverses it).\n\t\t// So we need to acknowledge that the merge operation happened and those positions changed a little.\n\t\tconst targetPosition = this.targetPosition._getTransformedByMergeOperation( this );\n\n\t\tconst path = this.sourcePosition.path.slice( 0, -1 );\n\t\tconst insertionPosition = new Position( this.sourcePosition.root, path )._getTransformedByMergeOperation( this );\n\n\t\tconst split = new SplitOperation( targetPosition, this.howMany, this.graveyardPosition, this.baseVersion + 1 );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\n\t\t// Validate whether merge operation has correct parameters.\n\t\tif ( !sourceElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge source position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-source-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-source-position-invalid: Merge source position is invalid.', this );\n\t\t} else if ( !targetElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge target position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-target-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-target-position-invalid: Merge target position is invalid.', this );\n\t\t} else if ( this.howMany != sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * Merge operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error merge-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst mergedElement = this.sourcePosition.parent;\n\t\tconst sourceRange = Range._createIn( mergedElement );\n\n\t\t_move( sourceRange, this.targetPosition );\n\t\t_move( Range._createOn( mergedElement ), this.graveyardPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = json.sourcePosition.toJSON();\n\t\tjson.targetPosition = json.targetPosition.toJSON();\n\t\tjson.graveyardPosition = json.graveyardPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MergeOperation';\n\t}\n\n\t/**\n\t * Creates `MergeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\t\tconst graveyardPosition = Position.fromJSON( json.graveyardPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `MergeOperation( ${ this.baseVersion } ): ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`${ this.sourcePosition } -> ${ this.targetPosition }` +\n\t// @if CK_DEBUG_ENGINE //\t\t` ( ${ this.howMany } ), ${ this.graveyardPosition }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}