{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\operation\\splitoperation.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\operation\\splitoperation.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js"],"names":["Operation","MergeOperation","Position","Range","_insert","_move","CKEditorError","SplitOperation","splitPosition","howMany","graveyardPosition","baseVersion","clone","stickiness","insertionPosition","getInsertionPosition","split","constructor","graveyard","root","document","moveTargetPosition","element","parent","offset","maxOffset","nodeAfter","splitElement","_createFromPositionAndShift","newElement","_clone","sourceRange","_createAt","json","toJSON","path","slice","push","end","getShiftedBy","Number","POSITIVE_INFINITY","length","fromJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\n\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class SplitOperation extends Operation {\n\t/**\n\t * Creates a split operation.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n\t * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n\t * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n\t * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( splitPosition, howMany, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position at which an element should be split.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n\t\t */\n\t\tthis.splitPosition = splitPosition.clone();\n\t\t// Keep position sticking to the next node. This way any new content added at the place where the element is split\n\t\t// will be left in the original element.\n\t\tthis.splitPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Total offset size of elements that are in the split element after `position`.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which the clone of split element (or element from graveyard) will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n\t\t */\n\t\tthis.insertionPosition = SplitOperation.getInsertionPosition( splitPosition );\n\t\tthis.insertionPosition.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n\t\t * If it is not set, a copy of the the `position` parent will be used.\n\t\t *\n\t\t * The default behavior is to clone the split element. Element from graveyard is used during undo.\n\t\t *\n\t\t * @member {module:engine/model/position~Position|null} #graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tthis.graveyardPosition.stickiness = 'toNext';\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position inside the new clone of a split element.\n\t *\n\t * This is a position where nodes that are after the split position will be moved to.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget moveTargetPosition() {\n\t\tconst path = this.insertionPosition.path.slice();\n\t\tpath.push( 0 );\n\n\t\treturn new Position( this.insertionPosition.root, path );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n\t * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.splitPosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.splitPosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst split = new this.constructor( this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion );\n\t\tsplit.insertionPosition = this.insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.splitPosition.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MergeOperation( this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.splitPosition.parent;\n\t\tconst offset = this.splitPosition.offset;\n\n\t\t// Validate whether split operation has correct parameters.\n\t\tif ( !element || element.maxOffset < offset ) {\n\t\t\t/**\n\t\t\t * Split position is invalid.\n\t\t\t *\n\t\t\t * @error split-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-position-invalid: Split position is invalid.', this );\n\t\t} else if ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Cannot split root element.\n\t\t\t *\n\t\t\t * @error split-operation-split-in-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-split-in-root: Cannot split root element.', this );\n\t\t} else if ( this.howMany != element.maxOffset - this.splitPosition.offset ) {\n\t\t\t/**\n\t\t\t * Split operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error split-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.', this );\n\t\t} else if ( this.graveyardPosition && !this.graveyardPosition.nodeAfter ) {\n\t\t\t/**\n\t\t\t * Graveyard position invalid.\n\t\t\t *\n\t\t\t * @error split-operation-graveyard-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-graveyard-position-invalid: Graveyard position invalid.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst splitElement = this.splitPosition.parent;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\t_move( Range._createFromPositionAndShift( this.graveyardPosition, 1 ), this.insertionPosition );\n\t\t} else {\n\t\t\tconst newElement = splitElement._clone();\n\n\t\t\t_insert( this.insertionPosition, newElement );\n\t\t}\n\n\t\tconst sourceRange = new Range(\n\t\t\tPosition._createAt( splitElement, this.splitPosition.offset ),\n\t\t\tPosition._createAt( splitElement, splitElement.maxOffset )\n\t\t);\n\n\t\t_move( sourceRange, this.moveTargetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.splitPosition = this.splitPosition.toJSON();\n\t\tjson.insertionPosition = this.insertionPosition.toJSON();\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tjson.graveyardPosition = this.graveyardPosition.toJSON();\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'SplitOperation';\n\t}\n\n\t/**\n\t * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n\t * position is after the split element.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic getInsertionPosition( splitPosition ) {\n\t\tconst path = splitPosition.path.slice( 0, -1 );\n\t\tpath[ path.length - 1 ]++;\n\n\t\treturn new Position( splitPosition.root, path );\n\t}\n\n\t/**\n\t * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst splitPosition = Position.fromJSON( json.splitPosition, document );\n\t\tconst insertionPosition = Position.fromJSON( json.insertionPosition, document );\n\t\tconst graveyardPosition = json.graveyardPosition ? Position.fromJSON( json.graveyardPosition, document ) : null;\n\n\t\tconst split = new this( splitPosition, json.howMany, graveyardPosition, json.baseVersion );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `SplitOperation( ${ this.baseVersion } ): ${ this.splitPosition } ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`( ${ this.howMany } ) -> ${ this.insertionPosition }` +\n\t// @if CK_DEBUG_ENGINE //\t\t`${ this.graveyardPosition ? ' with ' + this.graveyardPosition : '' }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}