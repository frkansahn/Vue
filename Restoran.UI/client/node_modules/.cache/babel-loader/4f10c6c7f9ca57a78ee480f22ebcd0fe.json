{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-utils\\src\\keyboard.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-utils\\src\\keyboard.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CgovKioKICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjAsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kIG9yIGh0dHBzOi8vY2tlZGl0b3IuY29tL2xlZ2FsL2NrZWRpdG9yLW9zcy1saWNlbnNlCiAqLwoKLyoqCiAqIFNldCBvZiB1dGlscyByZWxhdGVkIHRvIGtleWJvYXJkIHN1cHBvcnQuCiAqCiAqIEBtb2R1bGUgdXRpbHMva2V5Ym9hcmQKICovCmltcG9ydCBDS0VkaXRvckVycm9yIGZyb20gJy4vY2tlZGl0b3JlcnJvcic7CmltcG9ydCBlbnYgZnJvbSAnLi9lbnYnOwp2YXIgbWFjR2x5cGhzVG9Nb2RpZmllcnMgPSB7CiAgJ+KMmCc6ICdjdHJsJywKICAn4oenJzogJ3NoaWZ0JywKICAn4oylJzogJ2FsdCcKfTsKdmFyIG1vZGlmaWVyc1RvTWFjR2x5cGhzID0gewogICdjdHJsJzogJ+KMmCcsCiAgJ3NoaWZ0JzogJ+KHpycsCiAgJ2FsdCc6ICfijKUnCn07Ci8qKgogKiBPYmplY3Qgd2l0aCBga2V5TmFtZSA9PiBrZXlDb2RlYCBwYWlycyBmb3IgYSBzZXQgb2Yga25vd24ga2V5cy4KICoKICogQ29udGFpbnM6CiAqCiAqICogYGEtemAsCiAqICogYDAtOWAsCiAqICogYGYxLWYxMmAsCiAqICogYGFycm93KGxlZnR8dXB8cmlnaHR8Ym90dG9tKWAsCiAqICogYGJhY2tzcGFjZWAsIGBkZWxldGVgLCBgZW50ZXJgLCBgZXNjYCwgYHRhYmAsCiAqICogYGN0cmxgLCBgY21kYCwgYHNoaWZ0YCwgYGFsdGAuCiAqLwoKZXhwb3J0IHZhciBrZXlDb2RlcyA9IGdlbmVyYXRlS25vd25LZXlDb2RlcygpOwovKioKICogQ29udmVydHMgYSBrZXkgbmFtZSBvciBhIHtAbGluayBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+S2V5c3Ryb2tlSW5mbyBrZXlzdHJva2UgaW5mb30gaW50byBhIGtleSBjb2RlLgogKgogKiBOb3RlOiBLZXkgbmFtZXMgYXJlIG1hdGNoZWQgd2l0aCB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkfmtleUNvZGVzfSBpbiBhIGNhc2UtaW5zZW5zaXRpdmUgd2F5LgogKgogKiBAcGFyYW0ge1N0cmluZ3xtb2R1bGU6dXRpbHMva2V5Ym9hcmR+S2V5c3Ryb2tlSW5mb30gS2V5IG5hbWUgKHNlZSB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkfmtleUNvZGVzfSkKICogb3IgYSBrZXlzdHJva2UgZGF0YSBvYmplY3QuCiAqIEByZXR1cm5zIHtOdW1iZXJ9IEtleSBvciBrZXlzdHJva2UgY29kZS4KICovCgpleHBvcnQgZnVuY3Rpb24gZ2V0Q29kZShrZXkpIHsKICB2YXIga2V5Q29kZTsKCiAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHsKICAgIGtleUNvZGUgPSBrZXlDb2Rlc1trZXkudG9Mb3dlckNhc2UoKV07CgogICAgaWYgKCFrZXlDb2RlKSB7CiAgICAgIC8qKgogICAgICAgKiBVbmtub3duIGtleSBuYW1lLiBPbmx5IGtleSBuYW1lcyBjb250YWluZWQgYnkgdGhlIHtAbGluayBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+a2V5Q29kZXN9IGNhbiBiZSB1c2VkLgogICAgICAgKgogICAgICAgKiBAZXJycm9yIGtleWJvYXJkLXVua25vd24ta2V5CiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkKICAgICAgICovCiAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCdrZXlib2FyZC11bmtub3duLWtleTogVW5rbm93biBrZXkgbmFtZS4nLCBudWxsLCB7CiAgICAgICAga2V5OiBrZXkKICAgICAgfSk7CiAgICB9CiAgfSBlbHNlIHsKICAgIGtleUNvZGUgPSBrZXkua2V5Q29kZSArIChrZXkuYWx0S2V5ID8ga2V5Q29kZXMuYWx0IDogMCkgKyAoa2V5LmN0cmxLZXkgPyBrZXlDb2Rlcy5jdHJsIDogMCkgKyAoa2V5LnNoaWZ0S2V5ID8ga2V5Q29kZXMuc2hpZnQgOiAwKTsKICB9CgogIHJldHVybiBrZXlDb2RlOwp9Ci8qKgogKiBQYXJzZXMga2V5c3Ryb2tlIGFuZCByZXR1cm5zIGEga2V5c3Ryb2tlIGNvZGUgdGhhdCB3aWxsIG1hdGNoIHRoZSBjb2RlIHJldHVybmVkIGJ5CiAqIGxpbmsge0BsaW5rIG1vZHVsZTp1dGlscy9rZXlib2FyZC5nZXRDb2RlfSBmb3IgYSBjb3JyZXNwb25kaW5nIHtAbGluayBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+S2V5c3Ryb2tlSW5mbyBrZXlzdHJva2UgaW5mb30uCiAqCiAqIFRoZSBrZXlzdHJva2UgY2FuIGJlIHBhc3NlZCBpbiB0d28gZm9ybWF0czoKICoKICogKiBhcyBhIHNpbmdsZSBzdHJpbmcg4oCTIGUuZy4gYGN0cmwgKyBBYCwKICogKiBhcyBhbiBhcnJheSBvZiB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkfmtleUNvZGVzIGtub3duIGtleSBuYW1lc30gYW5kIGtleSBjb2RlcyDigJMgZS5nLjoKICogICAqIGBbICdjdHJsJywgMzIgXWAgKGN0cmwgKyBzcGFjZSksCiAqICAgKiBgWyAnY3RybCcsICdhJyBdYCAoY3RybCArIEEpLgogKgogKiBOb3RlOiBLZXkgbmFtZXMgYXJlIG1hdGNoZWQgd2l0aCB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkfmtleUNvZGVzfSBpbiBhIGNhc2UtaW5zZW5zaXRpdmUgd2F5LgogKgogKiBOb3RlOiBPbmx5IGtleXN0cm9rZXMgd2l0aCBhIHNpbmdsZSBub24tbW9kaWZpZXIga2V5IGFyZSBzdXBwb3J0ZWQgKGUuZy4gYGN0cmwrQWAgaXMgT0ssIGJ1dCBgY3RybCtBK0JgIGlzIG5vdCkuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5LjxOdW1iZXJ8U3RyaW5nPn0ga2V5c3Ryb2tlIEtleXN0cm9rZSBkZWZpbml0aW9uLgogKiBAcmV0dXJucyB7TnVtYmVyfSBLZXlzdHJva2UgY29kZS4KICovCgpleHBvcnQgZnVuY3Rpb24gcGFyc2VLZXlzdHJva2Uoa2V5c3Ryb2tlKSB7CiAgaWYgKHR5cGVvZiBrZXlzdHJva2UgPT0gJ3N0cmluZycpIHsKICAgIGtleXN0cm9rZSA9IHNwbGl0S2V5c3Ryb2tlVGV4dChrZXlzdHJva2UpOwogIH0KCiAgcmV0dXJuIGtleXN0cm9rZS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgcmV0dXJuIHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBnZXRDb2RlKGtleSkgOiBrZXk7CiAgfSkucmVkdWNlKGZ1bmN0aW9uIChrZXksIHN1bSkgewogICAgcmV0dXJuIHN1bSArIGtleTsKICB9LCAwKTsKfQovKioKICogSXQgdHJhbnNsYXRlcyBhbnkga2V5c3Ryb2tlIHN0cmluZyB0ZXh0IGxpa2UgYCJDVFJMK0EiYCB0byBhbgogKiBlbnZpcm9ubWVudOKAk3NwZWNpZmljIGtleXN0cm9rZSwgaS5lLiBgIuKMmEEiYCBvbiBNYWMgT1NYLgogKgogKiBAcGFyYW0ge1N0cmluZ30ga2V5c3Ryb2tlIEtleXN0cm9rZSB0ZXh0LgogKiBAcmV0dXJucyB7U3RyaW5nfSBLZXlzdHJva2UgdGV4dCBzcGVjaWZpYyBmb3IgdGhlIGVudmlyb25tZW50LgogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZXRFbnZLZXlzdHJva2VUZXh0KGtleXN0cm9rZSkgewogIGlmICghZW52LmlzTWFjKSB7CiAgICByZXR1cm4ga2V5c3Ryb2tlOwogIH0KCiAgcmV0dXJuIHNwbGl0S2V5c3Ryb2tlVGV4dChrZXlzdHJva2UpIC8vIFJlcGxhY2UgbW9kaWZpZXJzIChlLmcuICJjdHJsIikgd2l0aCBNYWMgZ2x5cGhzIChlLmcuICLijJgiKSBmaXJzdC4KICAubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgIHJldHVybiBtb2RpZmllcnNUb01hY0dseXBoc1trZXkudG9Mb3dlckNhc2UoKV0gfHwga2V5OwogIH0pIC8vIERlY2lkZSB3aGV0aGVyIHRvIHB1dCAiKyIgYmV0d2VlbiBrZXlzIGluIHRoZSBrZXlzdHJva2Ugb3Igbm90LgogIC5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgIGlmICh2YWx1ZS5zbGljZSgtMSkgaW4gbWFjR2x5cGhzVG9Nb2RpZmllcnMpIHsKICAgICAgcmV0dXJuIHZhbHVlICsga2V5OwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHZhbHVlICsgJysnICsga2V5OwogICAgfQogIH0pOwp9CgpmdW5jdGlvbiBnZW5lcmF0ZUtub3duS2V5Q29kZXMoKSB7CiAgdmFyIGtleUNvZGVzID0gewogICAgYXJyb3dsZWZ0OiAzNywKICAgIGFycm93dXA6IDM4LAogICAgYXJyb3dyaWdodDogMzksCiAgICBhcnJvd2Rvd246IDQwLAogICAgYmFja3NwYWNlOiA4LAogICAgZGVsZXRlOiA0NiwKICAgIGVudGVyOiAxMywKICAgIHNwYWNlOiAzMiwKICAgIGVzYzogMjcsCiAgICB0YWI6IDksCiAgICAvLyBUaGUgaWRlYSBhYm91dCB0aGVzZSBudW1iZXJzIGlzIHRoYXQgdGhleSBkbyBub3QgY29sbGlkZSB3aXRoIGFueSByZWFsIGtleSBjb2Rlcywgc28gd2UgY2FuIHVzZSB0aGVtCiAgICAvLyBsaWtlIGJpdCBtYXNrcy4KICAgIGN0cmw6IDB4MTEwMDAwLAogICAgLy8gSGFzIHRoZSBzYW1lIGNvZGUgYXMgY3RybCwgYmVjYXVzZSB0aGVpciBiZWhhdmlvdXIgc2hvdWxkIGJlIHVuaWZpZWQgYWNyb3NzIHRoZSBlZGl0b3IuCiAgICAvLyBTZWUgaHR0cDovL2NrZWRpdG9yLmdpdGh1Yi5pby9lZGl0b3ItcmVjb21tZW5kYXRpb25zL2dlbmVyYWwtcG9saWNpZXMjY3RybC12cy1jbWQKICAgIGNtZDogMHgxMTAwMDAsCiAgICBzaGlmdDogMHgyMjAwMDAsCiAgICBhbHQ6IDB4NDQwMDAwCiAgfTsgLy8gYS16CgogIGZvciAodmFyIGNvZGUgPSA2NTsgY29kZSA8PSA5MDsgY29kZSsrKSB7CiAgICB2YXIgbGV0dGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTsKICAgIGtleUNvZGVzW2xldHRlci50b0xvd2VyQ2FzZSgpXSA9IGNvZGU7CiAgfSAvLyAwLTkKCgogIGZvciAodmFyIF9jb2RlID0gNDg7IF9jb2RlIDw9IDU3OyBfY29kZSsrKSB7CiAgICBrZXlDb2Rlc1tfY29kZSAtIDQ4XSA9IF9jb2RlOwogIH0gLy8gRjEtRjEyCgoKICBmb3IgKHZhciBfY29kZTIgPSAxMTI7IF9jb2RlMiA8PSAxMjM7IF9jb2RlMisrKSB7CiAgICBrZXlDb2Rlc1snZicgKyAoX2NvZGUyIC0gMTExKV0gPSBfY29kZTI7CiAgfQoKICByZXR1cm4ga2V5Q29kZXM7Cn0KCmZ1bmN0aW9uIHNwbGl0S2V5c3Ryb2tlVGV4dChrZXlzdHJva2UpIHsKICByZXR1cm4ga2V5c3Ryb2tlLnNwbGl0KC9ccypcK1xzKi8pOwp9Ci8qKgogKiBJbmZvcm1hdGlvbiBhYm91dCBhIGtleXN0cm9rZS4KICoKICogQGludGVyZmFjZSBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+S2V5c3Ryb2tlSW5mbwogKi8KCi8qKgogKiBUaGUgW2tleSBjb2RlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlDb2RlKS4KICoKICogQG1lbWJlciB7TnVtYmVyfSBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+S2V5c3Ryb2tlSW5mbyNrZXlDb2RlCiAqLwoKLyoqCiAqIFdoZXRoZXIgdGhlIDxrYmQ+QWx0PC9rYmQ+IG1vZGlmaWVyIHdhcyBwcmVzc2VkLgogKgogKiBAbWVtYmVyIHtCb2xlYW59IG1vZHVsZTp1dGlscy9rZXlib2FyZH5LZXlzdHJva2VJbmZvI2FsdEtleQogKi8KCi8qKgogKiBXaGV0aGVyIHRoZSA8a2JkPkN0cmw8L2tiZD4gb3IgPGtiZD5DbWQ8L2tiZD4gbW9kaWZpZXIgd2FzIHByZXNzZWQuCiAqCiAqIEBtZW1iZXIge0JvbGVhbn0gbW9kdWxlOnV0aWxzL2tleWJvYXJkfktleXN0cm9rZUluZm8jY3RybEtleQogKi8KCi8qKgogKiBXaGV0aGVyIHRoZSA8a2JkPlNoaWZ0PC9rYmQ+IG1vZGlmaWVyIHdhcyBwcmVzc2VkLgogKgogKiBAbWVtYmVyIHtCb2xlYW59IG1vZHVsZTp1dGlscy9rZXlib2FyZH5LZXlzdHJva2VJbmZvI3NoaWZ0S2V5CiAqLw=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"],"names":["CKEditorError","env","macGlyphsToModifiers","modifiersToMacGlyphs","keyCodes","generateKnownKeyCodes","getCode","key","keyCode","toLowerCase","altKey","alt","ctrlKey","ctrl","shiftKey","shift","parseKeystroke","keystroke","splitKeystrokeText","map","reduce","sum","getEnvKeystrokeText","isMac","value","slice","arrowleft","arrowup","arrowright","arrowdown","backspace","delete","enter","space","esc","tab","cmd","code","letter","String","fromCharCode","split"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'keyboard-unknown-key: Unknown key name.',\n\t\t\t\tnull, { key }\n\t\t\t);\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n"]}]}