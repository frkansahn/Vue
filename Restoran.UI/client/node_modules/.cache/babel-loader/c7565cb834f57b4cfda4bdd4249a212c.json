{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\range.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\range.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/range.js"],"names":["Position","TreeWalker","Range","start","end","clone","Symbol","iterator","boundaries","ignoreElementEnd","getLastMatchingPosition","enlargeTrimSkip","direction","parent","is","isAtStart","_createBefore","isAtEnd","_createAfter","isAfter","isEqual","nodeAfterStart","nodeAfter","nodeBeforeEnd","nodeBefore","data","length","otherRange","position","isBefore","loose","isCollapsed","containsStart","containsPosition","containsEnd","ranges","isIntersecting","push","commonRangeStart","commonRangeEnd","options","getCommonAncestor","nextSibling","previousSibling","treeWalker","value","item","nextPosition","type","root","startElement","startOffset","endElement","endOffset","shift","getShiftedBy","element","_createFromParentsAndOffsets","childCount","size","offsetSize","_createFromPositionAndShift"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\n\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at the `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.start = start.clone();\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.end = end ? end.clone() : start.clone();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/view/position~Position positions},\n\t * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n\t * `ignoreElementEnd` option\n\t * set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is it start and end positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n\t * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\treturn this.start.parent === this.end.parent;\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n\t *\t\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Enlarged range.\n\t */\n\tgetEnlarged() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\t// Fix positions, in case if they are in Text node.\n\t\tif ( start.parent.is( 'text' ) && start.isAtStart ) {\n\t\t\tstart = Position._createBefore( start.parent );\n\t\t}\n\n\t\tif ( end.parent.is( 'text' ) && end.isAtEnd ) {\n\t\t\tend = Position._createAfter( end.parent );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n\t *\t\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Shrink range.\n\t */\n\tgetTrimmed() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\tif ( start.isAfter( this.end ) || start.isEqual( this.end ) ) {\n\t\t\treturn new Range( start, start );\n\t\t}\n\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tconst nodeAfterStart = start.nodeAfter;\n\t\tconst nodeBeforeEnd = end.nodeBefore;\n\n\t\t// Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'text' ) ) {\n\t\t\tstart = new Position( nodeAfterStart, 0 );\n\t\t}\n\n\t\tif ( nodeBeforeEnd && nodeBeforeEnd.is( 'text' ) ) {\n\t\t\tend = new Position( nodeBeforeEnd, nodeBeforeEnd.data.length );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Two ranges are equal if their start and end positions are equal.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this == otherRange || ( this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end ) );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n\t *\n\t * @param {module:engine/view/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\n\t * `false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n\t * otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n\t * {@link module:engine/view/range~Range range}.\n\t * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n\t *\t\t\tview.createPositionAt( foo, 1 ),\n\t *\t\t\tview.createPositionAt( bar, 2 )\n\t *\t\t);\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( this.clone() );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n\t *\t\ttransformed = range.getIntersection( otherRange ); // null - no common part.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @param {module:engine/view/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t * @returns {module:engine/view/treewalker~TreeWalker}\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/view/element~Element Element} contained by the range.\n\t * The element will be returned when it is the **only** node within the range and **fully–contained**\n\t * at the same time.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetContainedElement() {\n\t\tif ( this.isCollapsed ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet nodeAfterStart = this.start.nodeAfter;\n\t\tlet nodeBeforeEnd = this.end.nodeBefore;\n\n\t\t// Handle the situation when the range position is at the beginning / at the end of a text node.\n\t\t// In such situation `.nodeAfter` and `.nodeBefore` are `null` but the range still might be spanning\n\t\t// over one element.\n\t\t//\n\t\t// <p>Foo{<span class=\"widget\"></span>}bar</p> vs <p>Foo[<span class=\"widget\"></span>]bar</p>\n\t\t//\n\t\t// These are basically the same range, only the difference is if the range position is at\n\t\t// at the end/at the beginning of a text node or just before/just after the text node.\n\t\t//\n\t\tif ( this.start.parent.is( 'text' ) && this.start.isAtEnd && this.start.parent.nextSibling ) {\n\t\t\tnodeAfterStart = this.start.parent.nextSibling;\n\t\t}\n\n\t\tif ( this.end.parent.is( 'text' ) && this.end.isAtStart && this.end.parent.previousSibling ) {\n\t\t\tnodeBeforeEnd = this.end.parent.previousSibling;\n\t\t}\n\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'element' ) && nodeAfterStart === nodeBeforeEnd ) {\n\t\t\treturn nodeAfterStart;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Clones this range.\n\t *\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tclone() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n\t * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'view:range' ); // -> true\n\t *\n\t *\t\trange.is( 'model:range' ); // -> false\n\t *\t\trange.is( 'element' ); // -> false\n\t *\t\trange.is( 'selection' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'range' || type == 'view:range';\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with the given range.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} True if ranges intersect.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Creates a range from the given parents and offsets.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} startElement Start position\n\t * parent element.\n\t * @param {Number} startOffset Start position offset.\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} endElement End position\n\t * parent element.\n\t * @param {Number} endOffset End position offset.\n\t * @returns {module:engine/view/range~Range} Created range.\n\t */\n\tstatic _createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\n\t\treturn new this(\n\t\t\tnew Position( startElement, startOffset ),\n\t\t\tnew Position( endElement, endOffset )\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/view/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn this._createFromParentsAndOffsets( element, 0, element, element.childCount );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\tconst size = item.is( 'textProxy' ) ? item.offsetSize : 1;\n\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), size );\n\t}\n}\n\n// Function used by getEnlarged and getTrimmed methods.\nfunction enlargeTrimSkip( value ) {\n\tif ( value.item.is( 'attributeElement' ) || value.item.is( 'uiElement' ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"]}]}