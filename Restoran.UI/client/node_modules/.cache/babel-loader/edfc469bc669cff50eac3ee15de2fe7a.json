{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\utils\\selection-post-fixer.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\utils\\selection-post-fixer.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js"],"names":["Range","Position","injectSelectionPostFixer","model","document","registerPostFixer","writer","selectionPostFixer","selection","schema","ranges","wasFixed","getRanges","modelRange","correctedRange","tryFixingRange","push","setSelection","mergeIntersectingRanges","backward","isBackward","range","isCollapsed","tryFixingCollapsedRange","tryFixingNonCollapsedRage","originalPosition","start","nearestSelectionRange","getNearestSelectionRange","fixedPosition","isEqual","end","isTextAllowedOnStart","checkChild","isTextAllowedOnEnd","startLimitElement","getLimitElement","endLimitElement","checkSelectionOnNonLimitElements","isStartObject","nodeAfter","isObject","fixedStart","isEndObject","nodeBefore","fixedEnd","rangeStart","rangeEnd","isStartInLimit","is","isEndInLimit","bothInSameParent","parent","expandStart","isInObject","expandEnd","_createBefore","findOutermostLimitAncestor","_createAfter","startingNode","isLimitNode","isLimit","startIsOnBlock","endIsOnBlock","nonIntersectingRanges","shift","previousRange","pop","isIntersecting","isAfter","merged","node"],"mappings":";;;;;;;AAAA;;;;;AAKA;;;AAIA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,OAAO,SAASC,wBAAT,CAAmCC,KAAnC,EAA2C;AACjDA,EAAAA,KAAK,CAACC,QAAN,CAAeC,iBAAf,CAAkC,UAAAC,MAAM;AAAA,WAAIC,kBAAkB,CAAED,MAAF,EAAUH,KAAV,CAAtB;AAAA,GAAxC;AACA,C,CAED;AACA;AACA;AACA;;AACA,SAASI,kBAAT,CAA6BD,MAA7B,EAAqCH,KAArC,EAA6C;AAC5C,MAAMK,SAAS,GAAGL,KAAK,CAACC,QAAN,CAAeI,SAAjC;AACA,MAAMC,MAAM,GAAGN,KAAK,CAACM,MAArB;AAEA,MAAMC,MAAM,GAAG,EAAf;AAEA,MAAIC,QAAQ,GAAG,KAAf;AAN4C;AAAA;AAAA;;AAAA;AAQ5C,yBAA0BH,SAAS,CAACI,SAAV,EAA1B,8HAAkD;AAAA,UAAtCC,UAAsC;AACjD;AACA;AACA,UAAMC,cAAc,GAAGC,cAAc,CAAEF,UAAF,EAAcJ,MAAd,CAArC;;AAEA,UAAKK,cAAL,EAAsB;AACrBJ,QAAAA,MAAM,CAACM,IAAP,CAAaF,cAAb;AACAH,QAAAA,QAAQ,GAAG,IAAX;AACA,OAHD,MAGO;AACND,QAAAA,MAAM,CAACM,IAAP,CAAaH,UAAb;AACA;AACD,KAnB2C,CAqB5C;;AArB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsB5C,MAAKF,QAAL,EAAgB;AACfL,IAAAA,MAAM,CAACW,YAAP,CAAqBC,uBAAuB,CAAER,MAAF,CAA5C,EAAwD;AAAES,MAAAA,QAAQ,EAAEX,SAAS,CAACY;AAAtB,KAAxD;AACA;AACD,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASL,cAAT,CAAyBM,KAAzB,EAAgCZ,MAAhC,EAAyC;AACxC,MAAKY,KAAK,CAACC,WAAX,EAAyB;AACxB,WAAOC,uBAAuB,CAAEF,KAAF,EAASZ,MAAT,CAA9B;AACA;;AAED,SAAOe,yBAAyB,CAAEH,KAAF,EAASZ,MAAT,CAAhC;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,uBAAT,CAAkCF,KAAlC,EAAyCZ,MAAzC,EAAkD;AACjD,MAAMgB,gBAAgB,GAAGJ,KAAK,CAACK,KAA/B;AAEA,MAAMC,qBAAqB,GAAGlB,MAAM,CAACmB,wBAAP,CAAiCH,gBAAjC,CAA9B,CAHiD,CAKjD;AACA;;AACA,MAAK,CAACE,qBAAN,EAA8B;AAC7B,WAAO,IAAP;AACA;;AAED,MAAK,CAACA,qBAAqB,CAACL,WAA5B,EAA0C;AACzC,WAAOK,qBAAP;AACA;;AAED,MAAME,aAAa,GAAGF,qBAAqB,CAACD,KAA5C,CAfiD,CAiBjD;;AACA,MAAKD,gBAAgB,CAACK,OAAjB,CAA0BD,aAA1B,CAAL,EAAiD;AAChD,WAAO,IAAP;AACA;;AAED,SAAO,IAAI7B,KAAJ,CAAW6B,aAAX,CAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASL,yBAAT,CAAoCH,KAApC,EAA2CZ,MAA3C,EAAoD;AACnD,MAAMiB,KAAK,GAAGL,KAAK,CAACK,KAApB;AACA,MAAMK,GAAG,GAAGV,KAAK,CAACU,GAAlB;AAEA,MAAMC,oBAAoB,GAAGvB,MAAM,CAACwB,UAAP,CAAmBP,KAAnB,EAA0B,OAA1B,CAA7B;AACA,MAAMQ,kBAAkB,GAAGzB,MAAM,CAACwB,UAAP,CAAmBF,GAAnB,EAAwB,OAAxB,CAA3B;AAEA,MAAMI,iBAAiB,GAAG1B,MAAM,CAAC2B,eAAP,CAAwBV,KAAxB,CAA1B;AACA,MAAMW,eAAe,GAAG5B,MAAM,CAAC2B,eAAP,CAAwBL,GAAxB,CAAxB,CARmD,CAUnD;;AACA,MAAKI,iBAAiB,KAAKE,eAA3B,EAA6C;AAC5C;AACA;AACA;AACA,QAAKL,oBAAoB,IAAIE,kBAA7B,EAAkD;AACjD,aAAO,IAAP;AACA,KAN2C,CAQ5C;AACA;AACA;AACA;AACA;;;AACA,QAAKI,gCAAgC,CAAEZ,KAAF,EAASK,GAAT,EAActB,MAAd,CAArC,EAA8D;AAC7D,UAAM8B,aAAa,GAAGb,KAAK,CAACc,SAAN,IAAmB/B,MAAM,CAACgC,QAAP,CAAiBf,KAAK,CAACc,SAAvB,CAAzC;AACA,UAAME,UAAU,GAAGH,aAAa,GAAG,IAAH,GAAU9B,MAAM,CAACmB,wBAAP,CAAiCF,KAAjC,EAAwC,SAAxC,CAA1C;AAEA,UAAMiB,WAAW,GAAGZ,GAAG,CAACa,UAAJ,IAAkBnC,MAAM,CAACgC,QAAP,CAAiBV,GAAG,CAACa,UAArB,CAAtC;AACA,UAAMC,QAAQ,GAAGF,WAAW,GAAG,IAAH,GAAUlC,MAAM,CAACmB,wBAAP,CAAiCG,GAAjC,EAAsC,UAAtC,CAAtC,CAL6D,CAO7D;;AACA,UAAMe,UAAU,GAAGJ,UAAU,GAAGA,UAAU,CAAChB,KAAd,GAAsBA,KAAnD;AACA,UAAMqB,QAAQ,GAAGF,QAAQ,GAAGA,QAAQ,CAACnB,KAAZ,GAAoBK,GAA7C;AAEA,aAAO,IAAI/B,KAAJ,CAAW8C,UAAX,EAAuBC,QAAvB,CAAP;AACA;AACD;;AAED,MAAMC,cAAc,GAAGb,iBAAiB,IAAI,CAACA,iBAAiB,CAACc,EAAlB,CAAsB,aAAtB,CAA7C;AACA,MAAMC,YAAY,GAAGb,eAAe,IAAI,CAACA,eAAe,CAACY,EAAhB,CAAoB,aAApB,CAAzC,CAxCmD,CA0CnD;AACA;;AACA,MAAKD,cAAc,IAAIE,YAAvB,EAAsC;AACrC,QAAMC,gBAAgB,GAAKzB,KAAK,CAACc,SAAN,IAAmBT,GAAG,CAACa,UAAzB,IAAyClB,KAAK,CAACc,SAAN,CAAgBY,MAAhB,KAA2BrB,GAAG,CAACa,UAAJ,CAAeQ,MAA5G;AAEA,QAAMC,WAAW,GAAGL,cAAc,KAAM,CAACG,gBAAD,IAAqB,CAACG,UAAU,CAAE5B,KAAK,CAACc,SAAR,EAAmB/B,MAAnB,CAAtC,CAAlC;AACA,QAAM8C,SAAS,GAAGL,YAAY,KAAM,CAACC,gBAAD,IAAqB,CAACG,UAAU,CAAEvB,GAAG,CAACa,UAAN,EAAkBnC,MAAlB,CAAtC,CAA9B,CAJqC,CAMrC;AACA;;AACA,QAAIiC,WAAU,GAAGhB,KAAjB;AACA,QAAImB,SAAQ,GAAGd,GAAf;;AAEA,QAAKsB,WAAL,EAAmB;AAClBX,MAAAA,WAAU,GAAGzC,QAAQ,CAACuD,aAAT,CAAwBC,0BAA0B,CAAEtB,iBAAF,EAAqB1B,MAArB,CAAlD,CAAb;AACA;;AAED,QAAK8C,SAAL,EAAiB;AAChBV,MAAAA,SAAQ,GAAG5C,QAAQ,CAACyD,YAAT,CAAuBD,0BAA0B,CAAEpB,eAAF,EAAmB5B,MAAnB,CAAjD,CAAX;AACA;;AAED,WAAO,IAAIT,KAAJ,CAAW0C,WAAX,EAAuBG,SAAvB,CAAP;AACA,GAhEkD,CAkEnD;;;AACA,SAAO,IAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,0BAAT,CAAqCE,YAArC,EAAmDlD,MAAnD,EAA4D;AAC3D,MAAImD,WAAW,GAAGD,YAAlB;AACA,MAAIP,MAAM,GAAGQ,WAAb,CAF2D,CAI3D;;AACA,SAAQnD,MAAM,CAACoD,OAAP,CAAgBT,MAAhB,KAA4BA,MAAM,CAACA,MAA3C,EAAoD;AACnDQ,IAAAA,WAAW,GAAGR,MAAd;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACA;;AAED,SAAOQ,WAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAStB,gCAAT,CAA2CZ,KAA3C,EAAkDK,GAAlD,EAAuDtB,MAAvD,EAAgE;AAC/D,MAAMqD,cAAc,GAAKpC,KAAK,CAACc,SAAN,IAAmB,CAAC/B,MAAM,CAACoD,OAAP,CAAgBnC,KAAK,CAACc,SAAtB,CAAtB,IAA6D/B,MAAM,CAACwB,UAAP,CAAmBP,KAAnB,EAA0B,OAA1B,CAApF;AACA,MAAMqC,YAAY,GAAKhC,GAAG,CAACa,UAAJ,IAAkB,CAACnC,MAAM,CAACoD,OAAP,CAAgB9B,GAAG,CAACa,UAApB,CAArB,IAA2DnC,MAAM,CAACwB,UAAP,CAAmBF,GAAnB,EAAwB,OAAxB,CAAhF,CAF+D,CAI/D;;AACA,SAAO+B,cAAc,IAAIC,YAAzB;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAAS7C,uBAAT,CAAkCR,MAAlC,EAA2C;AAC1C,MAAMsD,qBAAqB,GAAG,EAA9B,CAD0C,CAG1C;;AACAA,EAAAA,qBAAqB,CAAChD,IAAtB,CAA4BN,MAAM,CAACuD,KAAP,EAA5B;AAJ0C;AAAA;AAAA;;AAAA;AAM1C,0BAAqBvD,MAArB,mIAA8B;AAAA,UAAlBW,KAAkB;AAC7B,UAAM6C,aAAa,GAAGF,qBAAqB,CAACG,GAAtB,EAAtB;;AAEA,UAAK9C,KAAK,CAAC+C,cAAN,CAAsBF,aAAtB,CAAL,EAA6C;AAC5C;AACA,YAAMxC,KAAK,GAAGwC,aAAa,CAACxC,KAAd,CAAoB2C,OAApB,CAA6BhD,KAAK,CAACK,KAAnC,IAA6CL,KAAK,CAACK,KAAnD,GAA2DwC,aAAa,CAACxC,KAAvF;AACA,YAAMK,GAAG,GAAGmC,aAAa,CAACnC,GAAd,CAAkBsC,OAAlB,CAA2BhD,KAAK,CAACU,GAAjC,IAAyCmC,aAAa,CAACnC,GAAvD,GAA6DV,KAAK,CAACU,GAA/E;AAEA,YAAMuC,MAAM,GAAG,IAAItE,KAAJ,CAAW0B,KAAX,EAAkBK,GAAlB,CAAf;AACAiC,QAAAA,qBAAqB,CAAChD,IAAtB,CAA4BsD,MAA5B;AACA,OAPD,MAOO;AACNN,QAAAA,qBAAqB,CAAChD,IAAtB,CAA4BkD,aAA5B;AACAF,QAAAA,qBAAqB,CAAChD,IAAtB,CAA4BK,KAA5B;AACA;AACD;AApByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsB1C,SAAO2C,qBAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASV,UAAT,CAAqBiB,IAArB,EAA2B9D,MAA3B,EAAoC;AACnC,SAAO8D,IAAI,IAAI9D,MAAM,CAACgC,QAAP,CAAiB8B,IAAjB,CAAf;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport function injectSelectionPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => selectionPostFixer( writer, model ) );\n}\n\n// The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction selectionPostFixer( writer, model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\n\tconst ranges = [];\n\n\tlet wasFixed = false;\n\n\tfor ( const modelRange of selection.getRanges() ) {\n\t\t// Go through all ranges in selection and try fixing each of them.\n\t\t// Those ranges might overlap but will be corrected later.\n\t\tconst correctedRange = tryFixingRange( modelRange, schema );\n\n\t\tif ( correctedRange ) {\n\t\t\tranges.push( correctedRange );\n\t\t\twasFixed = true;\n\t\t} else {\n\t\t\tranges.push( modelRange );\n\t\t}\n\t}\n\n\t// If any of ranges were corrected update the selection.\n\tif ( wasFixed ) {\n\t\twriter.setSelection( mergeIntersectingRanges( ranges ), { backward: selection.isBackward } );\n\t}\n}\n\n// Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingRange( range, schema ) {\n\tif ( range.isCollapsed ) {\n\t\treturn tryFixingCollapsedRange( range, schema );\n\t}\n\n\treturn tryFixingNonCollapsedRage( range, schema );\n}\n\n// Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingCollapsedRange( range, schema ) {\n\tconst originalPosition = range.start;\n\n\tconst nearestSelectionRange = schema.getNearestSelectionRange( originalPosition );\n\n\t// This might be null ie when editor data is empty.\n\t// In such cases there is no need to fix the selection range.\n\tif ( !nearestSelectionRange ) {\n\t\treturn null;\n\t}\n\n\tif ( !nearestSelectionRange.isCollapsed ) {\n\t\treturn nearestSelectionRange;\n\t}\n\n\tconst fixedPosition = nearestSelectionRange.start;\n\n\t// Fixed position is the same as original - no need to return corrected range.\n\tif ( originalPosition.isEqual( fixedPosition ) ) {\n\t\treturn null;\n\t}\n\n\treturn new Range( fixedPosition );\n}\n\n// Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingNonCollapsedRage( range, schema ) {\n\tconst start = range.start;\n\tconst end = range.end;\n\n\tconst isTextAllowedOnStart = schema.checkChild( start, '$text' );\n\tconst isTextAllowedOnEnd = schema.checkChild( end, '$text' );\n\n\tconst startLimitElement = schema.getLimitElement( start );\n\tconst endLimitElement = schema.getLimitElement( end );\n\n\t// Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\tif ( startLimitElement === endLimitElement ) {\n\t\t// Range is valid when both position allows to place a text:\n\t\t// - <block>f[oobarba]z</block>\n\t\t// This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n\t\tif ( isTextAllowedOnStart && isTextAllowedOnEnd ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n\t\t// - [<block>foo</block>]    ->    <block>[foo]</block>\n\t\t// - [<block>foo]</block>    ->    <block>[foo]</block>\n\t\t// - <block>f[oo</block>]    ->    <block>f[oo]</block>\n\t\t// - [<block>foo</block><object></object>]    ->    <block>[foo</block><object></object>]\n\t\tif ( checkSelectionOnNonLimitElements( start, end, schema ) ) {\n\t\t\tconst isStartObject = start.nodeAfter && schema.isObject( start.nodeAfter );\n\t\t\tconst fixedStart = isStartObject ? null : schema.getNearestSelectionRange( start, 'forward' );\n\n\t\t\tconst isEndObject = end.nodeBefore && schema.isObject( end.nodeBefore );\n\t\t\tconst fixedEnd = isEndObject ? null : schema.getNearestSelectionRange( end, 'backward' );\n\n\t\t\t// The schema.getNearestSelectionRange might return null - if that happens use original position.\n\t\t\tconst rangeStart = fixedStart ? fixedStart.start : start;\n\t\t\tconst rangeEnd = fixedEnd ? fixedEnd.start : end;\n\n\t\t\treturn new Range( rangeStart, rangeEnd );\n\t\t}\n\t}\n\n\tconst isStartInLimit = startLimitElement && !startLimitElement.is( 'rootElement' );\n\tconst isEndInLimit = endLimitElement && !endLimitElement.is( 'rootElement' );\n\n\t// At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n\t// then the range crossed limit element boundaries and needs to be fixed.\n\tif ( isStartInLimit || isEndInLimit ) {\n\t\tconst bothInSameParent = ( start.nodeAfter && end.nodeBefore ) && start.nodeAfter.parent === end.nodeBefore.parent;\n\n\t\tconst expandStart = isStartInLimit && ( !bothInSameParent || !isInObject( start.nodeAfter, schema ) );\n\t\tconst expandEnd = isEndInLimit && ( !bothInSameParent || !isInObject( end.nodeBefore, schema ) );\n\n\t\t// Although we've already found limit element on start/end positions we must find the outer-most limit element.\n\t\t// as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\t\tlet fixedStart = start;\n\t\tlet fixedEnd = end;\n\n\t\tif ( expandStart ) {\n\t\t\tfixedStart = Position._createBefore( findOutermostLimitAncestor( startLimitElement, schema ) );\n\t\t}\n\n\t\tif ( expandEnd ) {\n\t\t\tfixedEnd = Position._createAfter( findOutermostLimitAncestor( endLimitElement, schema ) );\n\t\t}\n\n\t\treturn new Range( fixedStart, fixedEnd );\n\t}\n\n\t// Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\treturn null;\n}\n\n// Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\nfunction findOutermostLimitAncestor( startingNode, schema ) {\n\tlet isLimitNode = startingNode;\n\tlet parent = isLimitNode;\n\n\t// Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\twhile ( schema.isLimit( parent ) && parent.parent ) {\n\t\tisLimitNode = parent;\n\t\tparent = parent.parent;\n\t}\n\n\treturn isLimitNode;\n}\n\n// Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction checkSelectionOnNonLimitElements( start, end, schema ) {\n\tconst startIsOnBlock = ( start.nodeAfter && !schema.isLimit( start.nodeAfter ) ) || schema.checkChild( start, '$text' );\n\tconst endIsOnBlock = ( end.nodeBefore && !schema.isLimit( end.nodeBefore ) ) || schema.checkChild( end, '$text' );\n\n\t// We should fix such selection when one of those nodes needs fixing.\n\treturn startIsOnBlock || endIsOnBlock;\n}\n\n// Returns a minimal non-intersecting array of ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges\n// @returns {Array.<module:engine/model/range~Range>}\nfunction mergeIntersectingRanges( ranges ) {\n\tconst nonIntersectingRanges = [];\n\n\t// First range will always be fine.\n\tnonIntersectingRanges.push( ranges.shift() );\n\n\tfor ( const range of ranges ) {\n\t\tconst previousRange = nonIntersectingRanges.pop();\n\n\t\tif ( range.isIntersecting( previousRange ) ) {\n\t\t\t// Get the sum of two ranges.\n\t\t\tconst start = previousRange.start.isAfter( range.start ) ? range.start : previousRange.start;\n\t\t\tconst end = previousRange.end.isAfter( range.end ) ? previousRange.end : range.end;\n\n\t\t\tconst merged = new Range( start, end );\n\t\t\tnonIntersectingRanges.push( merged );\n\t\t} else {\n\t\t\tnonIntersectingRanges.push( previousRange );\n\t\t\tnonIntersectingRanges.push( range );\n\t\t}\n\t}\n\n\treturn nonIntersectingRanges;\n}\n\n// Checks if node exists and if it's an object.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isInObject( node, schema ) {\n\treturn node && schema.isObject( node );\n}\n"]}]}