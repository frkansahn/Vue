{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\operation\\insertoperation.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\model\\operation\\insertoperation.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"],"names":["Operation","Position","NodeList","MoveOperation","_insert","_normalizeNodes","Text","Element","CKEditorError","InsertOperation","position","nodes","baseVersion","clone","stickiness","shouldReceiveAttributes","map","node","_clone","insert","graveyard","root","document","gyPosition","maxOffset","targetElement","parent","offset","originalNodes","json","toJSON","children","child","name","push","fromJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid: Insertion position is invalid.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \tconst nodeString = this.nodes.length > 1 ? `[ ${ this.nodes.length } ]` : this.nodes.getNode( 0 );\n\n\t// @if CK_DEBUG_ENGINE //\treturn `InsertOperation( ${ this.baseVersion } ): ${ nodeString } -> ${ this.position }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}