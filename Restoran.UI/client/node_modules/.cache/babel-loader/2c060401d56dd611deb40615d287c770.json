{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-typing\\src\\utils\\changebuffer.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-typing\\src\\utils\\changebuffer.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSB0eXBpbmcvdXRpbHMvY2hhbmdlYnVmZmVyCiAqLwoKLyoqCiAqIENoYW5nZSBidWZmZXIgYWxsb3dzIHRvIGdyb3VwIGF0b21pYyBjaGFuZ2VzIChsaWtlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGJlZW4gdHlwZWQpIGludG8KICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvYmF0Y2h+QmF0Y2ggYmF0Y2hlc30uCiAqCiAqIEJhdGNoZXMgcmVwcmVzZW50IHNpbmdsZSB1bmRvIHN0ZXBzLCBoZW5jZSBjaGFuZ2VzIGFkZGVkIHRvIG9uZSBzaW5nbGUgYmF0Y2ggYXJlIHVuZG9uZSB0b2dldGhlci4KICoKICogVGhlIGJ1ZmZlciBoYXMgYSBjb25maWd1cmFibGUgbGltaXQgb2YgYXRvbWljIGNoYW5nZXMgdGhhdCBpdCBjYW4gYWNjb21tb2RhdGUuIEFmdGVyIHRoZSBsaW1pdCB3YXMKICogZXhjZWVkZWQgKHNlZSB7QGxpbmsgfkNoYW5nZUJ1ZmZlciNpbnB1dH0pLCBhIG5ldyBiYXRjaCBpcyBjcmVhdGVkIGluIHtAbGluayB+Q2hhbmdlQnVmZmVyI2JhdGNofS4KICoKICogVG8gdXNlIHRoZSBjaGFuZ2UgYnVmZmVyIHlvdSBuZWVkIHRvIGxldCBpdCBrbm93IGFib3V0IHRoZSBudW1iZXIgb2YgY2hhbmdlcyB0aGF0IHdlcmUgYWRkZWQgdG8gdGhlIGJhdGNoOgogKgogKgkJY29uc3QgYnVmZmVyID0gbmV3IENoYW5nZUJ1ZmZlciggbW9kZWwsIExJTUlUICk7CiAqCiAqCQkvLyBMYXRlciBvbiBpbiB5b3VyIGZlYXR1cmU6CiAqCQlidWZmZXIuYmF0Y2guaW5zZXJ0KCBwb3MsIGluc2VydGVkQ2hhcmFjdGVycyApOwogKgkJYnVmZmVyLmlucHV0KCBpbnNlcnRlZENoYXJhY3RlcnMubGVuZ3RoICk7CiAqCiAqLwp2YXIgQ2hhbmdlQnVmZmVyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgY2hhbmdlIGJ1ZmZlci4KICAgKgogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9tb2RlbH5Nb2RlbH0gbW9kZWwKICAgKiBAcGFyYW0ge051bWJlcn0gW2xpbWl0PTIwXSBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXRvbWljIGNoYW5nZXMgd2hpY2ggY2FuIGJlIGNvbnRhaW5lZCBpbiBvbmUgYmF0Y2guCiAgICovCiAgZnVuY3Rpb24gQ2hhbmdlQnVmZmVyKG1vZGVsKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHZhciBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMjA7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENoYW5nZUJ1ZmZlcik7CgogICAgLyoqCiAgICAgKiBUaGUgbW9kZWwgaW5zdGFuY2UuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsfSAjbW9kZWwKICAgICAqLwogICAgdGhpcy5tb2RlbCA9IG1vZGVsOwogICAgLyoqCiAgICAgKiBUaGUgbnVtYmVyIG9mIGF0b21pYyBjaGFuZ2VzIGluIHRoZSBidWZmZXIuIE9uY2UgaXQgZXhjZWVkcyB0aGUge0BsaW5rICNsaW1pdH0sCiAgICAgKiB0aGUge0BsaW5rICNiYXRjaCBiYXRjaH0gaXMgc2V0IHRvIGEgbmV3IG9uZS4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge051bWJlcn0gI3NpemUKICAgICAqLwoKICAgIHRoaXMuc2l6ZSA9IDA7CiAgICAvKioKICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhdG9taWMgY2hhbmdlcyB3aGljaCBjYW4gYmUgY29udGFpbmVkIGluIG9uZSBiYXRjaC4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge051bWJlcn0gI2xpbWl0CiAgICAgKi8KCiAgICB0aGlzLmxpbWl0ID0gbGltaXQ7CiAgICAvKioKICAgICAqIFdoZXRoZXIgdGhlIGJ1ZmZlciBpcyBsb2NrZWQuIEEgbG9ja2VkIGJ1ZmZlciBjYW5ub3QgYmUgcmVzZXQgdW5sZXNzIGl0IGdldHMgdW5sb2NrZWQuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSAjaXNMb2NrZWQKICAgICAqLwoKICAgIHRoaXMuaXNMb2NrZWQgPSBmYWxzZTsgLy8gVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBpbiBvcmRlciB0byBub3RpZnkgdGhlIGJ1ZmZlciBhYm91dCBiYXRjaGVzIHdoaWNoIGFwcGVhcmVkIGluIHRoZSBkb2N1bWVudC4KICAgIC8vIFRoZSBjYWxsYmFjayB3aWxsIGNoZWNrIHdoZXRoZXIgaXQgaXMgYSBuZXcgYmF0Y2ggYW5kIGluIHRoYXQgY2FzZSB0aGUgYnVmZmVyIHdpbGwgYmUgZmx1c2hlZC4KICAgIC8vCiAgICAvLyBUaGUgcmVhc29uIHdoeSB0aGUgYnVmZmVyIG5lZWRzIHRvIGJlIGZsdXNoZWQgd2hlbmV2ZXIgYSBuZXcgYmF0Y2ggYXBwZWFycyBpcyB0aGF0IHRoZSBjaGFuZ2VzIGFkZGVkIGFmdGVyd2FyZHMKICAgIC8vIHNob3VsZCBiZSBhZGRlZCB0byBhIG5ldyBiYXRjaC4gRm9yIGluc3RhbmNlLCB3aGVuIHRoZSAgdXNlciB0eXBlcywgdGhlbiBpbnNlcnRzIGFuIGltYWdlLCBhbmQgdGhlbiB0eXBlcyBhZ2FpbiwKICAgIC8vIHRoZSBjaGFyYWN0ZXJzIHR5cGVkIGFmdGVyIGluc2VydGluZyB0aGUgaW1hZ2Ugc2hvdWxkIGJlIGFkZGVkIHRvIGEgZGlmZmVyZW50IGJhdGNoIHRoYW4gdGhlIGNoYXJhY3RlcnMgdHlwZWQgYmVmb3JlLgoKICAgIHRoaXMuX2NoYW5nZUNhbGxiYWNrID0gZnVuY3Rpb24gKGV2dCwgYmF0Y2gpIHsKICAgICAgaWYgKGJhdGNoLnR5cGUgIT0gJ3RyYW5zcGFyZW50JyAmJiBiYXRjaCAhPT0gX3RoaXMuX2JhdGNoKSB7CiAgICAgICAgX3RoaXMuX3Jlc2V0KHRydWUpOwogICAgICB9CiAgICB9OwoKICAgIHRoaXMuX3NlbGVjdGlvbkNoYW5nZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5fcmVzZXQoKTsKICAgIH07CgogICAgdGhpcy5tb2RlbC5kb2N1bWVudC5vbignY2hhbmdlJywgdGhpcy5fY2hhbmdlQ2FsbGJhY2spOwogICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24ub24oJ2NoYW5nZTpyYW5nZScsIHRoaXMuX3NlbGVjdGlvbkNoYW5nZUNhbGxiYWNrKTsKICAgIHRoaXMubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uLm9uKCdjaGFuZ2U6YXR0cmlidXRlJywgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2spOwogICAgLyoqCiAgICAgKiBUaGUgY3VycmVudCBiYXRjaCBpbnN0YW5jZS4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQG1lbWJlciAjX2JhdGNoCiAgICAgKi8KCiAgICAvKioKICAgICAqIFRoZSBjYWxsYmFjayB0byBkb2N1bWVudCB0aGUgY2hhbmdlIGV2ZW50IHdoaWNoIGxhdGVyIG5lZWRzIHRvIGJlIHJlbW92ZWQuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIgI19jaGFuZ2VDYWxsYmFjawogICAgICovCgogICAgLyoqCiAgICAgKiBUaGUgY2FsbGJhY2sgdG8gZG9jdW1lbnQgc2VsZWN0aW9uIGBjaGFuZ2U6YXR0cmlidXRlYCBhbmQgYGNoYW5nZTpyYW5nZWAgZXZlbnRzIHdoaWNoIHJlc2V0cyB0aGUgYnVmZmVyLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyICNfc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2sKICAgICAqLwogIH0KICAvKioKICAgKiBUaGUgY3VycmVudCBiYXRjaCB0byB3aGljaCBhIGZlYXR1cmUgc2hvdWxkIGFkZCBpdHMgb3BlcmF0aW9ucy4gT25jZSB0aGUge0BsaW5rICNzaXplfQogICAqIGlzIHJlYWNoZWQgb3IgZXhjZWVkcyB0aGUge0BsaW5rICNsaW1pdH0sIHRoZSBiYXRjaCBpcyBzZXQgdG8gYSBuZXcgaW5zdGFuY2UgYW5kIHRoZSBzaXplIGlzIHJlc2V0LgogICAqCiAgICogQHR5cGUge21vZHVsZTplbmdpbmUvbW9kZWwvYmF0Y2h+QmF0Y2h9CiAgICovCgoKICBfY3JlYXRlQ2xhc3MoQ2hhbmdlQnVmZmVyLCBbewogICAga2V5OiAiaW5wdXQiLAoKICAgIC8qKgogICAgICogVGhlIGlucHV0IG51bWJlciBvZiBjaGFuZ2VzIGludG8gdGhlIGJ1ZmZlci4gT25jZSB0aGUge0BsaW5rICNzaXplfSBpcwogICAgICogcmVhY2hlZCBvciBleGNlZWRzIHRoZSB7QGxpbmsgI2xpbWl0fSwgdGhlIGJhdGNoIGlzIHNldCB0byBhIG5ldyBpbnN0YW5jZSBhbmQgdGhlIHNpemUgaXMgcmVzZXQuCiAgICAgKgogICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZUNvdW50IFRoZSBudW1iZXIgb2YgYXRvbWljIGNoYW5nZXMgdG8gaW5wdXQuCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBpbnB1dChjaGFuZ2VDb3VudCkgewogICAgICB0aGlzLnNpemUgKz0gY2hhbmdlQ291bnQ7CgogICAgICBpZiAodGhpcy5zaXplID49IHRoaXMubGltaXQpIHsKICAgICAgICB0aGlzLl9yZXNldCh0cnVlKTsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBMb2NrcyB0aGUgYnVmZmVyLgogICAgICovCgogIH0sIHsKICAgIGtleTogImxvY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvY2soKSB7CiAgICAgIHRoaXMuaXNMb2NrZWQgPSB0cnVlOwogICAgfQogICAgLyoqCiAgICAgKiBVbmxvY2tzIHRoZSBidWZmZXIuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidW5sb2NrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1bmxvY2soKSB7CiAgICAgIHRoaXMuaXNMb2NrZWQgPSBmYWxzZTsKICAgIH0KICAgIC8qKgogICAgICogRGVzdHJveXMgdGhlIGJ1ZmZlci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZXN0cm95IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICB0aGlzLm1vZGVsLmRvY3VtZW50Lm9mZignY2hhbmdlJywgdGhpcy5fY2hhbmdlQ2FsbGJhY2spOwogICAgICB0aGlzLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5vZmYoJ2NoYW5nZTpyYW5nZScsIHRoaXMuX3NlbGVjdGlvbkNoYW5nZUNhbGxiYWNrKTsKICAgICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24ub2ZmKCdjaGFuZ2U6YXR0cmlidXRlJywgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2spOwogICAgfQogICAgLyoqCiAgICAgKiBSZXNldHMgdGhlIGNoYW5nZSBidWZmZXIuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2lnbm9yZUxvY2tdIFdoZXRoZXIgaW50ZXJuYWwgbG9jayB7QGxpbmsgI2lzTG9ja2VkfSBzaG91bGQgYmUgaWdub3JlZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJfcmVzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNldChpZ25vcmVMb2NrKSB7CiAgICAgIGlmICghdGhpcy5pc0xvY2tlZCB8fCBpZ25vcmVMb2NrKSB7CiAgICAgICAgdGhpcy5fYmF0Y2ggPSBudWxsOwogICAgICAgIHRoaXMuc2l6ZSA9IDA7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJiYXRjaCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKCF0aGlzLl9iYXRjaCkgewogICAgICAgIHRoaXMuX2JhdGNoID0gdGhpcy5tb2RlbC5jcmVhdGVCYXRjaCgpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5fYmF0Y2g7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ2hhbmdlQnVmZmVyOwp9KCk7CgpleHBvcnQgeyBDaGFuZ2VCdWZmZXIgYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js"],"names":["ChangeBuffer","model","limit","size","isLocked","_changeCallback","evt","batch","type","_batch","_reset","_selectionChangeCallback","document","on","selection","changeCount","off","ignoreLock","createBatch"],"mappings":";;;AAAA;;;;;AAKA;;;;AAIA;;;;;;;;;;;;;;;;;;IAkBqBA,Y;;;AACpB;;;;;;AAMA,wBAAaC,KAAb,EAAiC;AAAA;;AAAA,QAAbC,KAAa,uEAAL,EAAK;;AAAA;;AAChC;;;;;;AAMA,SAAKD,KAAL,GAAaA,KAAb;AAEA;;;;;;;;AAOA,SAAKE,IAAL,GAAY,CAAZ;AAEA;;;;;;;AAMA,SAAKD,KAAL,GAAaA,KAAb;AAEA;;;;;;;AAMA,SAAKE,QAAL,GAAgB,KAAhB,CAhCgC,CAkChC;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKC,eAAL,GAAuB,UAAEC,GAAF,EAAOC,KAAP,EAAkB;AACxC,UAAKA,KAAK,CAACC,IAAN,IAAc,aAAd,IAA+BD,KAAK,KAAK,KAAI,CAACE,MAAnD,EAA4D;AAC3D,QAAA,KAAI,CAACC,MAAL,CAAa,IAAb;AACA;AACD,KAJD;;AAMA,SAAKC,wBAAL,GAAgC,YAAM;AACrC,MAAA,KAAI,CAACD,MAAL;AACA,KAFD;;AAIA,SAAKT,KAAL,CAAWW,QAAX,CAAoBC,EAApB,CAAwB,QAAxB,EAAkC,KAAKR,eAAvC;AAEA,SAAKJ,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BD,EAA9B,CAAkC,cAAlC,EAAkD,KAAKF,wBAAvD;AACA,SAAKV,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BD,EAA9B,CAAkC,kBAAlC,EAAsD,KAAKF,wBAA3D;AAEA;;;;;;;AAOA;;;;;;;AAOA;;;;;;AAMA;AAED;;;;;;;;;;;AAcA;;;;;;0BAMOI,W,EAAc;AACpB,WAAKZ,IAAL,IAAaY,WAAb;;AAEA,UAAK,KAAKZ,IAAL,IAAa,KAAKD,KAAvB,EAA+B;AAC9B,aAAKQ,MAAL,CAAa,IAAb;AACA;AACD;AAED;;;;;;2BAGO;AACN,WAAKN,QAAL,GAAgB,IAAhB;AACA;AAED;;;;;;6BAGS;AACR,WAAKA,QAAL,GAAgB,KAAhB;AACA;AAED;;;;;;8BAGU;AACT,WAAKH,KAAL,CAAWW,QAAX,CAAoBI,GAApB,CAAyB,QAAzB,EAAmC,KAAKX,eAAxC;AACA,WAAKJ,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BE,GAA9B,CAAmC,cAAnC,EAAmD,KAAKL,wBAAxD;AACA,WAAKV,KAAL,CAAWW,QAAX,CAAoBE,SAApB,CAA8BE,GAA9B,CAAmC,kBAAnC,EAAuD,KAAKL,wBAA5D;AACA;AAED;;;;;;;;;2BAMQM,U,EAAa;AACpB,UAAK,CAAC,KAAKb,QAAN,IAAkBa,UAAvB,EAAoC;AACnC,aAAKR,MAAL,GAAc,IAAd;AACA,aAAKN,IAAL,GAAY,CAAZ;AACA;AACD;;;wBAxDW;AACX,UAAK,CAAC,KAAKM,MAAX,EAAoB;AACnB,aAAKA,MAAL,GAAc,KAAKR,KAAL,CAAWiB,WAAX,EAAd;AACA;;AAED,aAAO,KAAKT,MAAZ;AACA;;;;;;SAhGmBT,Y","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/changebuffer\n */\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n\t/**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n\t */\n\tconstructor( model, limit = 20 ) {\n\t\t/**\n\t\t * The model instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t\t * the {@link #batch batch} is set to a new one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #size\n\t\t */\n\t\tthis.size = 0;\n\n\t\t/**\n\t\t * The maximum number of atomic changes which can be contained in one batch.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #limit\n\t\t */\n\t\tthis.limit = limit;\n\n\t\t/**\n\t\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isLocked\n\t\t */\n\t\tthis.isLocked = false;\n\n\t\t// The function to be called in order to notify the buffer about batches which appeared in the document.\n\t\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\n\t\t//\n\t\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n\t\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n\t\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\t\tthis._changeCallback = ( evt, batch ) => {\n\t\t\tif ( batch.type != 'transparent' && batch !== this._batch ) {\n\t\t\t\tthis._reset( true );\n\t\t\t}\n\t\t};\n\n\t\tthis._selectionChangeCallback = () => {\n\t\t\tthis._reset();\n\t\t};\n\n\t\tthis.model.document.on( 'change', this._changeCallback );\n\n\t\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\n\n\t\t/**\n\t\t * The current batch instance.\n\t\t *\n\t\t * @private\n\t\t * @member #_batch\n\t\t */\n\n\t\t/**\n\t\t * The callback to document the change event which later needs to be removed.\n\t\t *\n\t\t * @private\n\t\t * @member #_changeCallback\n\t\t */\n\n\t\t/**\n\t\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t\t *\n\t\t * @private\n\t\t * @member #_selectionChangeCallback\n\t\t */\n\t}\n\n\t/**\n\t * The current batch to which a feature should add its operations. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @type {module:engine/model/batch~Batch}\n\t */\n\tget batch() {\n\t\tif ( !this._batch ) {\n\t\t\tthis._batch = this.model.createBatch();\n\t\t}\n\n\t\treturn this._batch;\n\t}\n\n\t/**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param {Number} changeCount The number of atomic changes to input.\n\t */\n\tinput( changeCount ) {\n\t\tthis.size += changeCount;\n\n\t\tif ( this.size >= this.limit ) {\n\t\t\tthis._reset( true );\n\t\t}\n\t}\n\n\t/**\n\t * Locks the buffer.\n\t */\n\tlock() {\n\t\tthis.isLocked = true;\n\t}\n\n\t/**\n\t * Unlocks the buffer.\n\t */\n\tunlock() {\n\t\tthis.isLocked = false;\n\t}\n\n\t/**\n\t * Destroys the buffer.\n\t */\n\tdestroy() {\n\t\tthis.model.document.off( 'change', this._changeCallback );\n\t\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\n\t}\n\n\t/**\n\t * Resets the change buffer.\n\t *\n\t * @private\n\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n\t */\n\t_reset( ignoreLock ) {\n\t\tif ( !this.isLocked || ignoreLock ) {\n\t\t\tthis._batch = null;\n\t\t\tthis.size = 0;\n\t\t}\n\t}\n}\n"]}]}