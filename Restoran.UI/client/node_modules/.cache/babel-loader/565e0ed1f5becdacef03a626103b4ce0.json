{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-ui\\src\\focuscycler.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-ui\\src\\focuscycler.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js"],"names":["global","FocusCycler","options","Object","assign","actions","keystrokeHandler","methodName","keystroke","set","data","cancel","_focus","first","last","next","previous","view","focus","step","current","collectionLength","focusables","length","index","get","isFocusable","find","filter","slice","_getFocusableItem","focusTracker","focusedElement","viewIndex","focused","element","window","getComputedStyle","display"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/focuscycler\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n */\nexport default class FocusCycler {\n\t/**\n\t * Creates an instance of the focus cycler utility.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {module:utils/collection~Collection|Object} options.focusables\n\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n\t * @param {Object} [options.actions]\n\t */\n\tconstructor( options ) {\n\t\tObject.assign( this, options );\n\n\t\t/**\n\t\t * A {@link module:ui/view~View view} collection that the cycler operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} #focusables\n\t\t */\n\n\t\t/**\n\t\t * A focus tracker instance that the cycler uses to determine the current focus\n\t\t * state in {@link #focusables}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * which can respond to certain keystrokes and cycle the focus.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n\t\t */\n\n\t\t/**\n\t\t * Actions that the cycler can take when a keystroke is pressed. Requires\n\t\t * `options.keystrokeHandler` to be passed and working. When an action is\n\t\t * performed, `preventDefault` and `stopPropagation` will be called on the event\n\t\t * the keystroke fired in the DOM.\n\t\t *\n\t\t *\t\tactions: {\n\t\t *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n\t\t *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\t\t *\n\t\t *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n\t\t *\t\t\tfocusNext: 'arrowdown'\n\t\t *\t\t}\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object} #actions\n\t\t */\n\n\t\tif ( options.actions && options.keystrokeHandler ) {\n\t\t\tfor ( const methodName in options.actions ) {\n\t\t\t\tlet actions = options.actions[ methodName ];\n\n\t\t\t\tif ( typeof actions == 'string' ) {\n\t\t\t\t\tactions = [ actions ];\n\t\t\t\t}\n\n\t\t\t\tfor ( const keystroke of actions ) {\n\t\t\t\t\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\n\t\t\t\t\t\tthis[ methodName ]();\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the first focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #first\n\t */\n\tget first() {\n\t\treturn this.focusables.find( isFocusable ) || null;\n\t}\n\n\t/**\n\t * Returns the last focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #last\n\t */\n\tget last() {\n\t\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #next\n\t */\n\tget next() {\n\t\treturn this._getFocusableItem( 1 );\n\t}\n\n\t/**\n\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #previous\n\t */\n\tget previous() {\n\t\treturn this._getFocusableItem( -1 );\n\t}\n\n\t/**\n\t * An index of the view in the {@link #focusables} which is focused according\n\t * to {@link #focusTracker}. Returns `null` when there is no such view.\n\t *\n\t * @readonly\n\t * @member {Number|null} #current\n\t */\n\tget current() {\n\t\tlet index = null;\n\n\t\t// There's no focused view in the focusables.\n\t\tif ( this.focusTracker.focusedElement === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.focusables.find( ( view, viewIndex ) => {\n\t\t\tconst focused = view.element === this.focusTracker.focusedElement;\n\n\t\t\tif ( focused ) {\n\t\t\t\tindex = viewIndex;\n\t\t\t}\n\n\t\t\treturn focused;\n\t\t} );\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Focuses the {@link #first} item in {@link #focusables}.\n\t */\n\tfocusFirst() {\n\t\tthis._focus( this.first );\n\t}\n\n\t/**\n\t * Focuses the {@link #last} item in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focus( this.last );\n\t}\n\n\t/**\n\t * Focuses the {@link #next} item in {@link #focusables}.\n\t */\n\tfocusNext() {\n\t\tthis._focus( this.next );\n\t}\n\n\t/**\n\t * Focuses the {@link #previous} item in {@link #focusables}.\n\t */\n\tfocusPrevious() {\n\t\tthis._focus( this.previous );\n\t}\n\n\t/**\n\t * Focuses the given view if it exists.\n\t *\n\t * @protected\n\t * @param {module:ui/view~View} view\n\t */\n\t_focus( view ) {\n\t\tif ( view ) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the next or previous focusable view in {@link #focusables} with respect\n\t * to {@link #current}.\n\t *\n\t * @protected\n\t * @param {Number} step Either `1` for checking forward from {@link #current} or\n\t * `-1` for checking backwards.\n\t * @returns {module:ui/view~View|null}\n\t */\n\t_getFocusableItem( step ) {\n\t\t// Cache for speed.\n\t\tconst current = this.current;\n\t\tconst collectionLength = this.focusables.length;\n\n\t\tif ( !collectionLength ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Start from the beginning if no view is focused.\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\tif ( current === null ) {\n\t\t\treturn this[ step === 1 ? 'first' : 'last' ];\n\t\t}\n\n\t\t// Cycle in both directions.\n\t\tlet index = ( current + collectionLength + step ) % collectionLength;\n\n\t\tdo {\n\t\t\tconst view = this.focusables.get( index );\n\n\t\t\t// TODO: Check if view is visible.\n\t\t\tif ( isFocusable( view ) ) {\n\t\t\t\treturn view;\n\t\t\t}\n\n\t\t\t// Cycle in both directions.\n\t\t\tindex = ( index + collectionLength + step ) % collectionLength;\n\t\t} while ( index !== current );\n\n\t\treturn null;\n\t}\n}\n\n// Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\nfunction isFocusable( view ) {\n\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\n}\n"]}]}