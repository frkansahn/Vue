{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\editingkeystrokehandler.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-core\\src\\editingkeystrokehandler.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI7CmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxcUmVzdG9yYW5cXFJlc3RvcmFuXFxSZXN0b3Jhbi5VSVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfZ2V0IGZyb20gIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXFJlc3RvcmFuXFxSZXN0b3JhblxcUmVzdG9yYW4uVUlcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vZ2V0IjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJDOlxcVXNlcnNcXHBjXFxEZXNrdG9wXFxSZXN0b3JhblxcUmVzdG9yYW5cXFJlc3RvcmFuLlVJXFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKCi8qKgogKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cHM6Ly9ja2VkaXRvci5jb20vbGVnYWwvY2tlZGl0b3Itb3NzLWxpY2Vuc2UKICovCgovKioKICogQG1vZHVsZSBjb3JlL2VkaXRpbmdrZXlzdHJva2VoYW5kbGVyCiAqLwppbXBvcnQgS2V5c3Ryb2tlSGFuZGxlciBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9rZXlzdHJva2VoYW5kbGVyJzsKLyoqCiAqIEEga2V5c3Ryb2tlIGhhbmRsZXIgZm9yIGVkaXRvciBlZGl0aW5nLiBJdHMgaW5zdGFuY2UgaXMgYXZhaWxhYmxlCiAqIGluIHtAbGluayBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvciNrZXlzdHJva2VzfSBzbyBwbHVnaW5zCiAqIGNhbiByZWdpc3RlciB0aGVpciBrZXlzdHJva2VzLgogKgogKiBFLmcuIGFuIHVuZG8gcGx1Z2luIHdvdWxkIGRvIHRoaXM6CiAqCiAqCQllZGl0b3Iua2V5c3Ryb2tlcy5zZXQoICdDdHJsK1onLCAndW5kbycgKTsKICoJCWVkaXRvci5rZXlzdHJva2VzLnNldCggJ0N0cmwrU2hpZnQrWicsICdyZWRvJyApOwogKgkJZWRpdG9yLmtleXN0cm9rZXMuc2V0KCAnQ3RybCtZJywgJ3JlZG8nICk7CiAqCiAqIEBleHRlbmRzIG1vZHVsZTp1dGlscy9rZXlzdHJva2VoYW5kbGVyfktleXN0cm9rZUhhbmRsZXIKICovCgp2YXIgRWRpdGluZ0tleXN0cm9rZUhhbmRsZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfS2V5c3Ryb2tlSGFuZGxlcikgewogIF9pbmhlcml0cyhFZGl0aW5nS2V5c3Ryb2tlSGFuZGxlciwgX0tleXN0cm9rZUhhbmRsZXIpOwoKICAvKioKICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBrZXlzdHJva2UgaGFuZGxlci4KICAgKgogICAqIEBwYXJhbSB7bW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3J9IGVkaXRvcgogICAqLwogIGZ1bmN0aW9uIEVkaXRpbmdLZXlzdHJva2VIYW5kbGVyKGVkaXRvcikgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0aW5nS2V5c3Ryb2tlSGFuZGxlcik7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRWRpdGluZ0tleXN0cm9rZUhhbmRsZXIpLmNhbGwodGhpcykpOwogICAgLyoqCiAgICAgKiBUaGUgZWRpdG9yIGluc3RhbmNlLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQG1lbWJlciB7bW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3J9CiAgICAgKi8KCiAgICBfdGhpcy5lZGl0b3IgPSBlZGl0b3I7CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIC8qKgogICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIHRoZSBzcGVjaWZpZWQga2V5c3Ryb2tlLgogICAqCiAgICogVGhlIGhhbmRsZXIgY2FuIGJlIHNwZWNpZmllZCBhcyBhIGNvbW1hbmQgbmFtZSBvciBhIGNhbGxiYWNrLgogICAqCiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXkuPFN0cmluZ3xOdW1iZXI+fSBrZXlzdHJva2UgS2V5c3Ryb2tlIGRlZmluZWQgaW4gYSBmb3JtYXQgYWNjZXB0ZWQgYnkKICAgKiB0aGUge0BsaW5rIG1vZHVsZTp1dGlscy9rZXlib2FyZH5wYXJzZUtleXN0cm9rZX0gZnVuY3Rpb24uCiAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrIElmIGEgc3RyaW5nIGlzIHBhc3NlZCwgdGhlbiB0aGUga2V5c3Ryb2tlIHdpbGwKICAgKiB7QGxpbmsgbW9kdWxlOmNvcmUvZWRpdG9yL2VkaXRvcn5FZGl0b3IjZXhlY3V0ZSBleGVjdXRlIGEgY29tbWFuZH0uCiAgICogSWYgYSBmdW5jdGlvbiwgdGhlbiBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZQogICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIva2V5b2JzZXJ2ZXJ+S2V5RXZlbnREYXRhIGtleSBldmVudCBkYXRhfSBvYmplY3QgYW5kCiAgICogYSBgY2FuY2VsKClgIGhlbHBlciB0byBib3RoIGBwcmV2ZW50RGVmYXVsdCgpYCBhbmQgYHN0b3BQcm9wYWdhdGlvbigpYCBvZiB0aGUgZXZlbnQuCiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBZGRpdGlvbmFsIG9wdGlvbnMuCiAgICogQHBhcmFtIHttb2R1bGU6dXRpbHMvcHJpb3JpdGllc35Qcmlvcml0eVN0cmluZ3xOdW1iZXJ9IFtvcHRpb25zLnByaW9yaXR5PSdub3JtYWwnXSBUaGUgcHJpb3JpdHkgb2YgdGhlIGtleXN0cm9rZQogICAqIGNhbGxiYWNrLiBUaGUgaGlnaGVyIHRoZSBwcmlvcml0eSB2YWx1ZSB0aGUgc29vbmVyIHRoZSBjYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkLiBLZXlzdHJva2VzIGhhdmluZyB0aGUgc2FtZSBwcmlvcml0eQogICAqIGFyZSBjYWxsZWQgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBhZGRlZC4KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhFZGl0aW5nS2V5c3Ryb2tlSGFuZGxlciwgW3sKICAgIGtleTogInNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGtleXN0cm9rZSwgY2FsbGJhY2spIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CgogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09ICdzdHJpbmcnKSB7CiAgICAgICAgdmFyIGNvbW1hbmROYW1lID0gY2FsbGJhY2s7CgogICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soZXZ0RGF0YSwgY2FuY2VsKSB7CiAgICAgICAgICBfdGhpczIuZWRpdG9yLmV4ZWN1dGUoY29tbWFuZE5hbWUpOwoKICAgICAgICAgIGNhbmNlbCgpOwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKEVkaXRpbmdLZXlzdHJva2VIYW5kbGVyLnByb3RvdHlwZSksICJzZXQiLCB0aGlzKS5jYWxsKHRoaXMsIGtleXN0cm9rZSwgY2FsbGJhY2ssIG9wdGlvbnMpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEVkaXRpbmdLZXlzdHJva2VIYW5kbGVyOwp9KEtleXN0cm9rZUhhbmRsZXIpOwoKZXhwb3J0IHsgRWRpdGluZ0tleXN0cm9rZUhhbmRsZXIgYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-core/src/editingkeystrokehandler.js"],"names":["KeystrokeHandler","EditingKeystrokeHandler","editor","keystroke","callback","options","commandName","evtData","cancel","execute"],"mappings":";;;;;;;AAAA;;;;;AAKA;;;AAIA,OAAOA,gBAAP,MAA6B,gDAA7B;AAEA;;;;;;;;;;;;;;IAaqBC,uB;;;;;AACpB;;;;;AAKA,mCAAaC,MAAb,EAAsB;AAAA;;AAAA;;AACrB;AAEA;;;;;;;AAMA,UAAKA,MAAL,GAAcA,MAAd;AATqB;AAUrB;AAED;;;;;;;;;;;;;;;;;;;;;wBAiBKC,S,EAAWC,Q,EAAyB;AAAA;;AAAA,UAAfC,OAAe,uEAAL,EAAK;;AACxC,UAAK,OAAOD,QAAP,IAAmB,QAAxB,EAAmC;AAClC,YAAME,WAAW,GAAGF,QAApB;;AAEAA,QAAAA,QAAQ,GAAG,kBAAEG,OAAF,EAAWC,MAAX,EAAuB;AACjC,UAAA,MAAI,CAACN,MAAL,CAAYO,OAAZ,CAAqBH,WAArB;;AACAE,UAAAA,MAAM;AACN,SAHD;AAIA;;AAED,uFAAWL,SAAX,EAAsBC,QAAtB,EAAgCC,OAAhC;AACA;;;;EA9CmDL,gB;;SAAhCC,uB","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends module:utils/keystrokehandler~KeystrokeHandler\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function|String} callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tif ( typeof callback == 'string' ) {\n\t\t\tconst commandName = callback;\n\n\t\t\tcallback = ( evtData, cancel ) => {\n\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\tcancel();\n\t\t\t};\n\t\t}\n\n\t\tsuper.set( keystroke, callback, options );\n\t}\n}\n"]}]}