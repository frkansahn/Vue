{"remainingRequest":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\stylesmap.js","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-engine\\src\\view\\stylesmap.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\@ckeditor\\ckeditor5-dev-webpack-plugin\\lib\\translatesourceloader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581760768702},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1581760786382},{"path":"C:\\Users\\pc\\Desktop\\Restoran\\Restoran\\Restoran.UI\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1581760768279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/pc/Desktop/Restoran/Restoran/Restoran.UI/client/node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js"],"names":["get","isObject","merge","set","unset","StylesMap","styleProcessor","_styles","_styleProcessor","inlineStyle","clear","parsedStyles","Array","from","parseInlineStyles","entries","key","value","toNormalizedForm","name","isEmpty","styles","getReducedForm","propertyDescriptor","find","property","isArray","nameOrObject","valueOrObject","Object","path","toPath","_cleanEmptyObjectsOnPath","getNormalized","_getStylesEntries","map","arr","join","sort","propertyName","parsed","keys","push","pathParts","split","isChildPath","length","parentPath","splice","parentObject","isParentEmpty","remove","getStyleNames","StylesProcessor","_normalizers","Map","_extractors","_reducers","_consumables","propertyValue","appendStyleValue","has","normalizer","undefined","extractor","normalizedValue","reducer","callback","callbackOrPath","shorthandName","styleNames","_mapStyleNames","alsoName","stylesString","quoteType","propertyNameStart","propertyValueStart","stylesMap","charAt","i","char","substr","trim","replace","stylesObject","nameOrPath","valueToSet"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/stylesmap\n */\n\nimport { get, isObject, merge, set, unset } from 'lodash-es';\n\n/**\n * Styles map. Allows handling (adding, removing, retrieving) a set of style rules (usually, of an element).\n *\n * The styles map is capable of normalizing style names so e.g. the following operations are possible:\n */\nexport default class StylesMap {\n\t/**\n\t * Creates Styles instance.\n\t *\n\t * @param {module:engine/view/stylesmap~StylesProcessor} styleProcessor\n\t */\n\tconstructor( styleProcessor ) {\n\t\t/**\n\t\t * Keeps an internal representation of styles map. Normalized styles are kept as object tree to allow unified modification and\n\t\t * value access model using lodash's get, set, unset, etc methods.\n\t\t *\n\t\t * When no style processor rules are defined the it acts as simple key-value storage.\n\t\t *\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._styles = {};\n\n\t\t/**\n\t\t * An instance of the {@link module:engine/view/stylesmap~StylesProcessor}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/stylesmap~StylesProcessor}\n\t\t */\n\t\tthis._styleProcessor = styleProcessor;\n\t}\n\n\t/**\n\t * Returns true if style map has no styles set.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget isEmpty() {\n\t\tconst entries = Object.entries( this._styles );\n\t\tconst from = Array.from( entries );\n\n\t\treturn !from.length;\n\t}\n\n\t/**\n\t * Number of styles defined.\n\t *\n\t * @type {Number}\n\t */\n\tget size() {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.getStyleNames().length;\n\t}\n\n\t/**\n\t * Set styles map to a new value.\n\t *\n\t *\t\tstyles.setTo( 'border:1px solid blue;margin-top:1px;' );\n\t *\n\t * @param {String} inlineStyle\n\t */\n\tsetTo( inlineStyle ) {\n\t\tthis.clear();\n\n\t\tconst parsedStyles = Array.from( parseInlineStyles( inlineStyle ).entries() );\n\n\t\tfor ( const [ key, value ] of parsedStyles ) {\n\t\t\tthis._styleProcessor.toNormalizedForm( key, value, this._styles );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a given style is set.\n\t *\n\t *\t\tstyles.setTo( 'margin-left:1px;' );\n\t *\n\t *\t\tstyles.has( 'margin-left' );    // -> true\n\t *\t\tstyles.has( 'padding' );        // -> false\n\t *\n\t * **Note**: This check supports normalized style names.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.setTo( 'margin:2px;' );\n\t *\n\t *\t\tstyles.has( 'margin' );         // -> true\n\t *\t\tstyles.has( 'margin-top' );     // -> true\n\t *\t\tstyles.has( 'margin-left' );    // -> true\n\t *\n\t *\t\tstyles.remove( 'margin-top' );\n\t *\n\t *\t\tstyles.has( 'margin' );         // -> false\n\t *\t\tstyles.has( 'margin-top' );     // -> false\n\t *\t\tstyles.has( 'margin-left' );    // -> true\n\t *\n\t * @param {String} name Style name.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst styles = this._styleProcessor.getReducedForm( name, this._styles );\n\n\t\tconst propertyDescriptor = styles.find( ( [ property ] ) => property === name );\n\n\t\t// Only return a value if it is set;\n\t\treturn Array.isArray( propertyDescriptor );\n\t}\n\n\t/**\n\t * Sets a given style.\n\t *\n\t * Can insert one by one:\n\t *\n\t *\t\tstyles.set( 'color', 'blue' );\n\t *\t\tstyles.set( 'margin-right', '1em' );\n\t *\n\t * or many styles at once:\n\t *\n\t *\t\tstyles.set( {\n\t *\t\t\tcolor: 'blue',\n\t *\t\t\t'margin-right': '1em'\n\t *\t\t} );\n\t *\n\t * ***Note**:* This method uses {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules\n\t * enabled style processor rules} to normalize passed values.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.set( 'margin', '2px' );\n\t *\n\t * The above code will set margin to:\n\t *\n\t *\t\tstyles.getNormalized( 'margin' );\n\t *\t\t// -> { top: '2px', right: '2px', bottom: '2px', left: '2px' }\n\t *\n\t * Which makes it possible to retrieve a \"sub-value\":\n\t *\n\t *\t\tstyles.get( 'margin-left' );       // -> '2px'\n\t *\n\t * Or modify it:\n\t *\n\t *\t\tstyles.remove( 'margin-left' );\n\t *\n\t *\t\tstyles.getNormalized( 'margin' );  // -> { top: '1px', bottom: '1px', right: '1px' }\n\t *\t\tstyles.toString();                 // -> 'margin-bottom:1px;margin-right:1px;margin-top:1px;'\n\t *\n\t * This method also allows to set normalized values directly (if a particular styles processor rule was enabled):\n\t *\n\t *\t\tstyles.set( 'border-color', { top: 'blue' } );\n\t *\t\tstyles.set( 'margin', { right: '2em' } );\n\t *\n\t *\t\tstyles.toString();                 // -> 'border-color-top:blue;margin-right:2em;'\n\t *\n\t * @param {String|Object} nameOrObject Style property name or object with multiple properties.\n\t * @param {String|Object} valueOrObject Value to set.\n\t */\n\tset( nameOrObject, valueOrObject ) {\n\t\tif ( isObject( nameOrObject ) ) {\n\t\t\tfor ( const [ key, value ] of Object.entries( nameOrObject ) ) {\n\t\t\t\tthis._styleProcessor.toNormalizedForm( key, value, this._styles );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styleProcessor.toNormalizedForm( nameOrObject, valueOrObject, this._styles );\n\t\t}\n\t}\n\n\t/**\n\t * Removes given style.\n\t *\n\t *\t\tstyles.setTo( 'background:#f00;margin-right:2px;' );\n\t *\n\t *\t\tstyles.remove( 'background' );\n\t *\n\t *\t\tstyles.toString();   // -> 'margin-right:2px;'\n\t *\n\t * ***Note**:* This method uses {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules\n\t * enabled style processor rules} to normalize passed values.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.setTo( 'margin:1px' );\n\t *\n\t *\t\tstyles.remove( 'margin-top' );\n\t *\t\tstyles.remove( 'margin-right' );\n\t *\n\t *\t\tstyles.toString(); // -> 'margin-bottom:1px;margin-left:1px;'\n\t *\n\t * @param {String} name Style name.\n\t */\n\tremove( name ) {\n\t\tconst path = toPath( name );\n\n\t\tunset( this._styles, path );\n\t\tdelete this._styles[ name ];\n\n\t\tthis._cleanEmptyObjectsOnPath( path );\n\t}\n\n\t/**\n\t * Returns a normalized style object or a single value.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px 2px 3em;' );\n\t *\n\t *\t\tstyles.getNormalized( 'margin' );\n\t *\t\t// will log:\n\t *\t\t// {\n\t *\t\t//     top: '1px',\n\t *\t\t//     right: '2px',\n\t *\t\t//     bottom: '3em',\n\t *\t\t//     left: '2px'     // normalized value from margin shorthand\n\t *\t\t// }\n\t *\n\t *\t\tstyles.getNormalized( 'margin-left' ); // -> '2px'\n\t *\n\t * **Note**: This method will only return normalized styles if a style processor was defined.\n\t *\n\t * @param {String} name Style name.\n\t * @returns {Object|String|undefined}\n\t */\n\tgetNormalized( name ) {\n\t\treturn this._styleProcessor.getNormalized( name, this._styles );\n\t}\n\n\t/**\n\t * Returns a normalized style string. Styles are sorted by name.\n\t *\n\t *\t\tstyles.set( 'margin' , '1px' );\n\t *\t\tstyles.set( 'background', '#f00' );\n\t *\n\t *\t\tstyles.toString(); // -> 'background:#f00;margin:1px;'\n\t *\n\t * **Note**: This method supports normalized styles if defined.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tstyles.set( 'margin' , '1px' );\n\t *\t\tstyles.set( 'background', '#f00' );\n\t *\t\tstyles.remove( 'margin-top' );\n\t *\t\tstyles.remove( 'margin-right' );\n\t *\n\t *\t\tstyles.toString(); // -> 'background:#f00;margin-bottom:1px;margin-left:1px;'\n\t *\n\t * @returns {String}\n\t */\n\ttoString() {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn this._getStylesEntries()\n\t\t\t.map( arr => arr.join( ':' ) )\n\t\t\t.sort()\n\t\t\t.join( ';' ) + ';';\n\t}\n\n\t/**\n\t * Returns property as a value string or undefined if property is not set.\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\t\tstyles.set( 'margin-bottom', '3em' );\n\t *\n\t *\t\tstyles.getAsString( 'margin' ); // -> 'margin: 1px 1px 3em;'\n\t *\n\t * Note, however, that all sub-values must be set for the longhand property name to return a value:\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\t\tstyles.remove( 'margin-bottom' );\n\t *\n\t *\t\tstyles.getAsString( 'margin' ); // -> undefined\n\t *\n\t * In the above scenario, it is not possible to return a `margin` value, so `undefined` is returned.\n\t * Instead, you should use:\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\t\tstyles.remove( 'margin-bottom' );\n\t *\n\t *\t\tfor ( const styleName of styles.getStyleNames() ) {\n\t *\t\t\tconsole.log( styleName, styles.getAsString( styleName ) );\n\t *\t\t}\n\t *\t\t// 'margin-top', '1px'\n\t *\t\t// 'margin-right', '1px'\n\t *\t\t// 'margin-left', '1px'\n\t *\n\t * In general, it is recommend to iterate over style names like in the example above. This way, you will always get all\n\t * the currently set style values. So, if all the 4 margin values would be set\n\t * the for-of loop above would yield only `'margin'`, `'1px'`:\n\t *\n\t *\t\tconst styles = new Styles();\n\t *\t\tstyles.setTo( 'margin:1px;' );\n\t *\n\t *\t\tfor ( const styleName of styles.getStyleNames() ) {\n\t *\t\t\tconsole.log( styleName, styles.getAsString( styleName ) );\n\t *\t\t}\n\t *\t\t// 'margin', '1px'\n\t *\n\t * **Note**: To get a normalized version of a longhand property use the {@link #getNormalized `#getNormalized()`} method.\n\t *\n\t * @param {String} propertyName\n\t * @returns {String|undefined}\n\t */\n\tgetAsString( propertyName ) {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._styles[ propertyName ] && !isObject( this._styles[ propertyName ] ) ) {\n\t\t\t// Try return styles set directly - values that are not parsed.\n\t\t\treturn this._styles[ propertyName ];\n\t\t}\n\n\t\tconst styles = this._styleProcessor.getReducedForm( propertyName, this._styles );\n\n\t\tconst propertyDescriptor = styles.find( ( [ property ] ) => property === propertyName );\n\n\t\t// Only return a value if it is set;\n\t\tif ( Array.isArray( propertyDescriptor ) ) {\n\t\t\treturn propertyDescriptor[ 1 ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns style property names as they would appear when using {@link #toString `#toString()`}.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tgetStyleNames() {\n\t\tif ( this.isEmpty ) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst entries = this._getStylesEntries();\n\n\t\treturn entries.map( ( [ key ] ) => key );\n\t}\n\n\t/**\n\t * Removes all styles.\n\t */\n\tclear() {\n\t\tthis._styles = {};\n\t}\n\n\t/**\n\t * Returns normalized styles entries for further processing.\n\t *\n\t * @private\n\t * @returns {Array.<module:engine/view/stylesmap~PropertyDescriptor>}\n\t */\n\t_getStylesEntries() {\n\t\tconst parsed = [];\n\n\t\tconst keys = Object.keys( this._styles );\n\n\t\tfor ( const key of keys ) {\n\t\t\tparsed.push( ...this._styleProcessor.getReducedForm( key, this._styles ) );\n\t\t}\n\n\t\treturn parsed;\n\t}\n\n\t/**\n\t * Removes empty objects upon removing an entry from internal object.\n\t *\n\t * @param {String} path\n\t * @private\n\t */\n\t_cleanEmptyObjectsOnPath( path ) {\n\t\tconst pathParts = path.split( '.' );\n\t\tconst isChildPath = pathParts.length > 1;\n\n\t\tif ( !isChildPath ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentPath = pathParts.splice( 0, pathParts.length - 1 ).join( '.' );\n\n\t\tconst parentObject = get( this._styles, parentPath );\n\n\t\tif ( !parentObject ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isParentEmpty = !Array.from( Object.keys( parentObject ) ).length;\n\n\t\tif ( isParentEmpty ) {\n\t\t\tthis.remove( parentPath );\n\t\t}\n\t}\n}\n\n/**\n * Style processor is responsible for writing and reading a normalized styles object.\n */\nexport class StylesProcessor {\n\t/**\n\t * Creates StylesProcessor instance.\n\t *\n\t * @private\n\t */\n\tconstructor() {\n\t\tthis._normalizers = new Map();\n\t\tthis._extractors = new Map();\n\t\tthis._reducers = new Map();\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Parse style string value to a normalized object and appends it to styles object.\n\t *\n\t *\t\tconst styles = {};\n\t *\n\t *\t\tstylesProcessor.toNormalizedForm( 'margin', '1px', styles );\n\t *\n\t *\t\t// styles will consist: { margin: { top: '1px', right: '1px', bottom: '1px', left: '1px; } }\n\t *\n\t * **Note**: To define normalizer callbacks use {@link #setNormalizer}.\n\t *\n\t * @param {String} name Name of style property.\n\t * @param {String} propertyValue Value of style property.\n\t * @param {Object} styles Object holding normalized styles.\n\t */\n\ttoNormalizedForm( name, propertyValue, styles ) {\n\t\tif ( isObject( propertyValue ) ) {\n\t\t\tappendStyleValue( styles, toPath( name ), propertyValue );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._normalizers.has( name ) ) {\n\t\t\tconst normalizer = this._normalizers.get( name );\n\n\t\t\tconst { path, value } = normalizer( propertyValue );\n\n\t\t\tappendStyleValue( styles, path, value );\n\t\t} else {\n\t\t\tappendStyleValue( styles, name, propertyValue );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a normalized version of a style property.\n\t *\t\tconst styles = {\n\t *\t\t\tmargin: { top: '1px', right: '1px', bottom: '1px', left: '1px; },\n\t *\t\t\tbackground: { color: '#f00' }\n\t *\t\t};\n\t *\n\t *\t\tstylesProcessor.getNormalized( 'background' );\n\t *\t\t// will return: { color: '#f00' }\n\t *\n\t *\t\tstylesProcessor.getNormalized( 'margin-top' );\n\t *\t\t// will return: '1px'\n\t *\n\t * **Note**: In some cases extracting single value requires defining an extractor callback {@link #setExtractor}.\n\t *\n\t * @param {String} name Name of style property.\n\t * @param {Object} styles Object holding normalized styles.\n\t * @returns {*}\n\t */\n\tgetNormalized( name, styles ) {\n\t\tif ( !name ) {\n\t\t\treturn merge( {}, styles );\n\t\t}\n\n\t\t// Might be empty string.\n\t\tif ( styles[ name ] !== undefined ) {\n\t\t\treturn styles[ name ];\n\t\t}\n\n\t\tif ( this._extractors.has( name ) ) {\n\t\t\tconst extractor = this._extractors.get( name );\n\n\t\t\tif ( typeof extractor === 'string' ) {\n\t\t\t\treturn get( styles, extractor );\n\t\t\t}\n\n\t\t\tconst value = extractor( name, styles );\n\n\t\t\tif ( value ) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\n\t\treturn get( styles, toPath( name ) );\n\t}\n\n\t/**\n\t * Returns a reduced form of style property form normalized object.\n\t *\n\t * For default margin reducer, the below code:\n\t *\n\t *\t\tstylesProcessor.getReducedForm( 'margin', {\n\t *\t\t\tmargin: { top: '1px', right: '1px', bottom: '2px', left: '1px; }\n\t *\t\t} );\n\t *\n\t * will return:\n\t *\n\t *\t\t[\n\t *\t\t\t[ 'margin', '1px 1px 2px' ]\n\t *\t\t]\n\t *\n\t * because it might be represented as a shorthand 'margin' value. However if one of margin long hand values is missing it should return:\n\t *\n\t *\t\t[\n\t *\t\t\t[ 'margin-top', '1px' ],\n\t *\t\t\t[ 'margin-right', '1px' ],\n\t *\t\t\t[ 'margin-bottom', '2px' ]\n\t *\t\t\t// the 'left' value is missing - cannot use 'margin' shorthand.\n\t *\t\t]\n\t *\n\t * **Note**: To define reducer callbacks use {@link #setReducer}.\n\t *\n\t * @param {String} name\n\t * @param {String} name Name of style property.\n\t * @param {Object} styles Object holding normalized styles.\n\t * @returns {Array.<module:engine/view/stylesmap~PropertyDescriptor>}\n\t */\n\tgetReducedForm( name, styles ) {\n\t\tconst normalizedValue = this.getNormalized( name, styles );\n\n\t\t// Might be empty string.\n\t\tif ( normalizedValue === undefined ) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif ( this._reducers.has( name ) ) {\n\t\t\tconst reducer = this._reducers.get( name );\n\n\t\t\treturn reducer( normalizedValue );\n\t\t}\n\n\t\treturn [ [ name, normalizedValue ] ];\n\t}\n\n\t/**\n\t * Returns related style names.\n\t *\n\t *\t\tstylesProcessor.getRelatedStyles( 'margin' );\n\t *\t\t// will return: [ 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ];\n\t *\n\t *\t\tstylesProcessor.getRelatedStyles( 'margin-top' );\n\t *\t\t// will return: [ 'margin' ];\n\t *\n\t * **Note**: To define new style relations load an existing style processor or use\n\t * {@link module:engine/view/stylesmap~StylesProcessor#setStyleRelation `StylesProcessor.setStyleRelation()`}.\n\t *\n\t * @param {String} name\n\t * @returns {Array.<String>}\n\t */\n\tgetRelatedStyles( name ) {\n\t\treturn this._consumables.get( name ) || [];\n\t}\n\n\t/**\n\t * Adds a normalizer method for a style property.\n\t *\n\t * A normalizer returns describing how the value should be normalized.\n\t *\n\t * For instance 'margin' style is a shorthand for four margin values:\n\t *\n\t * - 'margin-top'\n\t * - 'margin-right'\n\t * - 'margin-bottom'\n\t * - 'margin-left'\n\t *\n\t * and can be written in various ways if some values are equal to others. For instance `'margin: 1px 2em;'` is a shorthand for\n\t * `'margin-top: 1px;margin-right: 2em;margin-bottom: 1px;margin-left: 2em'`.\n\t *\n\t * A normalizer should parse various margin notations as a single object:\n\t *\n\t *\t\tconst styles = {\n\t *\t\t\tmargin: {\n\t *\t\t\t\ttop: '1px',\n\t *\t\t\t\tright: '2em',\n\t *\t\t\t\tbottom: '1px',\n\t *\t\t\t\tleft: '2em'\n\t *\t\t\t}\n\t *\t\t};\n\t *\n\t * Thus a normalizer for 'margin' style should return an object defining style path and value to store:\n\t *\n\t *\t\tconst returnValue = {\n\t *\t\t\tpath: 'margin',\n\t *\t\t\tvalue: {\n\t *\t\t\t\ttop: '1px',\n\t *\t\t\t\tright: '2em',\n\t *\t\t\t\tbottom: '1px',\n\t *\t\t\t\tleft: '2em'\n\t *\t\t\t}\n\t *\t\t};\n\t *\n\t * Additionally to fully support all margin notations there should be also defined 4 normalizers for longhand margin notations. Below\n\t * is an example for 'margin-top' style property normalizer:\n\t *\n\t *\t\tstylesProcessor.setNormalizer( 'margin-top', valueString => {\n\t *\t\t\treturn {\n\t *\t\t\t\tpath: 'margin.top',\n\t *\t\t\t\tvalue: valueString\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {String} name\n\t * @param {Function} callback\n\t */\n\tsetNormalizer( name, callback ) {\n\t\tthis._normalizers.set( name, callback );\n\t}\n\n\t/**\n\t * Adds a extractor callback for a style property.\n\t *\n\t * Most normalized style values are stored as one level objects. It is assumed that `'margin-top'` style will be stored as:\n\t *\n\t *\t\tconst styles = {\n\t *\t\t\tmargin: {\n\t *\t\t\t\ttop: 'value'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * However, some styles can have conflicting notations and thus it might be harder to extract a style value from shorthand. For instance\n\t * the 'border-top-style' can be defined using `'border-top:solid'`, `'border-style:solid none none none'` or by `'border:solid'`\n\t * shorthands. The default border styles processors stores styles as:\n\t *\n\t *\t\tconst styles = {\n\t *\t\t\tborder: {\n\t *\t\t\t\tstyle: {\n\t *\t\t\t\t\ttop: 'solid'\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * as it is better to modify border style independently from other values. On the other part the output of the border might be\n\t * desired as `border-top`, `border-left`, etc notation.\n\t *\n\t * In the above example a reducer should return a side border value that combines style, color and width:\n\t *\n\t *\t\tstyleProcessor.setExtractor( 'border-top', styles => {\n\t *\t\t\treturn {\n\t *\t\t\t\tcolor: styles.border.color.top,\n\t *\t\t\t\tstyle: styles.border.style.top,\n\t *\t\t\t\twidth: styles.border.width.top\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {String} name\n\t * @param {Function|String} callbackOrPath Callback that return a requested value or path string for single values.\n\t */\n\tsetExtractor( name, callbackOrPath ) {\n\t\tthis._extractors.set( name, callbackOrPath );\n\t}\n\n\t/**\n\t * Adds a reducer callback for a style property.\n\t *\n\t * Reducer returns a minimal notation for given style name. For longhand properties it is not required to write a reducer as\n\t * by default the direct value from style path is taken.\n\t *\n\t * For shorthand styles a reducer should return minimal style notation either by returning single name-value tuple or multiple tuples\n\t * if a shorthand cannot be used. For instance for a margin shorthand a reducer might return:\n\t *\n\t *\t\tconst marginShortHandTuple = [\n\t *\t\t\t[ 'margin', '1px 1px 2px' ]\n\t *\t\t];\n\t *\n\t * or a longhand tuples for defined values:\n\t *\n\t *\t\t// Considering margin.bottom and margin.left are undefined.\n\t *\t\tconst marginLonghandsTuples = [\n\t *\t\t\t[ 'margin-top', '1px' ],\n\t *\t\t\t[ 'margin-right', '1px' ]\n\t *\t\t];\n\t *\n\t * A reducer obtains a normalized style value:\n\t *\n\t *\t\t// Simplified reducer that always outputs 4 values which are always present:\n\t *\t\tstylesProcessor.setReducer( 'margin', margin => {\n\t *\t\t\treturn [\n\t *\t\t\t\t[ 'margin', `${ margin.top } ${ margin.right } ${ margin.bottom } ${ margin.left }` ]\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * @param {String} name\n\t * @param {Function} callback\n\t */\n\tsetReducer( name, callback ) {\n\t\tthis._reducers.set( name, callback );\n\t}\n\n\t/**\n\t * Defines a style shorthand relation to other style notations.\n\t *\n\t *\t\tstylesProcessor.setStyleRelation( 'margin', [\n\t *\t\t\t'margin-top',\n\t *\t\t\t'margin-right',\n\t *\t\t\t'margin-bottom',\n\t *\t\t\t'margin-left'\n\t *\t\t] );\n\t *\n\t * This enables expanding of style names for shorthands. For instance, if defined,\n\t * {@link module:engine/conversion/viewconsumable~ViewConsumable view consumable} items are automatically created\n\t * for long-hand margin style notation alongside the `'margin'` item.\n\t *\n\t * This means that when an element being converted has a style `margin`, a converter for `margin-left` will work just\n\t * fine since the view consumable will contain a consumable `margin-left` item (thanks to the relation) and\n\t * `element.getStyle( 'margin-left' )` will work as well assuming that the style processor was correctly configured.\n\t * However, once `margin-left` is consumed, `margin` will not be consumable anymore.\n\t *\n\t * @param {String} shorthandName\n\t * @param {Array.<String>} styleNames\n\t */\n\tsetStyleRelation( shorthandName, styleNames ) {\n\t\tthis._mapStyleNames( shorthandName, styleNames );\n\n\t\tfor ( const alsoName of styleNames ) {\n\t\t\tthis._mapStyleNames( alsoName, [ shorthandName ] );\n\t\t}\n\t}\n\n\t/**\n\t * Set two-way binding of style names.\n\t *\n\t * @param {String} name\n\t * @param {Array.<String>} styleNames\n\t * @private\n\t */\n\t_mapStyleNames( name, styleNames ) {\n\t\tif ( !this._consumables.has( name ) ) {\n\t\t\tthis._consumables.set( name, [] );\n\t\t}\n\n\t\tthis._consumables.get( name ).push( ...styleNames );\n\t}\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n//\n// @param {String} stylesString Styles to parse.\n// @returns {Map.<String, String>} stylesMap Map of parsed properties and values.\nfunction parseInlineStyles( stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tconst stylesMap = new Map();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn stylesMap;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ';': {\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n\n\treturn stylesMap;\n}\n\n// Return lodash compatible path from style name.\nfunction toPath( name ) {\n\treturn name.replace( '-', '.' );\n}\n\n// Appends style definition to the styles object.\n//\n// @param {String} nameOrPath\n// @param {String|Object} valueOrObject\n// @private\nfunction appendStyleValue( stylesObject, nameOrPath, valueOrObject ) {\n\tlet valueToSet = valueOrObject;\n\n\tif ( isObject( valueOrObject ) ) {\n\t\tvalueToSet = merge( {}, get( stylesObject, nameOrPath ), valueOrObject );\n\t}\n\n\tset( stylesObject, nameOrPath, valueToSet );\n}\n\n/**\n * A CSS style property descriptor that contains tuplet of two strings:\n *\n * - first string describes property name\n * - second string describes property value\n *\n *\t\tconst marginDescriptor = [ 'margin', '2px 3em' ];\n *\t\tconst marginTopDescriptor = [ 'margin-top', '2px' ];\n *\n * @typedef {Array.<String, String>} module:engine/view/stylesmap~PropertyDescriptor\n */\n\n/**\n * An object describing values associated with the sides of a box, for instance margins, paddings,\n * border widths, border colors, etc.\n *\n *\t\tconst margin = {\n *\t\t\ttop: '1px',\n *\t\t\tright: '3px',\n *\t\t\tbottom: '3px',\n *\t\t\tleft: '7px'\n *\t\t};\n *\n *\t\tconst borderColor = {\n *\t\t\ttop: 'red',\n *\t\t\tright: 'blue',\n *\t\t\tbottom: 'blue',\n *\t\t\tleft: 'red'\n *\t\t};\n *\n * @typedef {Object} module:engine/view/stylesmap~BoxSides\n *\n * @property {String} top Top side value.\n * @property {String} right Right side value.\n * @property {String} bottom Bottom side value.\n * @property {String} left Left side value.\n */\n"]}]}